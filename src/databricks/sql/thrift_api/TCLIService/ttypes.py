#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TProtocolVersion(object):
    __HIVE_JDBC_WORKAROUND = -7
    __TEST_PROTOCOL_VERSION = 65281
    HIVE_CLI_SERVICE_PROTOCOL_V1 = 0
    HIVE_CLI_SERVICE_PROTOCOL_V2 = 1
    HIVE_CLI_SERVICE_PROTOCOL_V3 = 2
    HIVE_CLI_SERVICE_PROTOCOL_V4 = 3
    HIVE_CLI_SERVICE_PROTOCOL_V5 = 4
    HIVE_CLI_SERVICE_PROTOCOL_V6 = 5
    HIVE_CLI_SERVICE_PROTOCOL_V7 = 6
    HIVE_CLI_SERVICE_PROTOCOL_V8 = 7
    HIVE_CLI_SERVICE_PROTOCOL_V9 = 8
    HIVE_CLI_SERVICE_PROTOCOL_V10 = 9
    SPARK_CLI_SERVICE_PROTOCOL_V1 = 42241
    SPARK_CLI_SERVICE_PROTOCOL_V2 = 42242
    SPARK_CLI_SERVICE_PROTOCOL_V3 = 42243
    SPARK_CLI_SERVICE_PROTOCOL_V4 = 42244
    SPARK_CLI_SERVICE_PROTOCOL_V5 = 42245
    SPARK_CLI_SERVICE_PROTOCOL_V6 = 42246
    SPARK_CLI_SERVICE_PROTOCOL_V7 = 42247
    SPARK_CLI_SERVICE_PROTOCOL_V8 = 42248
    SPARK_CLI_SERVICE_PROTOCOL_V9 = 42249

    _VALUES_TO_NAMES = {
        -7: "__HIVE_JDBC_WORKAROUND",
        65281: "__TEST_PROTOCOL_VERSION",
        0: "HIVE_CLI_SERVICE_PROTOCOL_V1",
        1: "HIVE_CLI_SERVICE_PROTOCOL_V2",
        2: "HIVE_CLI_SERVICE_PROTOCOL_V3",
        3: "HIVE_CLI_SERVICE_PROTOCOL_V4",
        4: "HIVE_CLI_SERVICE_PROTOCOL_V5",
        5: "HIVE_CLI_SERVICE_PROTOCOL_V6",
        6: "HIVE_CLI_SERVICE_PROTOCOL_V7",
        7: "HIVE_CLI_SERVICE_PROTOCOL_V8",
        8: "HIVE_CLI_SERVICE_PROTOCOL_V9",
        9: "HIVE_CLI_SERVICE_PROTOCOL_V10",
        42241: "SPARK_CLI_SERVICE_PROTOCOL_V1",
        42242: "SPARK_CLI_SERVICE_PROTOCOL_V2",
        42243: "SPARK_CLI_SERVICE_PROTOCOL_V3",
        42244: "SPARK_CLI_SERVICE_PROTOCOL_V4",
        42245: "SPARK_CLI_SERVICE_PROTOCOL_V5",
        42246: "SPARK_CLI_SERVICE_PROTOCOL_V6",
        42247: "SPARK_CLI_SERVICE_PROTOCOL_V7",
        42248: "SPARK_CLI_SERVICE_PROTOCOL_V8",
        42249: "SPARK_CLI_SERVICE_PROTOCOL_V9",
    }

    _NAMES_TO_VALUES = {
        "__HIVE_JDBC_WORKAROUND": -7,
        "__TEST_PROTOCOL_VERSION": 65281,
        "HIVE_CLI_SERVICE_PROTOCOL_V1": 0,
        "HIVE_CLI_SERVICE_PROTOCOL_V2": 1,
        "HIVE_CLI_SERVICE_PROTOCOL_V3": 2,
        "HIVE_CLI_SERVICE_PROTOCOL_V4": 3,
        "HIVE_CLI_SERVICE_PROTOCOL_V5": 4,
        "HIVE_CLI_SERVICE_PROTOCOL_V6": 5,
        "HIVE_CLI_SERVICE_PROTOCOL_V7": 6,
        "HIVE_CLI_SERVICE_PROTOCOL_V8": 7,
        "HIVE_CLI_SERVICE_PROTOCOL_V9": 8,
        "HIVE_CLI_SERVICE_PROTOCOL_V10": 9,
        "SPARK_CLI_SERVICE_PROTOCOL_V1": 42241,
        "SPARK_CLI_SERVICE_PROTOCOL_V2": 42242,
        "SPARK_CLI_SERVICE_PROTOCOL_V3": 42243,
        "SPARK_CLI_SERVICE_PROTOCOL_V4": 42244,
        "SPARK_CLI_SERVICE_PROTOCOL_V5": 42245,
        "SPARK_CLI_SERVICE_PROTOCOL_V6": 42246,
        "SPARK_CLI_SERVICE_PROTOCOL_V7": 42247,
        "SPARK_CLI_SERVICE_PROTOCOL_V8": 42248,
        "SPARK_CLI_SERVICE_PROTOCOL_V9": 42249,
    }


class TTypeId(object):
    BOOLEAN_TYPE = 0
    TINYINT_TYPE = 1
    SMALLINT_TYPE = 2
    INT_TYPE = 3
    BIGINT_TYPE = 4
    FLOAT_TYPE = 5
    DOUBLE_TYPE = 6
    STRING_TYPE = 7
    TIMESTAMP_TYPE = 8
    BINARY_TYPE = 9
    ARRAY_TYPE = 10
    MAP_TYPE = 11
    STRUCT_TYPE = 12
    UNION_TYPE = 13
    USER_DEFINED_TYPE = 14
    DECIMAL_TYPE = 15
    NULL_TYPE = 16
    DATE_TYPE = 17
    VARCHAR_TYPE = 18
    CHAR_TYPE = 19
    INTERVAL_YEAR_MONTH_TYPE = 20
    INTERVAL_DAY_TIME_TYPE = 21

    _VALUES_TO_NAMES = {
        0: "BOOLEAN_TYPE",
        1: "TINYINT_TYPE",
        2: "SMALLINT_TYPE",
        3: "INT_TYPE",
        4: "BIGINT_TYPE",
        5: "FLOAT_TYPE",
        6: "DOUBLE_TYPE",
        7: "STRING_TYPE",
        8: "TIMESTAMP_TYPE",
        9: "BINARY_TYPE",
        10: "ARRAY_TYPE",
        11: "MAP_TYPE",
        12: "STRUCT_TYPE",
        13: "UNION_TYPE",
        14: "USER_DEFINED_TYPE",
        15: "DECIMAL_TYPE",
        16: "NULL_TYPE",
        17: "DATE_TYPE",
        18: "VARCHAR_TYPE",
        19: "CHAR_TYPE",
        20: "INTERVAL_YEAR_MONTH_TYPE",
        21: "INTERVAL_DAY_TIME_TYPE",
    }

    _NAMES_TO_VALUES = {
        "BOOLEAN_TYPE": 0,
        "TINYINT_TYPE": 1,
        "SMALLINT_TYPE": 2,
        "INT_TYPE": 3,
        "BIGINT_TYPE": 4,
        "FLOAT_TYPE": 5,
        "DOUBLE_TYPE": 6,
        "STRING_TYPE": 7,
        "TIMESTAMP_TYPE": 8,
        "BINARY_TYPE": 9,
        "ARRAY_TYPE": 10,
        "MAP_TYPE": 11,
        "STRUCT_TYPE": 12,
        "UNION_TYPE": 13,
        "USER_DEFINED_TYPE": 14,
        "DECIMAL_TYPE": 15,
        "NULL_TYPE": 16,
        "DATE_TYPE": 17,
        "VARCHAR_TYPE": 18,
        "CHAR_TYPE": 19,
        "INTERVAL_YEAR_MONTH_TYPE": 20,
        "INTERVAL_DAY_TIME_TYPE": 21,
    }


class TSparkRowSetType(object):
    ARROW_BASED_SET = 0
    COLUMN_BASED_SET = 1
    ROW_BASED_SET = 2
    URL_BASED_SET = 3

    _VALUES_TO_NAMES = {
        0: "ARROW_BASED_SET",
        1: "COLUMN_BASED_SET",
        2: "ROW_BASED_SET",
        3: "URL_BASED_SET",
    }

    _NAMES_TO_VALUES = {
        "ARROW_BASED_SET": 0,
        "COLUMN_BASED_SET": 1,
        "ROW_BASED_SET": 2,
        "URL_BASED_SET": 3,
    }


class TDBSqlCompressionCodec(object):
    NONE = 0
    LZ4_FRAME = 1
    LZ4_BLOCK = 2

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "LZ4_FRAME",
        2: "LZ4_BLOCK",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "LZ4_FRAME": 1,
        "LZ4_BLOCK": 2,
    }


class TDBSqlArrowLayout(object):
    ARROW_BATCH = 0
    ARROW_STREAMING = 1

    _VALUES_TO_NAMES = {
        0: "ARROW_BATCH",
        1: "ARROW_STREAMING",
    }

    _NAMES_TO_VALUES = {
        "ARROW_BATCH": 0,
        "ARROW_STREAMING": 1,
    }


class TStatusCode(object):
    SUCCESS_STATUS = 0
    SUCCESS_WITH_INFO_STATUS = 1
    STILL_EXECUTING_STATUS = 2
    ERROR_STATUS = 3
    INVALID_HANDLE_STATUS = 4

    _VALUES_TO_NAMES = {
        0: "SUCCESS_STATUS",
        1: "SUCCESS_WITH_INFO_STATUS",
        2: "STILL_EXECUTING_STATUS",
        3: "ERROR_STATUS",
        4: "INVALID_HANDLE_STATUS",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS_STATUS": 0,
        "SUCCESS_WITH_INFO_STATUS": 1,
        "STILL_EXECUTING_STATUS": 2,
        "ERROR_STATUS": 3,
        "INVALID_HANDLE_STATUS": 4,
    }


class TOperationState(object):
    INITIALIZED_STATE = 0
    RUNNING_STATE = 1
    FINISHED_STATE = 2
    CANCELED_STATE = 3
    CLOSED_STATE = 4
    ERROR_STATE = 5
    UKNOWN_STATE = 6
    PENDING_STATE = 7
    TIMEDOUT_STATE = 8

    _VALUES_TO_NAMES = {
        0: "INITIALIZED_STATE",
        1: "RUNNING_STATE",
        2: "FINISHED_STATE",
        3: "CANCELED_STATE",
        4: "CLOSED_STATE",
        5: "ERROR_STATE",
        6: "UKNOWN_STATE",
        7: "PENDING_STATE",
        8: "TIMEDOUT_STATE",
    }

    _NAMES_TO_VALUES = {
        "INITIALIZED_STATE": 0,
        "RUNNING_STATE": 1,
        "FINISHED_STATE": 2,
        "CANCELED_STATE": 3,
        "CLOSED_STATE": 4,
        "ERROR_STATE": 5,
        "UKNOWN_STATE": 6,
        "PENDING_STATE": 7,
        "TIMEDOUT_STATE": 8,
    }


class TOperationType(object):
    EXECUTE_STATEMENT = 0
    GET_TYPE_INFO = 1
    GET_CATALOGS = 2
    GET_SCHEMAS = 3
    GET_TABLES = 4
    GET_TABLE_TYPES = 5
    GET_COLUMNS = 6
    GET_FUNCTIONS = 7
    UNKNOWN = 8

    _VALUES_TO_NAMES = {
        0: "EXECUTE_STATEMENT",
        1: "GET_TYPE_INFO",
        2: "GET_CATALOGS",
        3: "GET_SCHEMAS",
        4: "GET_TABLES",
        5: "GET_TABLE_TYPES",
        6: "GET_COLUMNS",
        7: "GET_FUNCTIONS",
        8: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "EXECUTE_STATEMENT": 0,
        "GET_TYPE_INFO": 1,
        "GET_CATALOGS": 2,
        "GET_SCHEMAS": 3,
        "GET_TABLES": 4,
        "GET_TABLE_TYPES": 5,
        "GET_COLUMNS": 6,
        "GET_FUNCTIONS": 7,
        "UNKNOWN": 8,
    }


class TGetInfoType(object):
    CLI_MAX_DRIVER_CONNECTIONS = 0
    CLI_MAX_CONCURRENT_ACTIVITIES = 1
    CLI_DATA_SOURCE_NAME = 2
    CLI_FETCH_DIRECTION = 8
    CLI_SERVER_NAME = 13
    CLI_SEARCH_PATTERN_ESCAPE = 14
    CLI_DBMS_NAME = 17
    CLI_DBMS_VER = 18
    CLI_ACCESSIBLE_TABLES = 19
    CLI_ACCESSIBLE_PROCEDURES = 20
    CLI_CURSOR_COMMIT_BEHAVIOR = 23
    CLI_DATA_SOURCE_READ_ONLY = 25
    CLI_DEFAULT_TXN_ISOLATION = 26
    CLI_IDENTIFIER_CASE = 28
    CLI_IDENTIFIER_QUOTE_CHAR = 29
    CLI_MAX_COLUMN_NAME_LEN = 30
    CLI_MAX_CURSOR_NAME_LEN = 31
    CLI_MAX_SCHEMA_NAME_LEN = 32
    CLI_MAX_CATALOG_NAME_LEN = 34
    CLI_MAX_TABLE_NAME_LEN = 35
    CLI_SCROLL_CONCURRENCY = 43
    CLI_TXN_CAPABLE = 46
    CLI_USER_NAME = 47
    CLI_TXN_ISOLATION_OPTION = 72
    CLI_INTEGRITY = 73
    CLI_GETDATA_EXTENSIONS = 81
    CLI_NULL_COLLATION = 85
    CLI_ALTER_TABLE = 86
    CLI_ORDER_BY_COLUMNS_IN_SELECT = 90
    CLI_SPECIAL_CHARACTERS = 94
    CLI_MAX_COLUMNS_IN_GROUP_BY = 97
    CLI_MAX_COLUMNS_IN_INDEX = 98
    CLI_MAX_COLUMNS_IN_ORDER_BY = 99
    CLI_MAX_COLUMNS_IN_SELECT = 100
    CLI_MAX_COLUMNS_IN_TABLE = 101
    CLI_MAX_INDEX_SIZE = 102
    CLI_MAX_ROW_SIZE = 104
    CLI_MAX_STATEMENT_LEN = 105
    CLI_MAX_TABLES_IN_SELECT = 106
    CLI_MAX_USER_NAME_LEN = 107
    CLI_OJ_CAPABILITIES = 115
    CLI_XOPEN_CLI_YEAR = 10000
    CLI_CURSOR_SENSITIVITY = 10001
    CLI_DESCRIBE_PARAMETER = 10002
    CLI_CATALOG_NAME = 10003
    CLI_COLLATION_SEQ = 10004
    CLI_MAX_IDENTIFIER_LEN = 10005

    _VALUES_TO_NAMES = {
        0: "CLI_MAX_DRIVER_CONNECTIONS",
        1: "CLI_MAX_CONCURRENT_ACTIVITIES",
        2: "CLI_DATA_SOURCE_NAME",
        8: "CLI_FETCH_DIRECTION",
        13: "CLI_SERVER_NAME",
        14: "CLI_SEARCH_PATTERN_ESCAPE",
        17: "CLI_DBMS_NAME",
        18: "CLI_DBMS_VER",
        19: "CLI_ACCESSIBLE_TABLES",
        20: "CLI_ACCESSIBLE_PROCEDURES",
        23: "CLI_CURSOR_COMMIT_BEHAVIOR",
        25: "CLI_DATA_SOURCE_READ_ONLY",
        26: "CLI_DEFAULT_TXN_ISOLATION",
        28: "CLI_IDENTIFIER_CASE",
        29: "CLI_IDENTIFIER_QUOTE_CHAR",
        30: "CLI_MAX_COLUMN_NAME_LEN",
        31: "CLI_MAX_CURSOR_NAME_LEN",
        32: "CLI_MAX_SCHEMA_NAME_LEN",
        34: "CLI_MAX_CATALOG_NAME_LEN",
        35: "CLI_MAX_TABLE_NAME_LEN",
        43: "CLI_SCROLL_CONCURRENCY",
        46: "CLI_TXN_CAPABLE",
        47: "CLI_USER_NAME",
        72: "CLI_TXN_ISOLATION_OPTION",
        73: "CLI_INTEGRITY",
        81: "CLI_GETDATA_EXTENSIONS",
        85: "CLI_NULL_COLLATION",
        86: "CLI_ALTER_TABLE",
        90: "CLI_ORDER_BY_COLUMNS_IN_SELECT",
        94: "CLI_SPECIAL_CHARACTERS",
        97: "CLI_MAX_COLUMNS_IN_GROUP_BY",
        98: "CLI_MAX_COLUMNS_IN_INDEX",
        99: "CLI_MAX_COLUMNS_IN_ORDER_BY",
        100: "CLI_MAX_COLUMNS_IN_SELECT",
        101: "CLI_MAX_COLUMNS_IN_TABLE",
        102: "CLI_MAX_INDEX_SIZE",
        104: "CLI_MAX_ROW_SIZE",
        105: "CLI_MAX_STATEMENT_LEN",
        106: "CLI_MAX_TABLES_IN_SELECT",
        107: "CLI_MAX_USER_NAME_LEN",
        115: "CLI_OJ_CAPABILITIES",
        10000: "CLI_XOPEN_CLI_YEAR",
        10001: "CLI_CURSOR_SENSITIVITY",
        10002: "CLI_DESCRIBE_PARAMETER",
        10003: "CLI_CATALOG_NAME",
        10004: "CLI_COLLATION_SEQ",
        10005: "CLI_MAX_IDENTIFIER_LEN",
    }

    _NAMES_TO_VALUES = {
        "CLI_MAX_DRIVER_CONNECTIONS": 0,
        "CLI_MAX_CONCURRENT_ACTIVITIES": 1,
        "CLI_DATA_SOURCE_NAME": 2,
        "CLI_FETCH_DIRECTION": 8,
        "CLI_SERVER_NAME": 13,
        "CLI_SEARCH_PATTERN_ESCAPE": 14,
        "CLI_DBMS_NAME": 17,
        "CLI_DBMS_VER": 18,
        "CLI_ACCESSIBLE_TABLES": 19,
        "CLI_ACCESSIBLE_PROCEDURES": 20,
        "CLI_CURSOR_COMMIT_BEHAVIOR": 23,
        "CLI_DATA_SOURCE_READ_ONLY": 25,
        "CLI_DEFAULT_TXN_ISOLATION": 26,
        "CLI_IDENTIFIER_CASE": 28,
        "CLI_IDENTIFIER_QUOTE_CHAR": 29,
        "CLI_MAX_COLUMN_NAME_LEN": 30,
        "CLI_MAX_CURSOR_NAME_LEN": 31,
        "CLI_MAX_SCHEMA_NAME_LEN": 32,
        "CLI_MAX_CATALOG_NAME_LEN": 34,
        "CLI_MAX_TABLE_NAME_LEN": 35,
        "CLI_SCROLL_CONCURRENCY": 43,
        "CLI_TXN_CAPABLE": 46,
        "CLI_USER_NAME": 47,
        "CLI_TXN_ISOLATION_OPTION": 72,
        "CLI_INTEGRITY": 73,
        "CLI_GETDATA_EXTENSIONS": 81,
        "CLI_NULL_COLLATION": 85,
        "CLI_ALTER_TABLE": 86,
        "CLI_ORDER_BY_COLUMNS_IN_SELECT": 90,
        "CLI_SPECIAL_CHARACTERS": 94,
        "CLI_MAX_COLUMNS_IN_GROUP_BY": 97,
        "CLI_MAX_COLUMNS_IN_INDEX": 98,
        "CLI_MAX_COLUMNS_IN_ORDER_BY": 99,
        "CLI_MAX_COLUMNS_IN_SELECT": 100,
        "CLI_MAX_COLUMNS_IN_TABLE": 101,
        "CLI_MAX_INDEX_SIZE": 102,
        "CLI_MAX_ROW_SIZE": 104,
        "CLI_MAX_STATEMENT_LEN": 105,
        "CLI_MAX_TABLES_IN_SELECT": 106,
        "CLI_MAX_USER_NAME_LEN": 107,
        "CLI_OJ_CAPABILITIES": 115,
        "CLI_XOPEN_CLI_YEAR": 10000,
        "CLI_CURSOR_SENSITIVITY": 10001,
        "CLI_DESCRIBE_PARAMETER": 10002,
        "CLI_CATALOG_NAME": 10003,
        "CLI_COLLATION_SEQ": 10004,
        "CLI_MAX_IDENTIFIER_LEN": 10005,
    }


class TCacheLookupResult(object):
    CACHE_INELIGIBLE = 0
    LOCAL_CACHE_HIT = 1
    REMOTE_CACHE_HIT = 2
    CACHE_MISS = 3

    _VALUES_TO_NAMES = {
        0: "CACHE_INELIGIBLE",
        1: "LOCAL_CACHE_HIT",
        2: "REMOTE_CACHE_HIT",
        3: "CACHE_MISS",
    }

    _NAMES_TO_VALUES = {
        "CACHE_INELIGIBLE": 0,
        "LOCAL_CACHE_HIT": 1,
        "REMOTE_CACHE_HIT": 2,
        "CACHE_MISS": 3,
    }


class TFetchOrientation(object):
    FETCH_NEXT = 0
    FETCH_PRIOR = 1
    FETCH_RELATIVE = 2
    FETCH_ABSOLUTE = 3
    FETCH_FIRST = 4
    FETCH_LAST = 5

    _VALUES_TO_NAMES = {
        0: "FETCH_NEXT",
        1: "FETCH_PRIOR",
        2: "FETCH_RELATIVE",
        3: "FETCH_ABSOLUTE",
        4: "FETCH_FIRST",
        5: "FETCH_LAST",
    }

    _NAMES_TO_VALUES = {
        "FETCH_NEXT": 0,
        "FETCH_PRIOR": 1,
        "FETCH_RELATIVE": 2,
        "FETCH_ABSOLUTE": 3,
        "FETCH_FIRST": 4,
        "FETCH_LAST": 5,
    }


class TJobExecutionStatus(object):
    IN_PROGRESS = 0
    COMPLETE = 1
    NOT_AVAILABLE = 2

    _VALUES_TO_NAMES = {
        0: "IN_PROGRESS",
        1: "COMPLETE",
        2: "NOT_AVAILABLE",
    }

    _NAMES_TO_VALUES = {
        "IN_PROGRESS": 0,
        "COMPLETE": 1,
        "NOT_AVAILABLE": 2,
    }


class TTypeQualifierValue(object):
    """
    Attributes:
     - i32Value
     - stringValue

    """


    def __init__(self, i32Value=None, stringValue=None,):
        self.i32Value = i32Value
        self.stringValue = stringValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.i32Value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeQualifierValue')
        if self.i32Value is not None:
            oprot.writeFieldBegin('i32Value', TType.I32, 1)
            oprot.writeI32(self.i32Value)
            oprot.writeFieldEnd()
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 2)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTypeQualifiers(object):
    """
    Attributes:
     - qualifiers

    """


    def __init__(self, qualifiers=None,):
        self.qualifiers = qualifiers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.qualifiers = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = TTypeQualifierValue()
                        _val6.read(iprot)
                        self.qualifiers[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeQualifiers')
        if self.qualifiers is not None:
            oprot.writeFieldBegin('qualifiers', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.qualifiers))
            for kiter7, viter8 in self.qualifiers.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.qualifiers is None:
            raise TProtocolException(message='Required field qualifiers is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPrimitiveTypeEntry(object):
    """
    Attributes:
     - type
     - typeQualifiers

    """


    def __init__(self, type=None, typeQualifiers=None,):
        self.type = type
        self.typeQualifiers = typeQualifiers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.typeQualifiers = TTypeQualifiers()
                    self.typeQualifiers.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TPrimitiveTypeEntry')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.typeQualifiers is not None:
            oprot.writeFieldBegin('typeQualifiers', TType.STRUCT, 2)
            self.typeQualifiers.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TArrayTypeEntry(object):
    """
    Attributes:
     - objectTypePtr

    """


    def __init__(self, objectTypePtr=None,):
        self.objectTypePtr = objectTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objectTypePtr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TArrayTypeEntry')
        if self.objectTypePtr is not None:
            oprot.writeFieldBegin('objectTypePtr', TType.I32, 1)
            oprot.writeI32(self.objectTypePtr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.objectTypePtr is None:
            raise TProtocolException(message='Required field objectTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMapTypeEntry(object):
    """
    Attributes:
     - keyTypePtr
     - valueTypePtr

    """


    def __init__(self, keyTypePtr=None, valueTypePtr=None,):
        self.keyTypePtr = keyTypePtr
        self.valueTypePtr = valueTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.keyTypePtr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.valueTypePtr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TMapTypeEntry')
        if self.keyTypePtr is not None:
            oprot.writeFieldBegin('keyTypePtr', TType.I32, 1)
            oprot.writeI32(self.keyTypePtr)
            oprot.writeFieldEnd()
        if self.valueTypePtr is not None:
            oprot.writeFieldBegin('valueTypePtr', TType.I32, 2)
            oprot.writeI32(self.valueTypePtr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.keyTypePtr is None:
            raise TProtocolException(message='Required field keyTypePtr is unset!')
        if self.valueTypePtr is None:
            raise TProtocolException(message='Required field valueTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStructTypeEntry(object):
    """
    Attributes:
     - nameToTypePtr

    """


    def __init__(self, nameToTypePtr=None,):
        self.nameToTypePtr = nameToTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.nameToTypePtr = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readI32()
                        self.nameToTypePtr[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStructTypeEntry')
        if self.nameToTypePtr is not None:
            oprot.writeFieldBegin('nameToTypePtr', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.nameToTypePtr))
            for kiter16, viter17 in self.nameToTypePtr.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeI32(viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nameToTypePtr is None:
            raise TProtocolException(message='Required field nameToTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TUnionTypeEntry(object):
    """
    Attributes:
     - nameToTypePtr

    """


    def __init__(self, nameToTypePtr=None,):
        self.nameToTypePtr = nameToTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.nameToTypePtr = {}
                    (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                    for _i22 in range(_size18):
                        _key23 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val24 = iprot.readI32()
                        self.nameToTypePtr[_key23] = _val24
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TUnionTypeEntry')
        if self.nameToTypePtr is not None:
            oprot.writeFieldBegin('nameToTypePtr', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.nameToTypePtr))
            for kiter25, viter26 in self.nameToTypePtr.items():
                oprot.writeString(kiter25.encode('utf-8') if sys.version_info[0] == 2 else kiter25)
                oprot.writeI32(viter26)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nameToTypePtr is None:
            raise TProtocolException(message='Required field nameToTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TUserDefinedTypeEntry(object):
    """
    Attributes:
     - typeClassName

    """


    def __init__(self, typeClassName=None,):
        self.typeClassName = typeClassName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.typeClassName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TUserDefinedTypeEntry')
        if self.typeClassName is not None:
            oprot.writeFieldBegin('typeClassName', TType.STRING, 1)
            oprot.writeString(self.typeClassName.encode('utf-8') if sys.version_info[0] == 2 else self.typeClassName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.typeClassName is None:
            raise TProtocolException(message='Required field typeClassName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTypeEntry(object):
    """
    Attributes:
     - primitiveEntry
     - arrayEntry
     - mapEntry
     - structEntry
     - unionEntry
     - userDefinedTypeEntry

    """


    def __init__(self, primitiveEntry=None, arrayEntry=None, mapEntry=None, structEntry=None, unionEntry=None, userDefinedTypeEntry=None,):
        self.primitiveEntry = primitiveEntry
        self.arrayEntry = arrayEntry
        self.mapEntry = mapEntry
        self.structEntry = structEntry
        self.unionEntry = unionEntry
        self.userDefinedTypeEntry = userDefinedTypeEntry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.primitiveEntry = TPrimitiveTypeEntry()
                    self.primitiveEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.arrayEntry = TArrayTypeEntry()
                    self.arrayEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mapEntry = TMapTypeEntry()
                    self.mapEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.structEntry = TStructTypeEntry()
                    self.structEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.unionEntry = TUnionTypeEntry()
                    self.unionEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.userDefinedTypeEntry = TUserDefinedTypeEntry()
                    self.userDefinedTypeEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeEntry')
        if self.primitiveEntry is not None:
            oprot.writeFieldBegin('primitiveEntry', TType.STRUCT, 1)
            self.primitiveEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.arrayEntry is not None:
            oprot.writeFieldBegin('arrayEntry', TType.STRUCT, 2)
            self.arrayEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.mapEntry is not None:
            oprot.writeFieldBegin('mapEntry', TType.STRUCT, 3)
            self.mapEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.structEntry is not None:
            oprot.writeFieldBegin('structEntry', TType.STRUCT, 4)
            self.structEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.unionEntry is not None:
            oprot.writeFieldBegin('unionEntry', TType.STRUCT, 5)
            self.unionEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.userDefinedTypeEntry is not None:
            oprot.writeFieldBegin('userDefinedTypeEntry', TType.STRUCT, 6)
            self.userDefinedTypeEntry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTypeDesc(object):
    """
    Attributes:
     - types

    """


    def __init__(self, types=None,):
        self.types = types

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.types = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = TTypeEntry()
                        _elem32.read(iprot)
                        self.types.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeDesc')
        if self.types is not None:
            oprot.writeFieldBegin('types', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.types))
            for iter33 in self.types:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.types is None:
            raise TProtocolException(message='Required field types is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TColumnDesc(object):
    """
    Attributes:
     - columnName
     - typeDesc
     - position
     - comment

    """


    def __init__(self, columnName=None, typeDesc=None, position=None, comment=None,):
        self.columnName = columnName
        self.typeDesc = typeDesc
        self.position = position
        self.comment = comment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.typeDesc = TTypeDesc()
                    self.typeDesc.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.position = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TColumnDesc')
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 1)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        if self.typeDesc is not None:
            oprot.writeFieldBegin('typeDesc', TType.STRUCT, 2)
            self.typeDesc.write(oprot)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.I32, 3)
            oprot.writeI32(self.position)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 4)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.columnName is None:
            raise TProtocolException(message='Required field columnName is unset!')
        if self.typeDesc is None:
            raise TProtocolException(message='Required field typeDesc is unset!')
        if self.position is None:
            raise TProtocolException(message='Required field position is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTableSchema(object):
    """
    Attributes:
     - columns

    """


    def __init__(self, columns=None,):
        self.columns = columns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = TColumnDesc()
                        _elem39.read(iprot)
                        self.columns.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTableSchema')
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter40 in self.columns:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.columns is None:
            raise TProtocolException(message='Required field columns is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBoolValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBoolValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 1)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TByteValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.value = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TByteValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BYTE, 1)
            oprot.writeByte(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI16Value(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.value = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI16Value')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I16, 1)
            oprot.writeI16(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI32Value(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI32Value')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 1)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI64Value(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI64Value')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I64, 1)
            oprot.writeI64(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDoubleValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDoubleValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 1)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStringValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStringValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TColumnValue(object):
    """
    Attributes:
     - boolVal
     - byteVal
     - i16Val
     - i32Val
     - i64Val
     - doubleVal
     - stringVal

    """


    def __init__(self, boolVal=None, byteVal=None, i16Val=None, i32Val=None, i64Val=None, doubleVal=None, stringVal=None,):
        self.boolVal = boolVal
        self.byteVal = byteVal
        self.i16Val = i16Val
        self.i32Val = i32Val
        self.i64Val = i64Val
        self.doubleVal = doubleVal
        self.stringVal = stringVal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.boolVal = TBoolValue()
                    self.boolVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.byteVal = TByteValue()
                    self.byteVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.i16Val = TI16Value()
                    self.i16Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.i32Val = TI32Value()
                    self.i32Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.i64Val = TI64Value()
                    self.i64Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.doubleVal = TDoubleValue()
                    self.doubleVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.stringVal = TStringValue()
                    self.stringVal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TColumnValue')
        if self.boolVal is not None:
            oprot.writeFieldBegin('boolVal', TType.STRUCT, 1)
            self.boolVal.write(oprot)
            oprot.writeFieldEnd()
        if self.byteVal is not None:
            oprot.writeFieldBegin('byteVal', TType.STRUCT, 2)
            self.byteVal.write(oprot)
            oprot.writeFieldEnd()
        if self.i16Val is not None:
            oprot.writeFieldBegin('i16Val', TType.STRUCT, 3)
            self.i16Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i32Val is not None:
            oprot.writeFieldBegin('i32Val', TType.STRUCT, 4)
            self.i32Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i64Val is not None:
            oprot.writeFieldBegin('i64Val', TType.STRUCT, 5)
            self.i64Val.write(oprot)
            oprot.writeFieldEnd()
        if self.doubleVal is not None:
            oprot.writeFieldBegin('doubleVal', TType.STRUCT, 6)
            self.doubleVal.write(oprot)
            oprot.writeFieldEnd()
        if self.stringVal is not None:
            oprot.writeFieldBegin('stringVal', TType.STRUCT, 7)
            self.stringVal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRow(object):
    """
    Attributes:
     - colVals

    """


    def __init__(self, colVals=None,):
        self.colVals = colVals

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.colVals = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = TColumnValue()
                        _elem46.read(iprot)
                        self.colVals.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRow')
        if self.colVals is not None:
            oprot.writeFieldBegin('colVals', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.colVals))
            for iter47 in self.colVals:
                iter47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.colVals is None:
            raise TProtocolException(message='Required field colVals is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBoolColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readBool()
                        self.values.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBoolColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.BOOL, len(self.values))
            for iter54 in self.values:
                oprot.writeBool(iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TByteColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readByte()
                        self.values.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TByteColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.BYTE, len(self.values))
            for iter61 in self.values:
                oprot.writeByte(iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI16Column(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readI16()
                        self.values.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI16Column')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.I16, len(self.values))
            for iter68 in self.values:
                oprot.writeI16(iter68)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI32Column(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readI32()
                        self.values.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI32Column')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.values))
            for iter75 in self.values:
                oprot.writeI32(iter75)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI64Column(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = iprot.readI64()
                        self.values.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI64Column')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.values))
            for iter82 in self.values:
                oprot.writeI64(iter82)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDoubleColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readDouble()
                        self.values.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDoubleColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.values))
            for iter89 in self.values:
                oprot.writeDouble(iter89)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStringColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.values.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStringColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.values))
            for iter96 in self.values:
                oprot.writeString(iter96.encode('utf-8') if sys.version_info[0] == 2 else iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBinaryColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = iprot.readBinary()
                        self.values.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBinaryColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.values))
            for iter103 in self.values:
                oprot.writeBinary(iter103)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TColumn(object):
    """
    Attributes:
     - boolVal
     - byteVal
     - i16Val
     - i32Val
     - i64Val
     - doubleVal
     - stringVal
     - binaryVal

    """


    def __init__(self, boolVal=None, byteVal=None, i16Val=None, i32Val=None, i64Val=None, doubleVal=None, stringVal=None, binaryVal=None,):
        self.boolVal = boolVal
        self.byteVal = byteVal
        self.i16Val = i16Val
        self.i32Val = i32Val
        self.i64Val = i64Val
        self.doubleVal = doubleVal
        self.stringVal = stringVal
        self.binaryVal = binaryVal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.boolVal = TBoolColumn()
                    self.boolVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.byteVal = TByteColumn()
                    self.byteVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.i16Val = TI16Column()
                    self.i16Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.i32Val = TI32Column()
                    self.i32Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.i64Val = TI64Column()
                    self.i64Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.doubleVal = TDoubleColumn()
                    self.doubleVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.stringVal = TStringColumn()
                    self.stringVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.binaryVal = TBinaryColumn()
                    self.binaryVal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TColumn')
        if self.boolVal is not None:
            oprot.writeFieldBegin('boolVal', TType.STRUCT, 1)
            self.boolVal.write(oprot)
            oprot.writeFieldEnd()
        if self.byteVal is not None:
            oprot.writeFieldBegin('byteVal', TType.STRUCT, 2)
            self.byteVal.write(oprot)
            oprot.writeFieldEnd()
        if self.i16Val is not None:
            oprot.writeFieldBegin('i16Val', TType.STRUCT, 3)
            self.i16Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i32Val is not None:
            oprot.writeFieldBegin('i32Val', TType.STRUCT, 4)
            self.i32Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i64Val is not None:
            oprot.writeFieldBegin('i64Val', TType.STRUCT, 5)
            self.i64Val.write(oprot)
            oprot.writeFieldEnd()
        if self.doubleVal is not None:
            oprot.writeFieldBegin('doubleVal', TType.STRUCT, 6)
            self.doubleVal.write(oprot)
            oprot.writeFieldEnd()
        if self.stringVal is not None:
            oprot.writeFieldBegin('stringVal', TType.STRUCT, 7)
            self.stringVal.write(oprot)
            oprot.writeFieldEnd()
        if self.binaryVal is not None:
            oprot.writeFieldBegin('binaryVal', TType.STRUCT, 8)
            self.binaryVal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlJsonArrayFormat(object):
    """
    Attributes:
     - compressionCodec

    """


    def __init__(self, compressionCodec=None,):
        self.compressionCodec = compressionCodec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.compressionCodec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlJsonArrayFormat')
        if self.compressionCodec is not None:
            oprot.writeFieldBegin('compressionCodec', TType.I32, 1)
            oprot.writeI32(self.compressionCodec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlCsvFormat(object):
    """
    Attributes:
     - compressionCodec

    """


    def __init__(self, compressionCodec=None,):
        self.compressionCodec = compressionCodec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.compressionCodec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlCsvFormat')
        if self.compressionCodec is not None:
            oprot.writeFieldBegin('compressionCodec', TType.I32, 1)
            oprot.writeI32(self.compressionCodec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlArrowFormat(object):
    """
    Attributes:
     - arrowLayout
     - compressionCodec

    """


    def __init__(self, arrowLayout=None, compressionCodec=None,):
        self.arrowLayout = arrowLayout
        self.compressionCodec = compressionCodec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.arrowLayout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.compressionCodec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlArrowFormat')
        if self.arrowLayout is not None:
            oprot.writeFieldBegin('arrowLayout', TType.I32, 1)
            oprot.writeI32(self.arrowLayout)
            oprot.writeFieldEnd()
        if self.compressionCodec is not None:
            oprot.writeFieldBegin('compressionCodec', TType.I32, 2)
            oprot.writeI32(self.compressionCodec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlResultFormat(object):
    """
    Attributes:
     - arrowFormat
     - csvFormat
     - jsonArrayFormat

    """


    def __init__(self, arrowFormat=None, csvFormat=None, jsonArrayFormat=None,):
        self.arrowFormat = arrowFormat
        self.csvFormat = csvFormat
        self.jsonArrayFormat = jsonArrayFormat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.arrowFormat = TDBSqlArrowFormat()
                    self.arrowFormat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.csvFormat = TDBSqlCsvFormat()
                    self.csvFormat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.jsonArrayFormat = TDBSqlJsonArrayFormat()
                    self.jsonArrayFormat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlResultFormat')
        if self.arrowFormat is not None:
            oprot.writeFieldBegin('arrowFormat', TType.STRUCT, 1)
            self.arrowFormat.write(oprot)
            oprot.writeFieldEnd()
        if self.csvFormat is not None:
            oprot.writeFieldBegin('csvFormat', TType.STRUCT, 2)
            self.csvFormat.write(oprot)
            oprot.writeFieldEnd()
        if self.jsonArrayFormat is not None:
            oprot.writeFieldBegin('jsonArrayFormat', TType.STRUCT, 3)
            self.jsonArrayFormat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkArrowBatch(object):
    """
    Attributes:
     - batch
     - rowCount

    """


    def __init__(self, batch=None, rowCount=None,):
        self.batch = batch
        self.rowCount = rowCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.batch = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.rowCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkArrowBatch')
        if self.batch is not None:
            oprot.writeFieldBegin('batch', TType.STRING, 1)
            oprot.writeBinary(self.batch)
            oprot.writeFieldEnd()
        if self.rowCount is not None:
            oprot.writeFieldBegin('rowCount', TType.I64, 2)
            oprot.writeI64(self.rowCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.batch is None:
            raise TProtocolException(message='Required field batch is unset!')
        if self.rowCount is None:
            raise TProtocolException(message='Required field rowCount is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkArrowResultLink(object):
    """
    Attributes:
     - fileLink
     - expiryTime
     - startRowOffset
     - rowCount
     - bytesNum
     - httpHeaders

    """


    def __init__(self, fileLink=None, expiryTime=None, startRowOffset=None, rowCount=None, bytesNum=None, httpHeaders=None,):
        self.fileLink = fileLink
        self.expiryTime = expiryTime
        self.startRowOffset = startRowOffset
        self.rowCount = rowCount
        self.bytesNum = bytesNum
        self.httpHeaders = httpHeaders

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileLink = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.expiryTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.rowCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.bytesNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.httpHeaders = {}
                    (_ktype105, _vtype106, _size104) = iprot.readMapBegin()
                    for _i108 in range(_size104):
                        _key109 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val110 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.httpHeaders[_key109] = _val110
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkArrowResultLink')
        if self.fileLink is not None:
            oprot.writeFieldBegin('fileLink', TType.STRING, 1)
            oprot.writeString(self.fileLink.encode('utf-8') if sys.version_info[0] == 2 else self.fileLink)
            oprot.writeFieldEnd()
        if self.expiryTime is not None:
            oprot.writeFieldBegin('expiryTime', TType.I64, 2)
            oprot.writeI64(self.expiryTime)
            oprot.writeFieldEnd()
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 3)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.rowCount is not None:
            oprot.writeFieldBegin('rowCount', TType.I64, 4)
            oprot.writeI64(self.rowCount)
            oprot.writeFieldEnd()
        if self.bytesNum is not None:
            oprot.writeFieldBegin('bytesNum', TType.I64, 5)
            oprot.writeI64(self.bytesNum)
            oprot.writeFieldEnd()
        if self.httpHeaders is not None:
            oprot.writeFieldBegin('httpHeaders', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.httpHeaders))
            for kiter111, viter112 in self.httpHeaders.items():
                oprot.writeString(kiter111.encode('utf-8') if sys.version_info[0] == 2 else kiter111)
                oprot.writeString(viter112.encode('utf-8') if sys.version_info[0] == 2 else viter112)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fileLink is None:
            raise TProtocolException(message='Required field fileLink is unset!')
        if self.expiryTime is None:
            raise TProtocolException(message='Required field expiryTime is unset!')
        if self.startRowOffset is None:
            raise TProtocolException(message='Required field startRowOffset is unset!')
        if self.rowCount is None:
            raise TProtocolException(message='Required field rowCount is unset!')
        if self.bytesNum is None:
            raise TProtocolException(message='Required field bytesNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRowSet(object):
    """
    Attributes:
     - startRowOffset
     - rows
     - columns
     - binaryColumns
     - columnCount
     - arrowBatches
     - resultLinks

    """


    def __init__(self, startRowOffset=None, rows=None, columns=None, binaryColumns=None, columnCount=None, arrowBatches=None, resultLinks=None,):
        self.startRowOffset = startRowOffset
        self.rows = rows
        self.columns = columns
        self.binaryColumns = binaryColumns
        self.columnCount = columnCount
        self.arrowBatches = arrowBatches
        self.resultLinks = resultLinks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype116, _size113) = iprot.readListBegin()
                    for _i117 in range(_size113):
                        _elem118 = TRow()
                        _elem118.read(iprot)
                        self.rows.append(_elem118)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = TColumn()
                        _elem124.read(iprot)
                        self.columns.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.binaryColumns = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.columnCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.LIST:
                    self.arrowBatches = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = TSparkArrowBatch()
                        _elem130.read(iprot)
                        self.arrowBatches.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.LIST:
                    self.resultLinks = []
                    (_etype134, _size131) = iprot.readListBegin()
                    for _i135 in range(_size131):
                        _elem136 = TSparkArrowResultLink()
                        _elem136.read(iprot)
                        self.resultLinks.append(_elem136)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRowSet')
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 1)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.rows))
            for iter137 in self.rows:
                iter137.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter138 in self.columns:
                iter138.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.binaryColumns is not None:
            oprot.writeFieldBegin('binaryColumns', TType.STRING, 4)
            oprot.writeBinary(self.binaryColumns)
            oprot.writeFieldEnd()
        if self.columnCount is not None:
            oprot.writeFieldBegin('columnCount', TType.I32, 5)
            oprot.writeI32(self.columnCount)
            oprot.writeFieldEnd()
        if self.arrowBatches is not None:
            oprot.writeFieldBegin('arrowBatches', TType.LIST, 1281)
            oprot.writeListBegin(TType.STRUCT, len(self.arrowBatches))
            for iter139 in self.arrowBatches:
                iter139.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.resultLinks is not None:
            oprot.writeFieldBegin('resultLinks', TType.LIST, 1282)
            oprot.writeListBegin(TType.STRUCT, len(self.resultLinks))
            for iter140 in self.resultLinks:
                iter140.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.startRowOffset is None:
            raise TProtocolException(message='Required field startRowOffset is unset!')
        if self.rows is None:
            raise TProtocolException(message='Required field rows is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStatus(object):
    """
    Attributes:
     - statusCode
     - infoMessages
     - sqlState
     - errorCode
     - errorMessage
     - displayMessage
     - errorDetailsJson

    """


    def __init__(self, statusCode=None, infoMessages=None, sqlState=None, errorCode=None, errorMessage=None, displayMessage=None, errorDetailsJson=None,):
        self.statusCode = statusCode
        self.infoMessages = infoMessages
        self.sqlState = sqlState
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.displayMessage = displayMessage
        self.errorDetailsJson = errorDetailsJson

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.infoMessages = []
                    (_etype144, _size141) = iprot.readListBegin()
                    for _i145 in range(_size141):
                        _elem146 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.infoMessages.append(_elem146)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sqlState = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRING:
                    self.errorDetailsJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStatus')
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 1)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.infoMessages is not None:
            oprot.writeFieldBegin('infoMessages', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.infoMessages))
            for iter147 in self.infoMessages:
                oprot.writeString(iter147.encode('utf-8') if sys.version_info[0] == 2 else iter147)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sqlState is not None:
            oprot.writeFieldBegin('sqlState', TType.STRING, 3)
            oprot.writeString(self.sqlState.encode('utf-8') if sys.version_info[0] == 2 else self.sqlState)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 4)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 5)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 6)
            oprot.writeString(self.displayMessage.encode('utf-8') if sys.version_info[0] == 2 else self.displayMessage)
            oprot.writeFieldEnd()
        if self.errorDetailsJson is not None:
            oprot.writeFieldBegin('errorDetailsJson', TType.STRING, 1281)
            oprot.writeString(self.errorDetailsJson.encode('utf-8') if sys.version_info[0] == 2 else self.errorDetailsJson)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TNamespace(object):
    """
    Attributes:
     - catalogName
     - schemaName

    """


    def __init__(self, catalogName=None, schemaName=None,):
        self.catalogName = catalogName
        self.schemaName = schemaName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TNamespace')
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 1)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 2)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class THandleIdentifier(object):
    """
    Attributes:
     - guid
     - secret

    """


    def __init__(self, guid=None, secret=None,):
        self.guid = guid
        self.secret = secret

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guid = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secret = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('THandleIdentifier')
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 1)
            oprot.writeBinary(self.guid)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 2)
            oprot.writeBinary(self.secret)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guid is None:
            raise TProtocolException(message='Required field guid is unset!')
        if self.secret is None:
            raise TProtocolException(message='Required field secret is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSessionHandle(object):
    """
    Attributes:
     - sessionId

    """


    def __init__(self, sessionId=None,):
        self.sessionId = sessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionId = THandleIdentifier()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSessionHandle')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 1)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionId is None:
            raise TProtocolException(message='Required field sessionId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TOperationHandle(object):
    """
    Attributes:
     - operationId
     - operationType
     - hasResultSet
     - modifiedRowCount

    """


    def __init__(self, operationId=None, operationType=None, hasResultSet=None, modifiedRowCount=None,):
        self.operationId = operationId
        self.operationType = operationType
        self.hasResultSet = hasResultSet
        self.modifiedRowCount = modifiedRowCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasResultSet = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.modifiedRowCount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TOperationHandle')
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 1)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.operationType is not None:
            oprot.writeFieldBegin('operationType', TType.I32, 2)
            oprot.writeI32(self.operationType)
            oprot.writeFieldEnd()
        if self.hasResultSet is not None:
            oprot.writeFieldBegin('hasResultSet', TType.BOOL, 3)
            oprot.writeBool(self.hasResultSet)
            oprot.writeFieldEnd()
        if self.modifiedRowCount is not None:
            oprot.writeFieldBegin('modifiedRowCount', TType.DOUBLE, 4)
            oprot.writeDouble(self.modifiedRowCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationId is None:
            raise TProtocolException(message='Required field operationId is unset!')
        if self.operationType is None:
            raise TProtocolException(message='Required field operationType is unset!')
        if self.hasResultSet is None:
            raise TProtocolException(message='Required field hasResultSet is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TOpenSessionReq(object):
    """
    Attributes:
     - client_protocol
     - username
     - password
     - configuration
     - getInfos
     - client_protocol_i64
     - connectionProperties
     - initialNamespace
     - canUseMultipleCatalogs

    """


    def __init__(self, client_protocol=    -7, username=None, password=None, configuration=None, getInfos=None, client_protocol_i64=None, connectionProperties=None, initialNamespace=None, canUseMultipleCatalogs=None,):
        self.client_protocol = client_protocol
        self.username = username
        self.password = password
        self.configuration = configuration
        self.getInfos = getInfos
        self.client_protocol_i64 = client_protocol_i64
        self.connectionProperties = connectionProperties
        self.initialNamespace = initialNamespace
        self.canUseMultipleCatalogs = canUseMultipleCatalogs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.client_protocol = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.configuration = {}
                    (_ktype149, _vtype150, _size148) = iprot.readMapBegin()
                    for _i152 in range(_size148):
                        _key153 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val154 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.configuration[_key153] = _val154
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.LIST:
                    self.getInfos = []
                    (_etype158, _size155) = iprot.readListBegin()
                    for _i159 in range(_size155):
                        _elem160 = iprot.readI32()
                        self.getInfos.append(_elem160)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.I64:
                    self.client_protocol_i64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.MAP:
                    self.connectionProperties = {}
                    (_ktype162, _vtype163, _size161) = iprot.readMapBegin()
                    for _i165 in range(_size161):
                        _key166 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val167 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.connectionProperties[_key166] = _val167
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.STRUCT:
                    self.initialNamespace = TNamespace()
                    self.initialNamespace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.BOOL:
                    self.canUseMultipleCatalogs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TOpenSessionReq')
        if self.client_protocol is not None:
            oprot.writeFieldBegin('client_protocol', TType.I32, 1)
            oprot.writeI32(self.client_protocol)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.configuration))
            for kiter168, viter169 in self.configuration.items():
                oprot.writeString(kiter168.encode('utf-8') if sys.version_info[0] == 2 else kiter168)
                oprot.writeString(viter169.encode('utf-8') if sys.version_info[0] == 2 else viter169)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.getInfos is not None:
            oprot.writeFieldBegin('getInfos', TType.LIST, 1281)
            oprot.writeListBegin(TType.I32, len(self.getInfos))
            for iter170 in self.getInfos:
                oprot.writeI32(iter170)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.client_protocol_i64 is not None:
            oprot.writeFieldBegin('client_protocol_i64', TType.I64, 1282)
            oprot.writeI64(self.client_protocol_i64)
            oprot.writeFieldEnd()
        if self.connectionProperties is not None:
            oprot.writeFieldBegin('connectionProperties', TType.MAP, 1283)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.connectionProperties))
            for kiter171, viter172 in self.connectionProperties.items():
                oprot.writeString(kiter171.encode('utf-8') if sys.version_info[0] == 2 else kiter171)
                oprot.writeString(viter172.encode('utf-8') if sys.version_info[0] == 2 else viter172)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.initialNamespace is not None:
            oprot.writeFieldBegin('initialNamespace', TType.STRUCT, 1284)
            self.initialNamespace.write(oprot)
            oprot.writeFieldEnd()
        if self.canUseMultipleCatalogs is not None:
            oprot.writeFieldBegin('canUseMultipleCatalogs', TType.BOOL, 1285)
            oprot.writeBool(self.canUseMultipleCatalogs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TOpenSessionResp(object):
    """
    Attributes:
     - status
     - serverProtocolVersion
     - sessionHandle
     - configuration
     - initialNamespace
     - canUseMultipleCatalogs
     - getInfos

    """


    def __init__(self, status=None, serverProtocolVersion=None, sessionHandle=None, configuration=None, initialNamespace=None, canUseMultipleCatalogs=None, getInfos=None,):
        self.status = status
        self.serverProtocolVersion = serverProtocolVersion
        self.sessionHandle = sessionHandle
        self.configuration = configuration
        self.initialNamespace = initialNamespace
        self.canUseMultipleCatalogs = canUseMultipleCatalogs
        self.getInfos = getInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.serverProtocolVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.configuration = {}
                    (_ktype174, _vtype175, _size173) = iprot.readMapBegin()
                    for _i177 in range(_size173):
                        _key178 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val179 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.configuration[_key178] = _val179
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.STRUCT:
                    self.initialNamespace = TNamespace()
                    self.initialNamespace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.BOOL:
                    self.canUseMultipleCatalogs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.LIST:
                    self.getInfos = []
                    (_etype183, _size180) = iprot.readListBegin()
                    for _i184 in range(_size180):
                        _elem185 = TGetInfoValue()
                        _elem185.read(iprot)
                        self.getInfos.append(_elem185)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TOpenSessionResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.serverProtocolVersion is not None:
            oprot.writeFieldBegin('serverProtocolVersion', TType.I32, 2)
            oprot.writeI32(self.serverProtocolVersion)
            oprot.writeFieldEnd()
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 3)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.configuration))
            for kiter186, viter187 in self.configuration.items():
                oprot.writeString(kiter186.encode('utf-8') if sys.version_info[0] == 2 else kiter186)
                oprot.writeString(viter187.encode('utf-8') if sys.version_info[0] == 2 else viter187)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.getInfos is not None:
            oprot.writeFieldBegin('getInfos', TType.LIST, 1281)
            oprot.writeListBegin(TType.STRUCT, len(self.getInfos))
            for iter188 in self.getInfos:
                iter188.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.initialNamespace is not None:
            oprot.writeFieldBegin('initialNamespace', TType.STRUCT, 1284)
            self.initialNamespace.write(oprot)
            oprot.writeFieldEnd()
        if self.canUseMultipleCatalogs is not None:
            oprot.writeFieldBegin('canUseMultipleCatalogs', TType.BOOL, 1285)
            oprot.writeBool(self.canUseMultipleCatalogs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.serverProtocolVersion is None:
            raise TProtocolException(message='Required field serverProtocolVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseSessionReq(object):
    """
    Attributes:
     - sessionHandle

    """


    def __init__(self, sessionHandle=None,):
        self.sessionHandle = sessionHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseSessionReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseSessionResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseSessionResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetInfoValue(object):
    """
    Attributes:
     - stringValue
     - smallIntValue
     - integerBitmask
     - integerFlag
     - binaryValue
     - lenValue

    """


    def __init__(self, stringValue=None, smallIntValue=None, integerBitmask=None, integerFlag=None, binaryValue=None, lenValue=None,):
        self.stringValue = stringValue
        self.smallIntValue = smallIntValue
        self.integerBitmask = integerBitmask
        self.integerFlag = integerFlag
        self.binaryValue = binaryValue
        self.lenValue = lenValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.smallIntValue = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.integerBitmask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.integerFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.binaryValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lenValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetInfoValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.smallIntValue is not None:
            oprot.writeFieldBegin('smallIntValue', TType.I16, 2)
            oprot.writeI16(self.smallIntValue)
            oprot.writeFieldEnd()
        if self.integerBitmask is not None:
            oprot.writeFieldBegin('integerBitmask', TType.I32, 3)
            oprot.writeI32(self.integerBitmask)
            oprot.writeFieldEnd()
        if self.integerFlag is not None:
            oprot.writeFieldBegin('integerFlag', TType.I32, 4)
            oprot.writeI32(self.integerFlag)
            oprot.writeFieldEnd()
        if self.binaryValue is not None:
            oprot.writeFieldBegin('binaryValue', TType.I32, 5)
            oprot.writeI32(self.binaryValue)
            oprot.writeFieldEnd()
        if self.lenValue is not None:
            oprot.writeFieldBegin('lenValue', TType.I64, 6)
            oprot.writeI64(self.lenValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetInfoReq(object):
    """
    Attributes:
     - sessionHandle
     - infoType

    """


    def __init__(self, sessionHandle=None, infoType=None,):
        self.sessionHandle = sessionHandle
        self.infoType = infoType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.infoType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetInfoReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.infoType is not None:
            oprot.writeFieldBegin('infoType', TType.I32, 2)
            oprot.writeI32(self.infoType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.infoType is None:
            raise TProtocolException(message='Required field infoType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetInfoResp(object):
    """
    Attributes:
     - status
     - infoValue

    """


    def __init__(self, status=None, infoValue=None,):
        self.status = status
        self.infoValue = infoValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.infoValue = TGetInfoValue()
                    self.infoValue.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetInfoResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.infoValue is not None:
            oprot.writeFieldBegin('infoValue', TType.STRUCT, 2)
            self.infoValue.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.infoValue is None:
            raise TProtocolException(message='Required field infoValue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkGetDirectResults(object):
    """
    Attributes:
     - maxRows
     - maxBytes

    """


    def __init__(self, maxRows=None, maxBytes=None,):
        self.maxRows = maxRows
        self.maxBytes = maxBytes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.maxRows = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkGetDirectResults')
        if self.maxRows is not None:
            oprot.writeFieldBegin('maxRows', TType.I64, 1)
            oprot.writeI64(self.maxRows)
            oprot.writeFieldEnd()
        if self.maxBytes is not None:
            oprot.writeFieldBegin('maxBytes', TType.I64, 2)
            oprot.writeI64(self.maxBytes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.maxRows is None:
            raise TProtocolException(message='Required field maxRows is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkDirectResults(object):
    """
    Attributes:
     - operationStatus
     - resultSetMetadata
     - resultSet
     - closeOperation

    """


    def __init__(self, operationStatus=None, resultSetMetadata=None, resultSet=None, closeOperation=None,):
        self.operationStatus = operationStatus
        self.resultSetMetadata = resultSetMetadata
        self.resultSet = resultSet
        self.closeOperation = closeOperation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationStatus = TGetOperationStatusResp()
                    self.operationStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.resultSetMetadata = TGetResultSetMetadataResp()
                    self.resultSetMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.resultSet = TFetchResultsResp()
                    self.resultSet.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.closeOperation = TCloseOperationResp()
                    self.closeOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkDirectResults')
        if self.operationStatus is not None:
            oprot.writeFieldBegin('operationStatus', TType.STRUCT, 1)
            self.operationStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.resultSetMetadata is not None:
            oprot.writeFieldBegin('resultSetMetadata', TType.STRUCT, 2)
            self.resultSetMetadata.write(oprot)
            oprot.writeFieldEnd()
        if self.resultSet is not None:
            oprot.writeFieldBegin('resultSet', TType.STRUCT, 3)
            self.resultSet.write(oprot)
            oprot.writeFieldEnd()
        if self.closeOperation is not None:
            oprot.writeFieldBegin('closeOperation', TType.STRUCT, 4)
            self.closeOperation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkArrowTypes(object):
    """
    Attributes:
     - timestampAsArrow
     - decimalAsArrow
     - complexTypesAsArrow
     - intervalTypesAsArrow
     - nullTypeAsArrow

    """


    def __init__(self, timestampAsArrow=None, decimalAsArrow=None, complexTypesAsArrow=None, intervalTypesAsArrow=None, nullTypeAsArrow=None,):
        self.timestampAsArrow = timestampAsArrow
        self.decimalAsArrow = decimalAsArrow
        self.complexTypesAsArrow = complexTypesAsArrow
        self.intervalTypesAsArrow = intervalTypesAsArrow
        self.nullTypeAsArrow = nullTypeAsArrow

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.timestampAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.decimalAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.complexTypesAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.intervalTypesAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.nullTypeAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkArrowTypes')
        if self.timestampAsArrow is not None:
            oprot.writeFieldBegin('timestampAsArrow', TType.BOOL, 1)
            oprot.writeBool(self.timestampAsArrow)
            oprot.writeFieldEnd()
        if self.decimalAsArrow is not None:
            oprot.writeFieldBegin('decimalAsArrow', TType.BOOL, 2)
            oprot.writeBool(self.decimalAsArrow)
            oprot.writeFieldEnd()
        if self.complexTypesAsArrow is not None:
            oprot.writeFieldBegin('complexTypesAsArrow', TType.BOOL, 3)
            oprot.writeBool(self.complexTypesAsArrow)
            oprot.writeFieldEnd()
        if self.intervalTypesAsArrow is not None:
            oprot.writeFieldBegin('intervalTypesAsArrow', TType.BOOL, 4)
            oprot.writeBool(self.intervalTypesAsArrow)
            oprot.writeFieldEnd()
        if self.nullTypeAsArrow is not None:
            oprot.writeFieldBegin('nullTypeAsArrow', TType.BOOL, 5)
            oprot.writeBool(self.nullTypeAsArrow)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteStatementReq(object):
    """
    Attributes:
     - sessionHandle
     - statement
     - confOverlay
     - runAsync
     - getDirectResults
     - queryTimeout
     - canReadArrowResult
     - canDownloadResult
     - canDecompressLZ4Result
     - maxBytesPerFile
     - useArrowNativeTypes
     - resultRowLimit
     - parameters
     - maxBytesPerBatch
     - statementConf

    """


    def __init__(self, sessionHandle=None, statement=None, confOverlay=None, runAsync=False, getDirectResults=None, queryTimeout=0, canReadArrowResult=None, canDownloadResult=None, canDecompressLZ4Result=None, maxBytesPerFile=None, useArrowNativeTypes=None, resultRowLimit=None, parameters=None, maxBytesPerBatch=None, statementConf=None,):
        self.sessionHandle = sessionHandle
        self.statement = statement
        self.confOverlay = confOverlay
        self.runAsync = runAsync
        self.getDirectResults = getDirectResults
        self.queryTimeout = queryTimeout
        self.canReadArrowResult = canReadArrowResult
        self.canDownloadResult = canDownloadResult
        self.canDecompressLZ4Result = canDecompressLZ4Result
        self.maxBytesPerFile = maxBytesPerFile
        self.useArrowNativeTypes = useArrowNativeTypes
        self.resultRowLimit = resultRowLimit
        self.parameters = parameters
        self.maxBytesPerBatch = maxBytesPerBatch
        self.statementConf = statementConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.statement = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.confOverlay = {}
                    (_ktype190, _vtype191, _size189) = iprot.readMapBegin()
                    for _i193 in range(_size189):
                        _key194 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val195 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.confOverlay[_key194] = _val195
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.queryTimeout = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.canReadArrowResult = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.BOOL:
                    self.canDownloadResult = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.BOOL:
                    self.canDecompressLZ4Result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.I64:
                    self.maxBytesPerFile = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1286:
                if ftype == TType.STRUCT:
                    self.useArrowNativeTypes = TSparkArrowTypes()
                    self.useArrowNativeTypes.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1287:
                if ftype == TType.I64:
                    self.resultRowLimit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1288:
                if ftype == TType.LIST:
                    self.parameters = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = TSparkParameter()
                        _elem201.read(iprot)
                        self.parameters.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1289:
                if ftype == TType.I64:
                    self.maxBytesPerBatch = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1296:
                if ftype == TType.STRUCT:
                    self.statementConf = TStatementConf()
                    self.statementConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteStatementReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.statement is not None:
            oprot.writeFieldBegin('statement', TType.STRING, 2)
            oprot.writeString(self.statement.encode('utf-8') if sys.version_info[0] == 2 else self.statement)
            oprot.writeFieldEnd()
        if self.confOverlay is not None:
            oprot.writeFieldBegin('confOverlay', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.confOverlay))
            for kiter202, viter203 in self.confOverlay.items():
                oprot.writeString(kiter202.encode('utf-8') if sys.version_info[0] == 2 else kiter202)
                oprot.writeString(viter203.encode('utf-8') if sys.version_info[0] == 2 else viter203)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 4)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.queryTimeout is not None:
            oprot.writeFieldBegin('queryTimeout', TType.I64, 5)
            oprot.writeI64(self.queryTimeout)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.canReadArrowResult is not None:
            oprot.writeFieldBegin('canReadArrowResult', TType.BOOL, 1282)
            oprot.writeBool(self.canReadArrowResult)
            oprot.writeFieldEnd()
        if self.canDownloadResult is not None:
            oprot.writeFieldBegin('canDownloadResult', TType.BOOL, 1283)
            oprot.writeBool(self.canDownloadResult)
            oprot.writeFieldEnd()
        if self.canDecompressLZ4Result is not None:
            oprot.writeFieldBegin('canDecompressLZ4Result', TType.BOOL, 1284)
            oprot.writeBool(self.canDecompressLZ4Result)
            oprot.writeFieldEnd()
        if self.maxBytesPerFile is not None:
            oprot.writeFieldBegin('maxBytesPerFile', TType.I64, 1285)
            oprot.writeI64(self.maxBytesPerFile)
            oprot.writeFieldEnd()
        if self.useArrowNativeTypes is not None:
            oprot.writeFieldBegin('useArrowNativeTypes', TType.STRUCT, 1286)
            self.useArrowNativeTypes.write(oprot)
            oprot.writeFieldEnd()
        if self.resultRowLimit is not None:
            oprot.writeFieldBegin('resultRowLimit', TType.I64, 1287)
            oprot.writeI64(self.resultRowLimit)
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.LIST, 1288)
            oprot.writeListBegin(TType.STRUCT, len(self.parameters))
            for iter204 in self.parameters:
                iter204.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxBytesPerBatch is not None:
            oprot.writeFieldBegin('maxBytesPerBatch', TType.I64, 1289)
            oprot.writeI64(self.maxBytesPerBatch)
            oprot.writeFieldEnd()
        if self.statementConf is not None:
            oprot.writeFieldBegin('statementConf', TType.STRUCT, 1296)
            self.statementConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.statement is None:
            raise TProtocolException(message='Required field statement is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkParameterValue(object):
    """
    Attributes:
     - stringValue
     - doubleValue
     - booleanValue

    """


    def __init__(self, stringValue=None, doubleValue=None, booleanValue=None,):
        self.stringValue = stringValue
        self.doubleValue = doubleValue
        self.booleanValue = booleanValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.booleanValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkParameterValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 2)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.booleanValue is not None:
            oprot.writeFieldBegin('booleanValue', TType.BOOL, 3)
            oprot.writeBool(self.booleanValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkParameterValueArg(object):
    """
    Attributes:
     - type
     - value
     - arguments

    """


    def __init__(self, type=None, value=None, arguments=None,):
        self.type = type
        self.value = value
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype208, _size205) = iprot.readListBegin()
                    for _i209 in range(_size205):
                        _elem210 = TSparkParameterValueArg()
                        _elem210.read(iprot)
                        self.arguments.append(_elem210)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkParameterValueArg')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.arguments))
            for iter211 in self.arguments:
                iter211.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkParameter(object):
    """
    Attributes:
     - ordinal
     - name
     - type
     - value
     - arguments

    """


    def __init__(self, ordinal=None, name=None, type=None, value=None, arguments=None,):
        self.ordinal = ordinal
        self.name = name
        self.type = type
        self.value = value
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ordinal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.value = TSparkParameterValue()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype215, _size212) = iprot.readListBegin()
                    for _i216 in range(_size212):
                        _elem217 = TSparkParameterValueArg()
                        _elem217.read(iprot)
                        self.arguments.append(_elem217)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkParameter')
        if self.ordinal is not None:
            oprot.writeFieldBegin('ordinal', TType.I32, 1)
            oprot.writeI32(self.ordinal)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 4)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.arguments))
            for iter218 in self.arguments:
                iter218.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStatementConf(object):
    """
    Attributes:
     - sessionless
     - initialNamespace
     - client_protocol
     - client_protocol_i64

    """


    def __init__(self, sessionless=None, initialNamespace=None, client_protocol=None, client_protocol_i64=None,):
        self.sessionless = sessionless
        self.initialNamespace = initialNamespace
        self.client_protocol = client_protocol
        self.client_protocol_i64 = client_protocol_i64

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.sessionless = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.initialNamespace = TNamespace()
                    self.initialNamespace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.client_protocol = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.client_protocol_i64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStatementConf')
        if self.sessionless is not None:
            oprot.writeFieldBegin('sessionless', TType.BOOL, 1)
            oprot.writeBool(self.sessionless)
            oprot.writeFieldEnd()
        if self.initialNamespace is not None:
            oprot.writeFieldBegin('initialNamespace', TType.STRUCT, 2)
            self.initialNamespace.write(oprot)
            oprot.writeFieldEnd()
        if self.client_protocol is not None:
            oprot.writeFieldBegin('client_protocol', TType.I32, 3)
            oprot.writeI32(self.client_protocol)
            oprot.writeFieldEnd()
        if self.client_protocol_i64 is not None:
            oprot.writeFieldBegin('client_protocol_i64', TType.I64, 4)
            oprot.writeI64(self.client_protocol_i64)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteStatementResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteStatementResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTypeInfoReq(object):
    """
    Attributes:
     - sessionHandle
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTypeInfoReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTypeInfoResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTypeInfoResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCatalogsReq(object):
    """
    Attributes:
     - sessionHandle
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCatalogsReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCatalogsResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCatalogsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetSchemasReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetSchemasReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetSchemasResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetSchemasResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTablesReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - tableName
     - tableTypes
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, tableName=None, tableTypes=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.tableTypes = tableTypes
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.tableTypes = []
                    (_etype222, _size219) = iprot.readListBegin()
                    for _i223 in range(_size219):
                        _elem224 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tableTypes.append(_elem224)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTablesReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 4)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.tableTypes is not None:
            oprot.writeFieldBegin('tableTypes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.tableTypes))
            for iter225 in self.tableTypes:
                oprot.writeString(iter225.encode('utf-8') if sys.version_info[0] == 2 else iter225)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTablesResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTablesResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTableTypesReq(object):
    """
    Attributes:
     - sessionHandle
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTableTypesReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTableTypesResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTableTypesResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetColumnsReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - tableName
     - columnName
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, tableName=None, columnName=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.columnName = columnName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetColumnsReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 4)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 5)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetColumnsResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetColumnsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetFunctionsReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - functionName
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, functionName=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.functionName = functionName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.functionName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetFunctionsReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.functionName is not None:
            oprot.writeFieldBegin('functionName', TType.STRING, 4)
            oprot.writeString(self.functionName.encode('utf-8') if sys.version_info[0] == 2 else self.functionName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.functionName is None:
            raise TProtocolException(message='Required field functionName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetFunctionsResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetFunctionsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetPrimaryKeysReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - tableName
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, tableName=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetPrimaryKeysReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 4)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetPrimaryKeysResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetPrimaryKeysResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCrossReferenceReq(object):
    """
    Attributes:
     - sessionHandle
     - parentCatalogName
     - parentSchemaName
     - parentTableName
     - foreignCatalogName
     - foreignSchemaName
     - foreignTableName
     - getDirectResults
     - runAsync

    """


    def __init__(self, sessionHandle=None, parentCatalogName=None, parentSchemaName=None, parentTableName=None, foreignCatalogName=None, foreignSchemaName=None, foreignTableName=None, getDirectResults=None, runAsync=False,):
        self.sessionHandle = sessionHandle
        self.parentCatalogName = parentCatalogName
        self.parentSchemaName = parentSchemaName
        self.parentTableName = parentTableName
        self.foreignCatalogName = foreignCatalogName
        self.foreignSchemaName = foreignSchemaName
        self.foreignTableName = foreignTableName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentCatalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentSchemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parentTableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.foreignCatalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.foreignSchemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.foreignTableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCrossReferenceReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.parentCatalogName is not None:
            oprot.writeFieldBegin('parentCatalogName', TType.STRING, 2)
            oprot.writeString(self.parentCatalogName.encode('utf-8') if sys.version_info[0] == 2 else self.parentCatalogName)
            oprot.writeFieldEnd()
        if self.parentSchemaName is not None:
            oprot.writeFieldBegin('parentSchemaName', TType.STRING, 3)
            oprot.writeString(self.parentSchemaName.encode('utf-8') if sys.version_info[0] == 2 else self.parentSchemaName)
            oprot.writeFieldEnd()
        if self.parentTableName is not None:
            oprot.writeFieldBegin('parentTableName', TType.STRING, 4)
            oprot.writeString(self.parentTableName.encode('utf-8') if sys.version_info[0] == 2 else self.parentTableName)
            oprot.writeFieldEnd()
        if self.foreignCatalogName is not None:
            oprot.writeFieldBegin('foreignCatalogName', TType.STRING, 5)
            oprot.writeString(self.foreignCatalogName.encode('utf-8') if sys.version_info[0] == 2 else self.foreignCatalogName)
            oprot.writeFieldEnd()
        if self.foreignSchemaName is not None:
            oprot.writeFieldBegin('foreignSchemaName', TType.STRING, 6)
            oprot.writeString(self.foreignSchemaName.encode('utf-8') if sys.version_info[0] == 2 else self.foreignSchemaName)
            oprot.writeFieldEnd()
        if self.foreignTableName is not None:
            oprot.writeFieldBegin('foreignTableName', TType.STRING, 7)
            oprot.writeString(self.foreignTableName.encode('utf-8') if sys.version_info[0] == 2 else self.foreignTableName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCrossReferenceResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCrossReferenceResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetOperationStatusReq(object):
    """
    Attributes:
     - operationHandle
     - getProgressUpdate

    """


    def __init__(self, operationHandle=None, getProgressUpdate=None,):
        self.operationHandle = operationHandle
        self.getProgressUpdate = getProgressUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.getProgressUpdate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetOperationStatusReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getProgressUpdate is not None:
            oprot.writeFieldBegin('getProgressUpdate', TType.BOOL, 2)
            oprot.writeBool(self.getProgressUpdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetOperationStatusResp(object):
    """
    Attributes:
     - status
     - operationState
     - sqlState
     - errorCode
     - errorMessage
     - taskStatus
     - operationStarted
     - operationCompleted
     - hasResultSet
     - progressUpdateResponse
     - numModifiedRows
     - displayMessage
     - diagnosticInfo
     - errorDetailsJson

    """


    def __init__(self, status=None, operationState=None, sqlState=None, errorCode=None, errorMessage=None, taskStatus=None, operationStarted=None, operationCompleted=None, hasResultSet=None, progressUpdateResponse=None, numModifiedRows=None, displayMessage=None, diagnosticInfo=None, errorDetailsJson=None,):
        self.status = status
        self.operationState = operationState
        self.sqlState = sqlState
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.taskStatus = taskStatus
        self.operationStarted = operationStarted
        self.operationCompleted = operationCompleted
        self.hasResultSet = hasResultSet
        self.progressUpdateResponse = progressUpdateResponse
        self.numModifiedRows = numModifiedRows
        self.displayMessage = displayMessage
        self.diagnosticInfo = diagnosticInfo
        self.errorDetailsJson = errorDetailsJson

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operationState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sqlState = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.taskStatus = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.operationStarted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.operationCompleted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.hasResultSet = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.progressUpdateResponse = TProgressUpdateResp()
                    self.progressUpdateResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.numModifiedRows = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.STRING:
                    self.diagnosticInfo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.STRING:
                    self.errorDetailsJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetOperationStatusResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationState is not None:
            oprot.writeFieldBegin('operationState', TType.I32, 2)
            oprot.writeI32(self.operationState)
            oprot.writeFieldEnd()
        if self.sqlState is not None:
            oprot.writeFieldBegin('sqlState', TType.STRING, 3)
            oprot.writeString(self.sqlState.encode('utf-8') if sys.version_info[0] == 2 else self.sqlState)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 4)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 5)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        if self.taskStatus is not None:
            oprot.writeFieldBegin('taskStatus', TType.STRING, 6)
            oprot.writeString(self.taskStatus.encode('utf-8') if sys.version_info[0] == 2 else self.taskStatus)
            oprot.writeFieldEnd()
        if self.operationStarted is not None:
            oprot.writeFieldBegin('operationStarted', TType.I64, 7)
            oprot.writeI64(self.operationStarted)
            oprot.writeFieldEnd()
        if self.operationCompleted is not None:
            oprot.writeFieldBegin('operationCompleted', TType.I64, 8)
            oprot.writeI64(self.operationCompleted)
            oprot.writeFieldEnd()
        if self.hasResultSet is not None:
            oprot.writeFieldBegin('hasResultSet', TType.BOOL, 9)
            oprot.writeBool(self.hasResultSet)
            oprot.writeFieldEnd()
        if self.progressUpdateResponse is not None:
            oprot.writeFieldBegin('progressUpdateResponse', TType.STRUCT, 10)
            self.progressUpdateResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.numModifiedRows is not None:
            oprot.writeFieldBegin('numModifiedRows', TType.I64, 11)
            oprot.writeI64(self.numModifiedRows)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 1281)
            oprot.writeString(self.displayMessage.encode('utf-8') if sys.version_info[0] == 2 else self.displayMessage)
            oprot.writeFieldEnd()
        if self.diagnosticInfo is not None:
            oprot.writeFieldBegin('diagnosticInfo', TType.STRING, 1282)
            oprot.writeString(self.diagnosticInfo.encode('utf-8') if sys.version_info[0] == 2 else self.diagnosticInfo)
            oprot.writeFieldEnd()
        if self.errorDetailsJson is not None:
            oprot.writeFieldBegin('errorDetailsJson', TType.STRING, 1283)
            oprot.writeString(self.errorDetailsJson.encode('utf-8') if sys.version_info[0] == 2 else self.errorDetailsJson)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelOperationReq(object):
    """
    Attributes:
     - operationHandle

    """


    def __init__(self, operationHandle=None,):
        self.operationHandle = operationHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelOperationReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelOperationResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelOperationResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseOperationReq(object):
    """
    Attributes:
     - operationHandle

    """


    def __init__(self, operationHandle=None,):
        self.operationHandle = operationHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseOperationReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseOperationResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseOperationResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetResultSetMetadataReq(object):
    """
    Attributes:
     - operationHandle

    """


    def __init__(self, operationHandle=None,):
        self.operationHandle = operationHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetResultSetMetadataReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetResultSetMetadataResp(object):
    """
    Attributes:
     - status
     - schema
     - resultFormat
     - lz4Compressed
     - arrowSchema
     - cacheLookupResult
     - uncompressedBytes
     - compressedBytes
     - isStagingOperation

    """


    def __init__(self, status=None, schema=None, resultFormat=None, lz4Compressed=None, arrowSchema=None, cacheLookupResult=None, uncompressedBytes=None, compressedBytes=None, isStagingOperation=None,):
        self.status = status
        self.schema = schema
        self.resultFormat = resultFormat
        self.lz4Compressed = lz4Compressed
        self.arrowSchema = arrowSchema
        self.cacheLookupResult = cacheLookupResult
        self.uncompressedBytes = uncompressedBytes
        self.compressedBytes = compressedBytes
        self.isStagingOperation = isStagingOperation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.schema = TTableSchema()
                    self.schema.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.I32:
                    self.resultFormat = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.lz4Compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.STRING:
                    self.arrowSchema = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.I32:
                    self.cacheLookupResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.I64:
                    self.uncompressedBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1286:
                if ftype == TType.I64:
                    self.compressedBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1287:
                if ftype == TType.BOOL:
                    self.isStagingOperation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetResultSetMetadataResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.STRUCT, 2)
            self.schema.write(oprot)
            oprot.writeFieldEnd()
        if self.resultFormat is not None:
            oprot.writeFieldBegin('resultFormat', TType.I32, 1281)
            oprot.writeI32(self.resultFormat)
            oprot.writeFieldEnd()
        if self.lz4Compressed is not None:
            oprot.writeFieldBegin('lz4Compressed', TType.BOOL, 1282)
            oprot.writeBool(self.lz4Compressed)
            oprot.writeFieldEnd()
        if self.arrowSchema is not None:
            oprot.writeFieldBegin('arrowSchema', TType.STRING, 1283)
            oprot.writeBinary(self.arrowSchema)
            oprot.writeFieldEnd()
        if self.cacheLookupResult is not None:
            oprot.writeFieldBegin('cacheLookupResult', TType.I32, 1284)
            oprot.writeI32(self.cacheLookupResult)
            oprot.writeFieldEnd()
        if self.uncompressedBytes is not None:
            oprot.writeFieldBegin('uncompressedBytes', TType.I64, 1285)
            oprot.writeI64(self.uncompressedBytes)
            oprot.writeFieldEnd()
        if self.compressedBytes is not None:
            oprot.writeFieldBegin('compressedBytes', TType.I64, 1286)
            oprot.writeI64(self.compressedBytes)
            oprot.writeFieldEnd()
        if self.isStagingOperation is not None:
            oprot.writeFieldBegin('isStagingOperation', TType.BOOL, 1287)
            oprot.writeBool(self.isStagingOperation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFetchResultsReq(object):
    """
    Attributes:
     - operationHandle
     - orientation
     - maxRows
     - fetchType
     - maxBytes
     - startRowOffset
     - includeResultSetMetadata

    """


    def __init__(self, operationHandle=None, orientation=    0, maxRows=None, fetchType=0, maxBytes=None, startRowOffset=None, includeResultSetMetadata=None,):
        self.operationHandle = operationHandle
        self.orientation = orientation
        self.maxRows = maxRows
        self.fetchType = fetchType
        self.maxBytes = maxBytes
        self.startRowOffset = startRowOffset
        self.includeResultSetMetadata = includeResultSetMetadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.orientation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.maxRows = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.fetchType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.I64:
                    self.maxBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.BOOL:
                    self.includeResultSetMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFetchResultsReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.orientation is not None:
            oprot.writeFieldBegin('orientation', TType.I32, 2)
            oprot.writeI32(self.orientation)
            oprot.writeFieldEnd()
        if self.maxRows is not None:
            oprot.writeFieldBegin('maxRows', TType.I64, 3)
            oprot.writeI64(self.maxRows)
            oprot.writeFieldEnd()
        if self.fetchType is not None:
            oprot.writeFieldBegin('fetchType', TType.I16, 4)
            oprot.writeI16(self.fetchType)
            oprot.writeFieldEnd()
        if self.maxBytes is not None:
            oprot.writeFieldBegin('maxBytes', TType.I64, 1281)
            oprot.writeI64(self.maxBytes)
            oprot.writeFieldEnd()
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 1282)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.includeResultSetMetadata is not None:
            oprot.writeFieldBegin('includeResultSetMetadata', TType.BOOL, 1283)
            oprot.writeBool(self.includeResultSetMetadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        if self.orientation is None:
            raise TProtocolException(message='Required field orientation is unset!')
        if self.maxRows is None:
            raise TProtocolException(message='Required field maxRows is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFetchResultsResp(object):
    """
    Attributes:
     - status
     - hasMoreRows
     - results
     - resultSetMetadata

    """


    def __init__(self, status=None, hasMoreRows=None, results=None, resultSetMetadata=None,):
        self.status = status
        self.hasMoreRows = hasMoreRows
        self.results = results
        self.resultSetMetadata = resultSetMetadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasMoreRows = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.results = TRowSet()
                    self.results.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.resultSetMetadata = TGetResultSetMetadataResp()
                    self.resultSetMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFetchResultsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.hasMoreRows is not None:
            oprot.writeFieldBegin('hasMoreRows', TType.BOOL, 2)
            oprot.writeBool(self.hasMoreRows)
            oprot.writeFieldEnd()
        if self.results is not None:
            oprot.writeFieldBegin('results', TType.STRUCT, 3)
            self.results.write(oprot)
            oprot.writeFieldEnd()
        if self.resultSetMetadata is not None:
            oprot.writeFieldBegin('resultSetMetadata', TType.STRUCT, 1281)
            self.resultSetMetadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetDelegationTokenReq(object):
    """
    Attributes:
     - sessionHandle
     - owner
     - renewer

    """


    def __init__(self, sessionHandle=None, owner=None, renewer=None,):
        self.sessionHandle = sessionHandle
        self.owner = owner
        self.renewer = renewer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.owner = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.renewer = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetDelegationTokenReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 2)
            oprot.writeString(self.owner.encode('utf-8') if sys.version_info[0] == 2 else self.owner)
            oprot.writeFieldEnd()
        if self.renewer is not None:
            oprot.writeFieldBegin('renewer', TType.STRING, 3)
            oprot.writeString(self.renewer.encode('utf-8') if sys.version_info[0] == 2 else self.renewer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.owner is None:
            raise TProtocolException(message='Required field owner is unset!')
        if self.renewer is None:
            raise TProtocolException(message='Required field renewer is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetDelegationTokenResp(object):
    """
    Attributes:
     - status
     - delegationToken

    """


    def __init__(self, status=None, delegationToken=None,):
        self.status = status
        self.delegationToken = delegationToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.delegationToken = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetDelegationTokenResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.delegationToken is not None:
            oprot.writeFieldBegin('delegationToken', TType.STRING, 2)
            oprot.writeString(self.delegationToken.encode('utf-8') if sys.version_info[0] == 2 else self.delegationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelDelegationTokenReq(object):
    """
    Attributes:
     - sessionHandle
     - delegationToken

    """


    def __init__(self, sessionHandle=None, delegationToken=None,):
        self.sessionHandle = sessionHandle
        self.delegationToken = delegationToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.delegationToken = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelDelegationTokenReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.delegationToken is not None:
            oprot.writeFieldBegin('delegationToken', TType.STRING, 2)
            oprot.writeString(self.delegationToken.encode('utf-8') if sys.version_info[0] == 2 else self.delegationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.delegationToken is None:
            raise TProtocolException(message='Required field delegationToken is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelDelegationTokenResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelDelegationTokenResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRenewDelegationTokenReq(object):
    """
    Attributes:
     - sessionHandle
     - delegationToken

    """


    def __init__(self, sessionHandle=None, delegationToken=None,):
        self.sessionHandle = sessionHandle
        self.delegationToken = delegationToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.delegationToken = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRenewDelegationTokenReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.delegationToken is not None:
            oprot.writeFieldBegin('delegationToken', TType.STRING, 2)
            oprot.writeString(self.delegationToken.encode('utf-8') if sys.version_info[0] == 2 else self.delegationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.delegationToken is None:
            raise TProtocolException(message='Required field delegationToken is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRenewDelegationTokenResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRenewDelegationTokenResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TProgressUpdateResp(object):
    """
    Attributes:
     - headerNames
     - rows
     - progressedPercentage
     - status
     - footerSummary
     - startTime

    """


    def __init__(self, headerNames=None, rows=None, progressedPercentage=None, status=None, footerSummary=None, startTime=None,):
        self.headerNames = headerNames
        self.rows = rows
        self.progressedPercentage = progressedPercentage
        self.status = status
        self.footerSummary = footerSummary
        self.startTime = startTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.headerNames = []
                    (_etype229, _size226) = iprot.readListBegin()
                    for _i230 in range(_size226):
                        _elem231 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.headerNames.append(_elem231)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype235, _size232) = iprot.readListBegin()
                    for _i236 in range(_size232):
                        _elem237 = []
                        (_etype241, _size238) = iprot.readListBegin()
                        for _i242 in range(_size238):
                            _elem243 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem237.append(_elem243)
                        iprot.readListEnd()
                        self.rows.append(_elem237)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.progressedPercentage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.footerSummary = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TProgressUpdateResp')
        if self.headerNames is not None:
            oprot.writeFieldBegin('headerNames', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.headerNames))
            for iter244 in self.headerNames:
                oprot.writeString(iter244.encode('utf-8') if sys.version_info[0] == 2 else iter244)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.rows))
            for iter245 in self.rows:
                oprot.writeListBegin(TType.STRING, len(iter245))
                for iter246 in iter245:
                    oprot.writeString(iter246.encode('utf-8') if sys.version_info[0] == 2 else iter246)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.progressedPercentage is not None:
            oprot.writeFieldBegin('progressedPercentage', TType.DOUBLE, 3)
            oprot.writeDouble(self.progressedPercentage)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.footerSummary is not None:
            oprot.writeFieldBegin('footerSummary', TType.STRING, 5)
            oprot.writeString(self.footerSummary.encode('utf-8') if sys.version_info[0] == 2 else self.footerSummary)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 6)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.headerNames is None:
            raise TProtocolException(message='Required field headerNames is unset!')
        if self.rows is None:
            raise TProtocolException(message='Required field rows is unset!')
        if self.progressedPercentage is None:
            raise TProtocolException(message='Required field progressedPercentage is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.footerSummary is None:
            raise TProtocolException(message='Required field footerSummary is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TTypeQualifierValue)
TTypeQualifierValue.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'i32Value', None, None, ),  # 1
    (2, TType.STRING, 'stringValue', 'UTF8', None, ),  # 2
)
all_structs.append(TTypeQualifiers)
TTypeQualifiers.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'qualifiers', (TType.STRING, 'UTF8', TType.STRUCT, [TTypeQualifierValue, None], False), None, ),  # 1
)
all_structs.append(TPrimitiveTypeEntry)
TPrimitiveTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRUCT, 'typeQualifiers', [TTypeQualifiers, None], None, ),  # 2
)
all_structs.append(TArrayTypeEntry)
TArrayTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objectTypePtr', None, None, ),  # 1
)
all_structs.append(TMapTypeEntry)
TMapTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'keyTypePtr', None, None, ),  # 1
    (2, TType.I32, 'valueTypePtr', None, None, ),  # 2
)
all_structs.append(TStructTypeEntry)
TStructTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'nameToTypePtr', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 1
)
all_structs.append(TUnionTypeEntry)
TUnionTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'nameToTypePtr', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 1
)
all_structs.append(TUserDefinedTypeEntry)
TUserDefinedTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'typeClassName', 'UTF8', None, ),  # 1
)
all_structs.append(TTypeEntry)
TTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'primitiveEntry', [TPrimitiveTypeEntry, None], None, ),  # 1
    (2, TType.STRUCT, 'arrayEntry', [TArrayTypeEntry, None], None, ),  # 2
    (3, TType.STRUCT, 'mapEntry', [TMapTypeEntry, None], None, ),  # 3
    (4, TType.STRUCT, 'structEntry', [TStructTypeEntry, None], None, ),  # 4
    (5, TType.STRUCT, 'unionEntry', [TUnionTypeEntry, None], None, ),  # 5
    (6, TType.STRUCT, 'userDefinedTypeEntry', [TUserDefinedTypeEntry, None], None, ),  # 6
)
all_structs.append(TTypeDesc)
TTypeDesc.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'types', (TType.STRUCT, [TTypeEntry, None], False), None, ),  # 1
)
all_structs.append(TColumnDesc)
TColumnDesc.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'columnName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'typeDesc', [TTypeDesc, None], None, ),  # 2
    (3, TType.I32, 'position', None, None, ),  # 3
    (4, TType.STRING, 'comment', 'UTF8', None, ),  # 4
)
all_structs.append(TTableSchema)
TTableSchema.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'columns', (TType.STRUCT, [TColumnDesc, None], False), None, ),  # 1
)
all_structs.append(TBoolValue)
TBoolValue.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'value', None, None, ),  # 1
)
all_structs.append(TByteValue)
TByteValue.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'value', None, None, ),  # 1
)
all_structs.append(TI16Value)
TI16Value.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'value', None, None, ),  # 1
)
all_structs.append(TI32Value)
TI32Value.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'value', None, None, ),  # 1
)
all_structs.append(TI64Value)
TI64Value.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'value', None, None, ),  # 1
)
all_structs.append(TDoubleValue)
TDoubleValue.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'value', None, None, ),  # 1
)
all_structs.append(TStringValue)
TStringValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
)
all_structs.append(TColumnValue)
TColumnValue.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'boolVal', [TBoolValue, None], None, ),  # 1
    (2, TType.STRUCT, 'byteVal', [TByteValue, None], None, ),  # 2
    (3, TType.STRUCT, 'i16Val', [TI16Value, None], None, ),  # 3
    (4, TType.STRUCT, 'i32Val', [TI32Value, None], None, ),  # 4
    (5, TType.STRUCT, 'i64Val', [TI64Value, None], None, ),  # 5
    (6, TType.STRUCT, 'doubleVal', [TDoubleValue, None], None, ),  # 6
    (7, TType.STRUCT, 'stringVal', [TStringValue, None], None, ),  # 7
)
all_structs.append(TRow)
TRow.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'colVals', (TType.STRUCT, [TColumnValue, None], False), None, ),  # 1
)
all_structs.append(TBoolColumn)
TBoolColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.BOOL, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TByteColumn)
TByteColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.BYTE, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TI16Column)
TI16Column.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I16, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TI32Column)
TI32Column.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I32, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TI64Column)
TI64Column.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I64, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TDoubleColumn)
TDoubleColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TStringColumn)
TStringColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TBinaryColumn)
TBinaryColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRING, 'BINARY', False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TColumn)
TColumn.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'boolVal', [TBoolColumn, None], None, ),  # 1
    (2, TType.STRUCT, 'byteVal', [TByteColumn, None], None, ),  # 2
    (3, TType.STRUCT, 'i16Val', [TI16Column, None], None, ),  # 3
    (4, TType.STRUCT, 'i32Val', [TI32Column, None], None, ),  # 4
    (5, TType.STRUCT, 'i64Val', [TI64Column, None], None, ),  # 5
    (6, TType.STRUCT, 'doubleVal', [TDoubleColumn, None], None, ),  # 6
    (7, TType.STRUCT, 'stringVal', [TStringColumn, None], None, ),  # 7
    (8, TType.STRUCT, 'binaryVal', [TBinaryColumn, None], None, ),  # 8
)
all_structs.append(TDBSqlJsonArrayFormat)
TDBSqlJsonArrayFormat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'compressionCodec', None, None, ),  # 1
)
all_structs.append(TDBSqlCsvFormat)
TDBSqlCsvFormat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'compressionCodec', None, None, ),  # 1
)
all_structs.append(TDBSqlArrowFormat)
TDBSqlArrowFormat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'arrowLayout', None, None, ),  # 1
    (2, TType.I32, 'compressionCodec', None, None, ),  # 2
)
all_structs.append(TDBSqlResultFormat)
TDBSqlResultFormat.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'arrowFormat', [TDBSqlArrowFormat, None], None, ),  # 1
    (2, TType.STRUCT, 'csvFormat', [TDBSqlCsvFormat, None], None, ),  # 2
    (3, TType.STRUCT, 'jsonArrayFormat', [TDBSqlJsonArrayFormat, None], None, ),  # 3
)
all_structs.append(TSparkArrowBatch)
TSparkArrowBatch.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'batch', 'BINARY', None, ),  # 1
    (2, TType.I64, 'rowCount', None, None, ),  # 2
)
all_structs.append(TSparkArrowResultLink)
TSparkArrowResultLink.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileLink', 'UTF8', None, ),  # 1
    (2, TType.I64, 'expiryTime', None, None, ),  # 2
    (3, TType.I64, 'startRowOffset', None, None, ),  # 3
    (4, TType.I64, 'rowCount', None, None, ),  # 4
    (5, TType.I64, 'bytesNum', None, None, ),  # 5
    (6, TType.MAP, 'httpHeaders', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(TRowSet)
TRowSet.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'startRowOffset', None, None, ),  # 1
    (2, TType.LIST, 'rows', (TType.STRUCT, [TRow, None], False), None, ),  # 2
    (3, TType.LIST, 'columns', (TType.STRUCT, [TColumn, None], False), None, ),  # 3
    (4, TType.STRING, 'binaryColumns', 'BINARY', None, ),  # 4
    (5, TType.I32, 'columnCount', None, None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.LIST, 'arrowBatches', (TType.STRUCT, [TSparkArrowBatch, None], False), None, ),  # 1281
    (1282, TType.LIST, 'resultLinks', (TType.STRUCT, [TSparkArrowResultLink, None], False), None, ),  # 1282
)
all_structs.append(TStatus)
TStatus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'statusCode', None, None, ),  # 1
    (2, TType.LIST, 'infoMessages', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'sqlState', 'UTF8', None, ),  # 3
    (4, TType.I32, 'errorCode', None, None, ),  # 4
    (5, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'displayMessage', 'UTF8', None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRING, 'errorDetailsJson', 'UTF8', None, ),  # 1281
)
all_structs.append(TNamespace)
TNamespace.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catalogName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'schemaName', 'UTF8', None, ),  # 2
)
all_structs.append(THandleIdentifier)
THandleIdentifier.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guid', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'secret', 'BINARY', None, ),  # 2
)
all_structs.append(TSessionHandle)
TSessionHandle.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionId', [THandleIdentifier, None], None, ),  # 1
)
all_structs.append(TOperationHandle)
TOperationHandle.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 1
    (2, TType.I32, 'operationType', None, None, ),  # 2
    (3, TType.BOOL, 'hasResultSet', None, None, ),  # 3
    (4, TType.DOUBLE, 'modifiedRowCount', None, None, ),  # 4
)
all_structs.append(TOpenSessionReq)
TOpenSessionReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'client_protocol', None,     -7, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'configuration', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.LIST, 'getInfos', (TType.I32, None, False), None, ),  # 1281
    (1282, TType.I64, 'client_protocol_i64', None, None, ),  # 1282
    (1283, TType.MAP, 'connectionProperties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1283
    (1284, TType.STRUCT, 'initialNamespace', [TNamespace, None], None, ),  # 1284
    (1285, TType.BOOL, 'canUseMultipleCatalogs', None, None, ),  # 1285
)
all_structs.append(TOpenSessionResp)
TOpenSessionResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.I32, 'serverProtocolVersion', None, None, ),  # 2
    (3, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 3
    (4, TType.MAP, 'configuration', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.LIST, 'getInfos', (TType.STRUCT, [TGetInfoValue, None], False), None, ),  # 1281
    None,  # 1282
    None,  # 1283
    (1284, TType.STRUCT, 'initialNamespace', [TNamespace, None], None, ),  # 1284
    (1285, TType.BOOL, 'canUseMultipleCatalogs', None, None, ),  # 1285
)
all_structs.append(TCloseSessionReq)
TCloseSessionReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
)
all_structs.append(TCloseSessionResp)
TCloseSessionResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TGetInfoValue)
TGetInfoValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.I16, 'smallIntValue', None, None, ),  # 2
    (3, TType.I32, 'integerBitmask', None, None, ),  # 3
    (4, TType.I32, 'integerFlag', None, None, ),  # 4
    (5, TType.I32, 'binaryValue', None, None, ),  # 5
    (6, TType.I64, 'lenValue', None, None, ),  # 6
)
all_structs.append(TGetInfoReq)
TGetInfoReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.I32, 'infoType', None, None, ),  # 2
)
all_structs.append(TGetInfoResp)
TGetInfoResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'infoValue', [TGetInfoValue, None], None, ),  # 2
)
all_structs.append(TSparkGetDirectResults)
TSparkGetDirectResults.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'maxRows', None, None, ),  # 1
    (2, TType.I64, 'maxBytes', None, None, ),  # 2
)
all_structs.append(TSparkDirectResults)
TSparkDirectResults.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationStatus', [TGetOperationStatusResp, None], None, ),  # 1
    (2, TType.STRUCT, 'resultSetMetadata', [TGetResultSetMetadataResp, None], None, ),  # 2
    (3, TType.STRUCT, 'resultSet', [TFetchResultsResp, None], None, ),  # 3
    (4, TType.STRUCT, 'closeOperation', [TCloseOperationResp, None], None, ),  # 4
)
all_structs.append(TSparkArrowTypes)
TSparkArrowTypes.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'timestampAsArrow', None, None, ),  # 1
    (2, TType.BOOL, 'decimalAsArrow', None, None, ),  # 2
    (3, TType.BOOL, 'complexTypesAsArrow', None, None, ),  # 3
    (4, TType.BOOL, 'intervalTypesAsArrow', None, None, ),  # 4
    (5, TType.BOOL, 'nullTypeAsArrow', None, None, ),  # 5
)
all_structs.append(TExecuteStatementReq)
TExecuteStatementReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'statement', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'confOverlay', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.BOOL, 'runAsync', None, False, ),  # 4
    (5, TType.I64, 'queryTimeout', None, 0, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'canReadArrowResult', None, None, ),  # 1282
    (1283, TType.BOOL, 'canDownloadResult', None, None, ),  # 1283
    (1284, TType.BOOL, 'canDecompressLZ4Result', None, None, ),  # 1284
    (1285, TType.I64, 'maxBytesPerFile', None, None, ),  # 1285
    (1286, TType.STRUCT, 'useArrowNativeTypes', [TSparkArrowTypes, None], None, ),  # 1286
    (1287, TType.I64, 'resultRowLimit', None, None, ),  # 1287
    (1288, TType.LIST, 'parameters', (TType.STRUCT, [TSparkParameter, None], False), None, ),  # 1288
    (1289, TType.I64, 'maxBytesPerBatch', None, None, ),  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    (1296, TType.STRUCT, 'statementConf', [TStatementConf, None], None, ),  # 1296
)
all_structs.append(TSparkParameterValue)
TSparkParameterValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'doubleValue', None, None, ),  # 2
    (3, TType.BOOL, 'booleanValue', None, None, ),  # 3
)
all_structs.append(TSparkParameterValueArg)
TSparkParameterValueArg.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'arguments', (TType.STRUCT, [TSparkParameterValueArg, None], False), None, ),  # 3
)
all_structs.append(TSparkParameter)
TSparkParameter.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ordinal', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'value', [TSparkParameterValue, None], None, ),  # 4
    (5, TType.LIST, 'arguments', (TType.STRUCT, [TSparkParameterValueArg, None], False), None, ),  # 5
)
all_structs.append(TStatementConf)
TStatementConf.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'sessionless', None, None, ),  # 1
    (2, TType.STRUCT, 'initialNamespace', [TNamespace, None], None, ),  # 2
    (3, TType.I32, 'client_protocol', None, None, ),  # 3
    (4, TType.I64, 'client_protocol_i64', None, None, ),  # 4
)
all_structs.append(TExecuteStatementResp)
TExecuteStatementResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetTypeInfoReq)
TGetTypeInfoReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetTypeInfoResp)
TGetTypeInfoResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetCatalogsReq)
TGetCatalogsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetCatalogsResp)
TGetCatalogsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetSchemasReq)
TGetSchemasReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetSchemasResp)
TGetSchemasResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetTablesReq)
TGetTablesReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'tableTypes', (TType.STRING, 'UTF8', False), None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetTablesResp)
TGetTablesResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetTableTypesReq)
TGetTableTypesReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetTableTypesResp)
TGetTableTypesResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetColumnsReq)
TGetColumnsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'columnName', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetColumnsResp)
TGetColumnsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetFunctionsReq)
TGetFunctionsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'functionName', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetFunctionsResp)
TGetFunctionsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetPrimaryKeysReq)
TGetPrimaryKeysReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetPrimaryKeysResp)
TGetPrimaryKeysResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetCrossReferenceReq)
TGetCrossReferenceReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'parentCatalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentSchemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'parentTableName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'foreignCatalogName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'foreignSchemaName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'foreignTableName', 'UTF8', None, ),  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
)
all_structs.append(TGetCrossReferenceResp)
TGetCrossReferenceResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetOperationStatusReq)
TGetOperationStatusReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
    (2, TType.BOOL, 'getProgressUpdate', None, None, ),  # 2
)
all_structs.append(TGetOperationStatusResp)
TGetOperationStatusResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.I32, 'operationState', None, None, ),  # 2
    (3, TType.STRING, 'sqlState', 'UTF8', None, ),  # 3
    (4, TType.I32, 'errorCode', None, None, ),  # 4
    (5, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'taskStatus', 'UTF8', None, ),  # 6
    (7, TType.I64, 'operationStarted', None, None, ),  # 7
    (8, TType.I64, 'operationCompleted', None, None, ),  # 8
    (9, TType.BOOL, 'hasResultSet', None, None, ),  # 9
    (10, TType.STRUCT, 'progressUpdateResponse', [TProgressUpdateResp, None], None, ),  # 10
    (11, TType.I64, 'numModifiedRows', None, None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRING, 'displayMessage', 'UTF8', None, ),  # 1281
    (1282, TType.STRING, 'diagnosticInfo', 'UTF8', None, ),  # 1282
    (1283, TType.STRING, 'errorDetailsJson', 'UTF8', None, ),  # 1283
)
all_structs.append(TCancelOperationReq)
TCancelOperationReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
)
all_structs.append(TCancelOperationResp)
TCancelOperationResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TCloseOperationReq)
TCloseOperationReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
)
all_structs.append(TCloseOperationResp)
TCloseOperationResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TGetResultSetMetadataReq)
TGetResultSetMetadataReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
)
all_structs.append(TGetResultSetMetadataResp)
TGetResultSetMetadataResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'schema', [TTableSchema, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.I32, 'resultFormat', None, None, ),  # 1281
    (1282, TType.BOOL, 'lz4Compressed', None, None, ),  # 1282
    (1283, TType.STRING, 'arrowSchema', 'BINARY', None, ),  # 1283
    (1284, TType.I32, 'cacheLookupResult', None, None, ),  # 1284
    (1285, TType.I64, 'uncompressedBytes', None, None, ),  # 1285
    (1286, TType.I64, 'compressedBytes', None, None, ),  # 1286
    (1287, TType.BOOL, 'isStagingOperation', None, None, ),  # 1287
)
all_structs.append(TFetchResultsReq)
TFetchResultsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
    (2, TType.I32, 'orientation', None,     0, ),  # 2
    (3, TType.I64, 'maxRows', None, None, ),  # 3
    (4, TType.I16, 'fetchType', None, 0, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.I64, 'maxBytes', None, None, ),  # 1281
    (1282, TType.I64, 'startRowOffset', None, None, ),  # 1282
    (1283, TType.BOOL, 'includeResultSetMetadata', None, None, ),  # 1283
)
all_structs.append(TFetchResultsResp)
TFetchResultsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.BOOL, 'hasMoreRows', None, None, ),  # 2
    (3, TType.STRUCT, 'results', [TRowSet, None], None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'resultSetMetadata', [TGetResultSetMetadataResp, None], None, ),  # 1281
)
all_structs.append(TGetDelegationTokenReq)
TGetDelegationTokenReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'owner', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'renewer', 'UTF8', None, ),  # 3
)
all_structs.append(TGetDelegationTokenResp)
TGetDelegationTokenResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRING, 'delegationToken', 'UTF8', None, ),  # 2
)
all_structs.append(TCancelDelegationTokenReq)
TCancelDelegationTokenReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'delegationToken', 'UTF8', None, ),  # 2
)
all_structs.append(TCancelDelegationTokenResp)
TCancelDelegationTokenResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TRenewDelegationTokenReq)
TRenewDelegationTokenReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'delegationToken', 'UTF8', None, ),  # 2
)
all_structs.append(TRenewDelegationTokenResp)
TRenewDelegationTokenResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TProgressUpdateResp)
TProgressUpdateResp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'headerNames', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'rows', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.DOUBLE, 'progressedPercentage', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'footerSummary', 'UTF8', None, ),  # 5
    (6, TType.I64, 'startTime', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
