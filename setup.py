# Release History

## 2.3.x (Unreleased)

## 2.3.0 (2023-01-10)

- Support staging ingestion commands for DBR 12+

## 2.2.2 (2023-01-03)

- Support custom oauth client id and redirect port 
- Fix: Add none check on _oauth_persistence in DatabricksOAuthProvider

## 2.2.1 (2022-11-29)

- Add support for Python 3.11

## 2.2.0 (2022-11-15)

- Bump thrift version to address https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13949
- Add support for lz4 compression

## 2.1.0 (2022-09-30)

- Introduce experimental OAuth support while Bring Your Own IDP is in Public Preview on AWS
- Add functional examples

## 2.0.5 (2022-08-23)

- Fix: closing a connection now closes any open cursors from that connection at the server
- Other: Add project links to pyproject.toml (helpful for visitors from PyPi)

## 2.0.4 (2022-08-17)

- Add support for Python 3.10
- Add unit test matrix for supported Python versions

Huge thanks to @dbaxa for contributing this change!

## 2.0.3 (2022-08-05)

- Add retry logic for `GetOperationStatus` requests that fail with an `OSError`
- Reorganised code to use Poetry for dependency management.
## 2.0.2 (2022-05-04)
- Better exception handling in automatic connection close

## 2.0.1 (2022-04-21)
- Fixed Pandas dependency in setup.cfg to be >= 1.2.0

## 2.0.0 (2022-04-19)
- Initial stable release of V2
- Added better support for complex types, so that in Databricks runtime 10.3+, Arrays, Maps and Structs will get 
  deserialized as lists, lists of tuples and dicts, respectively.
- Changed the name of the metadata arg to http_headers

## 2.0.b2 (2022-04-04)
- Change import of collections.Iterable to collections.abc.Iterable to make the library compatible with Python 3.10
- Fixed bug with .tables method so that .tables works as expected with Unity-Catalog enabled endpoints

## 2.0.0b1 (2022-03-04)
- Fix packaging issue (dependencies were not being installed properly)
- Fetching timestamp results will now return aware instead of naive timestamps
- The client will now default to using simplified error messages

## 2.0.0b (2022-02-08)
- Initial beta release of V2. V2 is an internal re-write of large parts of the connector to use Databricks edge features. All public APIs from V1 remain.
- Added Unity Catalog support (pass catalog and / or  schema key word args to the .connect method to select initial schema and catalog)

---

**Note**: The code for versions prior to `v2.0.0b` is not contained in this repository. The below entries are included for reference only.

---
## 1.0.0 (2022-01-20)
- Add operations for retrieving metadata
- Add the ability to access columns by name on result rows
- Add the ability to provide configuration settings on connect

## 0.9.4 (2022-01-10)
- Improved logging and error messages.

## 0.9.3 (2021-12-08)
- Add retries for 429 and 503 HTTP responses.

## 0.9.2 (2021-12-02)
- (Bug fix) Increased Thrift requirement from 0.10.0 to 0.13.0 as 0.10.0 was in fact incompatible
- (Bug fix) Fixed error message after query execution failed -SQLSTATE and Error message were misplaced

## 0.9.1 (2021-09-01)
- Public Preview release, Experimental tag removed
- minor updates in internal build/packaging
- no functional changes

## 0.9.0 (2021-08-04)
- initial (Experimental) release of pyhive-forked connector
- Python DBAPI 2.0 (PEP-0249), thrift based
- see docs for more info: https://docs.databricks.com/dev-tools/python-sql-connector.html
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2022 Databricks, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
# Databricks SQL Connector for Python

[![PyPI](https://img.shields.io/pypi/v/databricks-sql-connector?style=flat-square)](https://pypi.org/project/databricks-sql-connector/)
[![Downloads](https://pepy.tech/badge/databricks-sql-connector)](https://pepy.tech/project/databricks-sql-connector)

The Databricks SQL Connector for Python allows you to develop Python applications that connect to Databricks clusters and SQL warehouses. It is a Thrift-based client with no dependencies on ODBC or JDBC. It conforms to the [Python DB API 2.0 specification](https://www.python.org/dev/peps/pep-0249/).

This connector uses Arrow as the data-exchange format, and supports APIs to directly fetch Arrow tables. Arrow tables are wrapped in the `ArrowQueue` class to provide a natural API to get several rows at a time.

You are welcome to file an issue here for general use cases. You can also contact Databricks Support [here](help.databricks.com).

## Requirements

Python 3.7 or above is required.

## Documentation

For the latest documentation, see

- [Databricks](https://docs.databricks.com/dev-tools/python-sql-connector.html)
- [Azure Databricks](https://docs.microsoft.com/en-us/azure/databricks/dev-tools/python-sql-connector)

## Quickstart

Install the library with `pip install databricks-sql-connector`

Example usage:

```python
from databricks import sql

connection = sql.connect(
  server_hostname='********.databricks.com',
  http_path='/sql/1.0/endpoints/****************',
  access_token='dapi********************************')


cursor = connection.cursor()

cursor.execute('SELECT * FROM RANGE(10)')
result = cursor.fetchall()
for row in result:
  print(row)

cursor.close()
connection.close()
```

In the above example:
- `server-hostname` is the Databricks instance host name.
- `http-path` is the HTTP Path either to a Databricks SQL endpoint (e.g. /sql/1.0/endpoints/1234567890abcdef),
or to a Databricks Runtime interactive cluster (e.g. /sql/protocolv1/o/1234567890123456/1234-123456-slid123)
- `personal-access-token` is the Databricks Personal Access Token for the account that will execute commands and queries


## Contributing

See [CONTRIBUTING.md](CONTRIBUTING.md)

## License

[Apache License 2.0](LICENSE)
[tool.poetry]
name = "databricks-sql-connector"
version = "2.3.0"
description = "Databricks SQL Connector for Python"
authors = ["Databricks <databricks-sql-connector-maintainers@databricks.com>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "databricks", from = "src"}]
include = ["CHANGELOG.md"]

[tool.poetry.dependencies]
python = "^3.7.1"
thrift = "^0.16.0"
pandas = "^1.3.0"
pyarrow = [
    {version = ">=9.0.0", python = ">=3.7,<3.11"},
    {version = ">=10.0.1", python = ">=3.11"}
]
lz4 = "^4.0.2"
requests="^2.18.1"
oauthlib="^3.1.0"
numpy = [
    {version = "1.21.1", python = ">=3.7,<3.8"},
    {version = "1.23.4", python = ">=3.8"}
]

[tool.poetry.dev-dependencies]
pytest = "^7.1.2"
mypy = "^0.950"
pylint = ">=2.12.0"
black = "^22.3.0"

[tool.poetry.urls]
"Homepage" = "https://github.com/databricks/databricks-sql-python"
"Bug Tracker" = "https://github.com/databricks/databricks-sql-python/issues"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = "true"
exclude = ['ttypes\.py$', 'TCLIService\.py$']

[tool.black]
exclude = '/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|\.svn|_build|buck-out|build|dist|thrift_api)/'
# https://packaging.python.org/guides/packaging-namespace-packages/#pkgutil-style-namespace-packages
# This file should only contain the following line. Otherwise other sub-packages databricks.* namespace
# may not be importable.
__path__ = __import__("pkgutil").extend_path(__path__, __name__)
import datetime

from databricks.sql.exc import *

# PEP 249 module globals
apilevel = "2.0"
threadsafety = 1  # Threads may share the module, but not connections.
paramstyle = "pyformat"  # Python extended format codes, e.g. ...WHERE name=%(name)s


class DBAPITypeObject(object):
    def __init__(self, *values):
        self.values = values

    def __eq__(self, other):
        return other in self.values

    def __repr__(self):
        return "DBAPITypeObject({})".format(self.values)


STRING = DBAPITypeObject("string")
BINARY = DBAPITypeObject("binary")
NUMBER = DBAPITypeObject(
    "boolean", "tinyint", "smallint", "int", "bigint", "float", "double", "decimal"
)
DATETIME = DBAPITypeObject("timestamp")
DATE = DBAPITypeObject("date")
ROWID = DBAPITypeObject()

__version__ = "2.3.0"
USER_AGENT_NAME = "PyDatabricksSqlConnector"

# These two functions are pyhive legacy
Date = datetime.date
Timestamp = datetime.datetime


def DateFromTicks(ticks):
    return Date(*time.localtime(ticks)[:3])


def TimestampFromTicks(ticks):
    return Timestamp(*time.localtime(ticks)[:6])


def connect(server_hostname, http_path, access_token=None, **kwargs):
    from .client import Connection

    return Connection(server_hostname, http_path, access_token, **kwargs)
from enum import Enum
from typing import List

from databricks.sql.auth.authenticators import (
    AuthProvider,
    AccessTokenAuthProvider,
    BasicAuthProvider,
    DatabricksOAuthProvider,
)
from databricks.sql.experimental.oauth_persistence import OAuthPersistence


class AuthType(Enum):
    DATABRICKS_OAUTH = "databricks-oauth"
    # other supported types (access_token, user/pass) can be inferred
    # we can add more types as needed later


class ClientContext:
    def __init__(
        self,
        hostname: str,
        username: str = None,
        password: str = None,
        access_token: str = None,
        auth_type: str = None,
        oauth_scopes: List[str] = None,
        oauth_client_id: str = None,
        oauth_redirect_port_range: List[int] = None,
        use_cert_as_auth: str = None,
        tls_client_cert_file: str = None,
        oauth_persistence=None,
    ):
        self.hostname = hostname
        self.username = username
        self.password = password
        self.access_token = access_token
        self.auth_type = auth_type
        self.oauth_scopes = oauth_scopes
        self.oauth_client_id = oauth_client_id
        self.oauth_redirect_port_range = oauth_redirect_port_range
        self.use_cert_as_auth = use_cert_as_auth
        self.tls_client_cert_file = tls_client_cert_file
        self.oauth_persistence = oauth_persistence


def get_auth_provider(cfg: ClientContext):
    if cfg.auth_type == AuthType.DATABRICKS_OAUTH.value:
        assert cfg.oauth_redirect_port_range is not None
        assert cfg.oauth_client_id is not None
        assert cfg.oauth_scopes is not None

        return DatabricksOAuthProvider(
            cfg.hostname,
            cfg.oauth_persistence,
            cfg.oauth_redirect_port_range,
            cfg.oauth_client_id,
            cfg.oauth_scopes,
        )
    elif cfg.access_token is not None:
        return AccessTokenAuthProvider(cfg.access_token)
    elif cfg.username is not None and cfg.password is not None:
        return BasicAuthProvider(cfg.username, cfg.password)
    elif cfg.use_cert_as_auth and cfg.tls_client_cert_file:
        # no op authenticator. authentication is performed using ssl certificate outside of headers
        return AuthProvider()
    else:
        raise RuntimeError("No valid authentication settings!")


PYSQL_OAUTH_SCOPES = ["sql", "offline_access"]
PYSQL_OAUTH_CLIENT_ID = "databricks-sql-python"
PYSQL_OAUTH_REDIRECT_PORT_RANGE = list(range(8020, 8025))


def normalize_host_name(hostname: str):
    maybe_scheme = "https://" if not hostname.startswith("https://") else ""
    maybe_trailing_slash = "/" if not hostname.endswith("/") else ""
    return f"{maybe_scheme}{hostname}{maybe_trailing_slash}"


def get_python_sql_connector_auth_provider(hostname: str, **kwargs):
    cfg = ClientContext(
        hostname=normalize_host_name(hostname),
        auth_type=kwargs.get("auth_type"),
        access_token=kwargs.get("access_token"),
        username=kwargs.get("_username"),
        password=kwargs.get("_password"),
        use_cert_as_auth=kwargs.get("_use_cert_as_auth"),
        tls_client_cert_file=kwargs.get("_tls_client_cert_file"),
        oauth_scopes=PYSQL_OAUTH_SCOPES,
        oauth_client_id=kwargs.get("oauth_client_id") or PYSQL_OAUTH_CLIENT_ID,
        oauth_redirect_port_range=[kwargs["oauth_redirect_port"]]
        if kwargs.get("oauth_client_id") and kwargs.get("oauth_redirect_port")
        else PYSQL_OAUTH_REDIRECT_PORT_RANGE,
        oauth_persistence=kwargs.get("experimental_oauth_persistence"),
    )
    return get_auth_provider(cfg)
import base64
import logging
from typing import Dict, List

from databricks.sql.auth.oauth import OAuthManager

# Private API: this is an evolving interface and it will change in the future.
# Please must not depend on it in your applications.
from databricks.sql.experimental.oauth_persistence import OAuthToken, OAuthPersistence


class AuthProvider:
    def add_headers(self, request_headers: Dict[str, str]):
        pass


# Private API: this is an evolving interface and it will change in the future.
# Please must not depend on it in your applications.
class AccessTokenAuthProvider(AuthProvider):
    def __init__(self, access_token: str):
        self.__authorization_header_value = "Bearer {}".format(access_token)

    def add_headers(self, request_headers: Dict[str, str]):
        request_headers["Authorization"] = self.__authorization_header_value


# Private API: this is an evolving interface and it will change in the future.
# Please must not depend on it in your applications.
class BasicAuthProvider(AuthProvider):
    def __init__(self, username: str, password: str):
        auth_credentials = f"{username}:{password}".encode("UTF-8")
        auth_credentials_base64 = base64.standard_b64encode(auth_credentials).decode(
            "UTF-8"
        )

        self.__authorization_header_value = f"Basic {auth_credentials_base64}"

    def add_headers(self, request_headers: Dict[str, str]):
        request_headers["Authorization"] = self.__authorization_header_value


# Private API: this is an evolving interface and it will change in the future.
# Please must not depend on it in your applications.
class DatabricksOAuthProvider(AuthProvider):
    SCOPE_DELIM = " "

    def __init__(
        self,
        hostname: str,
        oauth_persistence: OAuthPersistence,
        redirect_port_range: List[int],
        client_id: str,
        scopes: List[str],
    ):
        try:
            self.oauth_manager = OAuthManager(
                port_range=redirect_port_range, client_id=client_id
            )
            self._hostname = hostname
            self._scopes_as_str = DatabricksOAuthProvider.SCOPE_DELIM.join(scopes)
            self._oauth_persistence = oauth_persistence
            self._client_id = client_id
            self._access_token = None
            self._refresh_token = None
            self._initial_get_token()
        except Exception as e:
            logging.error(f"unexpected error", e, exc_info=True)
            raise e

    def add_headers(self, request_headers: Dict[str, str]):
        self._update_token_if_expired()
        request_headers["Authorization"] = f"Bearer {self._access_token}"

    def _initial_get_token(self):
        try:
            if self._access_token is None or self._refresh_token is None:
                if self._oauth_persistence:
                    token = self._oauth_persistence.read(self._hostname)
                    if token:
                        self._access_token = token.access_token
                        self._refresh_token = token.refresh_token

            if self._access_token and self._refresh_token:
                self._update_token_if_expired()
            else:
                (access_token, refresh_token) = self.oauth_manager.get_tokens(
                    hostname=self._hostname, scope=self._scopes_as_str
                )
                self._access_token = access_token
                self._refresh_token = refresh_token

                if self._oauth_persistence:
                    self._oauth_persistence.persist(
                        self._hostname, OAuthToken(access_token, refresh_token)
                    )
        except Exception as e:
            logging.error(f"unexpected error in oauth initialization", e, exc_info=True)
            raise e

    def _update_token_if_expired(self):
        try:
            (
                fresh_access_token,
                fresh_refresh_token,
                is_refreshed,
            ) = self.oauth_manager.check_and_refresh_access_token(
                hostname=self._hostname,
                access_token=self._access_token,
                refresh_token=self._refresh_token,
            )
            if not is_refreshed:
                return
            else:
                self._access_token = fresh_access_token
                self._refresh_token = fresh_refresh_token

                if self._oauth_persistence:
                    token = OAuthToken(self._access_token, self._refresh_token)
                    self._oauth_persistence.persist(self._hostname, token)
        except Exception as e:
            logging.error(f"unexpected error in oauth token update", e, exc_info=True)
            raise e
import base64
import hashlib
import json
import logging
import secrets
import webbrowser
from datetime import datetime, timezone
from http.server import HTTPServer
from typing import List

import oauthlib.oauth2
import requests
from oauthlib.oauth2.rfc6749.errors import OAuth2Error
from requests.exceptions import RequestException

from databricks.sql.auth.oauth_http_handler import OAuthHttpSingleRequestHandler

logger = logging.getLogger(__name__)


class OAuthManager:
    OIDC_REDIRECTOR_PATH = "oidc"

    def __init__(self, port_range: List[int], client_id: str):
        self.port_range = port_range
        self.client_id = client_id
        self.redirect_port = None

    @staticmethod
    def __token_urlsafe(nbytes=32):
        return secrets.token_urlsafe(nbytes)

    @staticmethod
    def __get_redirect_url(redirect_port: int):
        return f"http://localhost:{redirect_port}"

    @staticmethod
    def __fetch_well_known_config(idp_url: str):
        known_config_url = f"{idp_url}/.well-known/oauth-authorization-server"
        try:
            response = requests.get(url=known_config_url)
        except RequestException as e:
            logger.error(
                f"Unable to fetch OAuth configuration from {idp_url}.\n"
                "Verify it is a valid workspace URL and that OAuth is "
                "enabled on this account."
            )
            raise e

        if response.status_code != 200:
            msg = (
                f"Received status {response.status_code} OAuth configuration from "
                f"{idp_url}.\n Verify it is a valid workspace URL and "
                "that OAuth is enabled on this account."
            )
            logger.error(msg)
            raise RuntimeError(msg)
        try:
            return response.json()
        except requests.exceptions.JSONDecodeError as e:
            logger.error(
                f"Unable to decode OAuth configuration from {idp_url}.\n"
                "Verify it is a valid workspace URL and that OAuth is "
                "enabled on this account."
            )
            raise e

    @staticmethod
    def __get_idp_url(host: str):
        maybe_scheme = "https://" if not host.startswith("https://") else ""
        maybe_trailing_slash = "/" if not host.endswith("/") else ""
        return f"{maybe_scheme}{host}{maybe_trailing_slash}{OAuthManager.OIDC_REDIRECTOR_PATH}"

    @staticmethod
    def __get_challenge():
        verifier_string = OAuthManager.__token_urlsafe(32)
        digest = hashlib.sha256(verifier_string.encode("UTF-8")).digest()
        challenge_string = (
            base64.urlsafe_b64encode(digest).decode("UTF-8").replace("=", "")
        )
        return verifier_string, challenge_string

    def __get_authorization_code(self, client, auth_url, scope, state, challenge):
        handler = OAuthHttpSingleRequestHandler("Databricks Sql Connector")

        last_error = None
        for port in self.port_range:
            try:
                with HTTPServer(("", port), handler) as httpd:
                    redirect_url = OAuthManager.__get_redirect_url(port)
                    (auth_req_uri, _, _) = client.prepare_authorization_request(
                        authorization_url=auth_url,
                        redirect_url=redirect_url,
                        scope=scope,
                        state=state,
                        code_challenge=challenge,
                        code_challenge_method="S256",
                    )
                    logger.info(f"Opening {auth_req_uri}")

                    webbrowser.open_new(auth_req_uri)
                    logger.info(
                        f"Listening for OAuth authorization callback at {redirect_url}"
                    )
                    httpd.handle_request()
                self.redirect_port = port
                break
            except OSError as e:
                if e.errno == 48:
                    logger.info(f"Port {port} is in use")
                    last_error = e
            except Exception as e:
                logger.error("unexpected error", e)
        if self.redirect_port is None:
            logger.error(
                f"Tried all the ports {self.port_range} for oauth redirect, but can't find free port"
            )
            raise last_error

        if not handler.request_path:
            msg = f"No path parameters were returned to the callback at {redirect_url}"
            logger.error(msg)
            raise RuntimeError(msg)
        # This is a kludge because the parsing library expects https callbacks
        # We should probably set it up using https
        full_redirect_url = (
            f"https://localhost:{self.redirect_port}/{handler.request_path}"
        )
        try:
            authorization_code_response = client.parse_request_uri_response(
                full_redirect_url, state=state
            )
        except OAuth2Error as e:
            logger.error(f"OAuth Token Request error {e.description}")
            raise e
        return authorization_code_response

    def __send_auth_code_token_request(
        self, client, token_request_url, redirect_url, code, verifier
    ):
        token_request_body = client.prepare_request_body(
            code=code, redirect_uri=redirect_url
        )
        data = f"{token_request_body}&code_verifier={verifier}"
        return self.__send_token_request(token_request_url, data)

    @staticmethod
    def __send_token_request(token_request_url, data):
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
        }
        response = requests.post(url=token_request_url, data=data, headers=headers)
        return response.json()

    def __send_refresh_token_request(self, hostname, refresh_token):
        idp_url = OAuthManager.__get_idp_url(hostname)
        oauth_config = OAuthManager.__fetch_well_known_config(idp_url)
        token_request_url = oauth_config["token_endpoint"]
        client = oauthlib.oauth2.WebApplicationClient(self.client_id)
        token_request_body = client.prepare_refresh_body(
            refresh_token=refresh_token, client_id=client.client_id
        )
        return OAuthManager.__send_token_request(token_request_url, token_request_body)

    @staticmethod
    def __get_tokens_from_response(oauth_response):
        access_token = oauth_response["access_token"]
        refresh_token = (
            oauth_response["refresh_token"]
            if "refresh_token" in oauth_response
            else None
        )
        return access_token, refresh_token

    def check_and_refresh_access_token(
        self, hostname: str, access_token: str, refresh_token: str
    ):
        now = datetime.now(tz=timezone.utc)
        # If we can't decode an expiration time, this will be expired by default.
        expiration_time = now
        try:
            # This token has already been verified and we are just parsing it.
            # If it has been tampered with, it will be rejected on the server side.
            # This avoids having to fetch the public key from the issuer and perform
            # an unnecessary signature verification.
            access_token_payload = access_token.split(".")[1]
            # add padding
            access_token_payload = access_token_payload + "=" * (
                -len(access_token_payload) % 4
            )
            decoded = json.loads(base64.standard_b64decode(access_token_payload))
            expiration_time = datetime.fromtimestamp(decoded["exp"], tz=timezone.utc)
        except Exception as e:
            logger.error(e)
            raise e

        if expiration_time > now:
            # The access token is fine. Just return it.
            return access_token, refresh_token, False

        if not refresh_token:
            msg = f"OAuth access token expired on {expiration_time}."
            logger.error(msg)
            raise RuntimeError(msg)

        # Try to refresh using the refresh token
        logger.debug(
            f"Attempting to refresh OAuth access token that expired on {expiration_time}"
        )
        oauth_response = self.__send_refresh_token_request(hostname, refresh_token)
        fresh_access_token, fresh_refresh_token = self.__get_tokens_from_response(
            oauth_response
        )
        return fresh_access_token, fresh_refresh_token, True

    def get_tokens(self, hostname: str, scope=None):
        idp_url = self.__get_idp_url(hostname)
        oauth_config = self.__fetch_well_known_config(idp_url)
        # We are going to override oauth_config["authorization_endpoint"] use the
        # /oidc redirector on the hostname, which may inject additional parameters.
        auth_url = f"{hostname}oidc/v1/authorize"
        state = OAuthManager.__token_urlsafe(16)
        (verifier, challenge) = OAuthManager.__get_challenge()
        client = oauthlib.oauth2.WebApplicationClient(self.client_id)
        try:
            auth_response = self.__get_authorization_code(
                client, auth_url, scope, state, challenge
            )
        except OAuth2Error as e:
            msg = f"OAuth Authorization Error: {e.description}"
            logger.error(msg)
            raise e

        assert self.redirect_port is not None
        redirect_url = OAuthManager.__get_redirect_url(self.redirect_port)

        token_request_url = oauth_config["token_endpoint"]
        code = auth_response["code"]
        oauth_response = self.__send_auth_code_token_request(
            client, token_request_url, redirect_url, code, verifier
        )
        return self.__get_tokens_from_response(oauth_response)
from http.server import BaseHTTPRequestHandler


class OAuthHttpSingleRequestHandler(BaseHTTPRequestHandler):
    RESPONSE_BODY_TEMPLATE = """<html>
<head>
  <title>Close this Tab</title>
  <style>
    body {
      font-family: "Barlow", Helvetica, Arial, sans-serif;
      padding: 20px;
      background-color: #f3f3f3;
    }
  </style>
</head>
<body>
  <h1>Please close this tab.</h1>
  <p>
    The {!!!PLACE_HOLDER!!!} received a response. You may close this tab.
  </p>
</body>
</html>"""

    def __init__(self, tool_name):
        self.response_body = self.RESPONSE_BODY_TEMPLATE.replace(
            "{!!!PLACE_HOLDER!!!}", tool_name
        ).encode("utf-8")
        self.request_path = None

    def __call__(self, *args, **kwargs):
        """Handle a request."""
        super().__init__(*args, **kwargs)

    def do_GET(self):  # nopep8
        self.send_response(200, "Success")
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(self.response_body)
        self.request_path = self.path

    def log_message(self, format, *args):
        # pylint: disable=redefined-builtin
        # pylint: disable=unused-argument
        return
import logging
from typing import Dict

import thrift

logger = logging.getLogger(__name__)


class THttpClient(thrift.transport.THttpClient.THttpClient):
    def __init__(
        self,
        auth_provider,
        uri_or_host,
        port=None,
        path=None,
        cafile=None,
        cert_file=None,
        key_file=None,
        ssl_context=None,
    ):
        super().__init__(
            uri_or_host, port, path, cafile, cert_file, key_file, ssl_context
        )
        self.__auth_provider = auth_provider

    def setCustomHeaders(self, headers: Dict[str, str]):
        self._headers = headers
        super().setCustomHeaders(headers)

    def flush(self):
        headers = dict(self._headers)
        self.__auth_provider.add_headers(headers)
        self._headers = headers
        self.setCustomHeaders(self._headers)
        super().flush()
from typing import Dict, Tuple, List, Optional, Any, Union

import pandas
import pyarrow
import requests
import json
import os

from databricks.sql import __version__
from databricks.sql import *
from databricks.sql.exc import OperationalError
from databricks.sql.thrift_backend import ThriftBackend
from databricks.sql.utils import ExecuteResponse, ParamEscaper, inject_parameters
from databricks.sql.types import Row
from databricks.sql.auth.auth import get_python_sql_connector_auth_provider
from databricks.sql.experimental.oauth_persistence import OAuthPersistence

logger = logging.getLogger(__name__)

DEFAULT_RESULT_BUFFER_SIZE_BYTES = 10485760
DEFAULT_ARRAY_SIZE = 100000


class Connection:
    def __init__(
        self,
        server_hostname: str,
        http_path: str,
        access_token: Optional[str] = None,
        http_headers: Optional[List[Tuple[str, str]]] = None,
        session_configuration: Dict[str, Any] = None,
        catalog: Optional[str] = None,
        schema: Optional[str] = None,
        **kwargs,
    ) -> None:
        """
        Connect to a Databricks SQL endpoint or a Databricks cluster.

        Parameters:
            :param server_hostname: Databricks instance host name.
            :param http_path: Http path either to a DBSQL endpoint (e.g. /sql/1.0/endpoints/1234567890abcdef)
                or to a DBR interactive cluster (e.g. /sql/protocolv1/o/1234567890123456/1234-123456-slid123)
            :param access_token: `str`, optional
                Http Bearer access token, e.g. Databricks Personal Access Token.
                Unless if you use auth_type=`databricks-oauth` you need to pass `access_token.
                Examples:
                         connection = sql.connect(
                            server_hostname='dbc-12345.staging.cloud.databricks.com',
                            http_path='sql/protocolv1/o/6789/12abc567',
                            access_token='dabpi12345678'
                         )
            :param http_headers: An optional list of (k, v) pairs that will be set as Http headers on every request
            :param session_configuration: An optional dictionary of Spark session parameters. Defaults to None.
                Execute the SQL command `SET -v` to get a full list of available commands.
            :param catalog: An optional initial catalog to use. Requires DBR version 9.0+
            :param schema: An optional initial schema to use. Requires DBR version 9.0+

        Other Parameters:
            auth_type: `str`, optional
                `databricks-oauth` : to use oauth with fine-grained permission scopes, set to `databricks-oauth`.
                This is currently in private preview for Databricks accounts on AWS.
                This supports User to Machine OAuth authentication for Databricks on AWS with
                any IDP configured. This is only for interactive python applications and open a browser window.
                Note this is beta (private preview)

            oauth_client_id: `str`, optional
                custom oauth client_id. If not specified, it will use the built-in client_id of databricks-sql-python.

            oauth_redirect_port: `int`, optional
                port of the oauth redirect uri (localhost). This is required when custom oauth client_id
                `oauth_client_id` is set

            experimental_oauth_persistence: configures preferred storage for persisting oauth tokens.
                This has to be a class implementing `OAuthPersistence`.
                When `auth_type` is set to `databricks-oauth` without persisting the oauth token in a persistence storage
                the oauth tokens will only be maintained in memory and if the python process restarts the end user
                will have to login again.
                Note this is beta (private preview)

                For persisting the oauth token in a prod environment you should subclass and implement OAuthPersistence

                from databricks.sql.experimental.oauth_persistence import OAuthPersistence, OAuthToken
                class MyCustomImplementation(OAuthPersistence):
                    def __init__(self, file_path):
                        self._file_path = file_path

                    def persist(self, token: OAuthToken):
                        # implement this method to persist token.refresh_token and token.access_token

                    def read(self) -> Optional[OAuthToken]:
                        # implement this method to return an instance of the persisted token


                    connection = sql.connect(
                        server_hostname='dbc-12345.staging.cloud.databricks.com',
                        http_path='sql/protocolv1/o/6789/12abc567',
                        auth_type="databricks-oauth",
                        experimental_oauth_persistence=MyCustomImplementation()
                    )

                For development purpose you can use the existing `DevOnlyFilePersistence` which stores the
                raw oauth token in the provided file path. Please note this is only for development and for prod you should provide your
                own implementation of OAuthPersistence.

                Examples:
                        # for development only
                        from databricks.sql.experimental.oauth_persistence import DevOnlyFilePersistence

                        connection = sql.connect(
                            server_hostname='dbc-12345.staging.cloud.databricks.com',
                            http_path='sql/protocolv1/o/6789/12abc567',
                            auth_type="databricks-oauth",
                            experimental_oauth_persistence=DevOnlyFilePersistence("~/dev-oauth.json")
                        )


        """

        # Internal arguments in **kwargs:
        # _user_agent_entry
        #   Tag to add to User-Agent header. For use by partners.
        # _username, _password
        #   Username and password Basic authentication (no official support)
        # _use_cert_as_auth
        #  Use a TLS cert instead of a token or username / password (internal use only)
        # _enable_ssl
        #  Connect over HTTP instead of HTTPS
        # _port
        #  Which port to connect to
        # _skip_routing_headers:
        #  Don't set routing headers if set to True (for use when connecting directly to server)
        # _tls_verify_hostname
        #   Set to False (Boolean) to disable SSL hostname verification, but check certificate.
        # _tls_trusted_ca_file
        #   Set to the path of the file containing trusted CA certificates for server certificate
        #   verification. If not provide, uses system truststore.
        # _tls_client_cert_file, _tls_client_cert_key_file
        #   Set client SSL certificate.
        # _retry_stop_after_attempts_count
        #  The maximum number of attempts during a request retry sequence (defaults to 24)
        # _socket_timeout
        #  The timeout in seconds for socket send, recv and connect operations. Defaults to None for
        #  no timeout. Should be a positive float or integer.
        # _disable_pandas
        #  In case the deserialisation through pandas causes any issues, it can be disabled with
        #  this flag.
        # _use_arrow_native_complex_types
        # DBR will return native Arrow types for structs, arrays and maps instead of Arrow strings
        # (True by default)
        # _use_arrow_native_decimals
        # Databricks runtime will return native Arrow types for decimals instead of Arrow strings
        # (True by default)
        # _use_arrow_native_timestamps
        # Databricks runtime will return native Arrow types for timestamps instead of Arrow strings
        # (True by default)

        if access_token:
            access_token_kv = {"access_token": access_token}
            kwargs = {**kwargs, **access_token_kv}

        self.open = False
        self.host = server_hostname
        self.port = kwargs.get("_port", 443)
        self.disable_pandas = kwargs.get("_disable_pandas", False)
        self.lz4_compression = kwargs.get("enable_query_result_lz4_compression", True)

        auth_provider = get_python_sql_connector_auth_provider(
            server_hostname, **kwargs
        )

        if not kwargs.get("_user_agent_entry"):
            useragent_header = "{}/{}".format(USER_AGENT_NAME, __version__)
        else:
            useragent_header = "{}/{} ({})".format(
                USER_AGENT_NAME, __version__, kwargs.get("_user_agent_entry")
            )

        base_headers = [("User-Agent", useragent_header)]

        self.thrift_backend = ThriftBackend(
            self.host,
            self.port,
            http_path,
            (http_headers or []) + base_headers,
            auth_provider,
            **kwargs,
        )

        self._session_handle = self.thrift_backend.open_session(
            session_configuration, catalog, schema
        )
        self.open = True
        logger.info("Successfully opened session " + str(self.get_session_id()))
        self._cursors = []  # type: List[Cursor]

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def __del__(self):
        if self.open:
            logger.debug(
                "Closing unclosed connection for session "
                "{}".format(self.get_session_id())
            )
            try:
                self._close(close_cursors=False)
            except OperationalError as e:
                # Close on best-effort basis.
                logger.debug("Couldn't close unclosed connection: {}".format(e.message))

    def get_session_id(self):
        return self.thrift_backend.handle_to_id(self._session_handle)

    def cursor(
        self,
        arraysize: int = DEFAULT_ARRAY_SIZE,
        buffer_size_bytes: int = DEFAULT_RESULT_BUFFER_SIZE_BYTES,
    ) -> "Cursor":
        """
        Return a new Cursor object using the connection.

        Will throw an Error if the connection has been closed.
        """
        if not self.open:
            raise Error("Cannot create cursor from closed connection")

        cursor = Cursor(
            self,
            self.thrift_backend,
            arraysize=arraysize,
            result_buffer_size_bytes=buffer_size_bytes,
        )
        self._cursors.append(cursor)
        return cursor

    def close(self) -> None:
        """Close the underlying session and mark all associated cursors as closed."""
        self._close()

    def _close(self, close_cursors=True) -> None:
        if close_cursors:
            for cursor in self._cursors:
                cursor.close()
        self.thrift_backend.close_session(self._session_handle)
        self.open = False

    def commit(self):
        """No-op because Databricks does not support transactions"""
        pass

    def rollback(self):
        raise NotSupportedError("Transactions are not supported on Databricks")


class Cursor:
    def __init__(
        self,
        connection: Connection,
        thrift_backend: ThriftBackend,
        result_buffer_size_bytes: int = DEFAULT_RESULT_BUFFER_SIZE_BYTES,
        arraysize: int = DEFAULT_ARRAY_SIZE,
    ) -> None:
        """
        These objects represent a database cursor, which is used to manage the context of a fetch
        operation.

        Cursors are not isolated, i.e., any changes done to the database by a cursor are immediately
        visible by other cursors or connections.
        """
        self.connection = connection
        self.rowcount = -1  # Return -1 as this is not supported
        self.buffer_size_bytes = result_buffer_size_bytes
        self.active_result_set: Union[ResultSet, None] = None
        self.arraysize = arraysize
        # Note that Cursor closed => active result set closed, but not vice versa
        self.open = True
        self.executing_command_id = None
        self.thrift_backend = thrift_backend
        self.active_op_handle = None
        self.escaper = ParamEscaper()
        self.lastrowid = None

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def __iter__(self):
        if self.active_result_set:
            for row in self.active_result_set:
                yield row
        else:
            raise Error("There is no active result set")

    def _close_and_clear_active_result_set(self):
        try:
            if self.active_result_set:
                self.active_result_set.close()
        finally:
            self.active_result_set = None

    def _check_not_closed(self):
        if not self.open:
            raise Error("Attempting operation on closed cursor")

    def _handle_staging_operation(
        self, staging_allowed_local_path: Union[None, str, List[str]]
    ):
        """Fetch the HTTP request instruction from a staging ingestion command
        and call the designated handler.

        Raise an exception if localFile is specified by the server but the localFile
        is not descended from staging_allowed_local_path.
        """

        if isinstance(staging_allowed_local_path, type(str())):
            _staging_allowed_local_paths = [staging_allowed_local_path]
        elif isinstance(staging_allowed_local_path, type(list())):
            _staging_allowed_local_paths = staging_allowed_local_path
        else:
            raise Error(
                "You must provide at least one staging_allowed_local_path when initialising a connection to perform ingestion commands"
            )

        abs_staging_allowed_local_paths = [
            os.path.abspath(i) for i in _staging_allowed_local_paths
        ]

        assert self.active_result_set is not None
        row = self.active_result_set.fetchone()
        assert row is not None

        # Must set to None in cases where server response does not include localFile
        abs_localFile = None

        # Default to not allow staging operations
        allow_operation = False
        if getattr(row, "localFile", None):
            abs_localFile = os.path.abspath(row.localFile)
            for abs_staging_allowed_local_path in abs_staging_allowed_local_paths:
                # If the indicated local file matches at least one allowed base path, allow the operation
                if (
                    os.path.commonpath([abs_localFile, abs_staging_allowed_local_path])
                    == abs_staging_allowed_local_path
                ):
                    allow_operation = True
                else:
                    continue
            if not allow_operation:
                raise Error(
                    "Local file operations are restricted to paths within the configured staging_allowed_local_path"
                )

        # TODO: Experiment with DBR sending real headers.
        # The specification says headers will be in JSON format but the current null value is actually an empty list []
        handler_args = {
            "presigned_url": row.presignedUrl,
            "local_file": abs_localFile,
            "headers": json.loads(row.headers or "{}"),
        }

        logger.debug(
            f"Attempting staging operation indicated by server: {row.operation} - {getattr(row, 'localFile', '')}"
        )

        # TODO: Create a retry loop here to re-attempt if the request times out or fails
        if row.operation == "GET":
            return self._handle_staging_get(**handler_args)
        elif row.operation == "PUT":
            return self._handle_staging_put(**handler_args)
        elif row.operation == "REMOVE":
            # Local file isn't needed to remove a remote resource
            handler_args.pop("local_file")
            return self._handle_staging_remove(**handler_args)
        else:
            raise Error(
                f"Operation {row.operation} is not supported. "
                + "Supported operations are GET, PUT, and REMOVE"
            )

    def _handle_staging_put(
        self, presigned_url: str, local_file: str, headers: dict = None
    ):
        """Make an HTTP PUT request

        Raise an exception if request fails. Returns no data.
        """

        if local_file is None:
            raise Error("Cannot perform PUT without specifying a local_file")

        with open(local_file, "rb") as fh:
            r = requests.put(url=presigned_url, data=fh, headers=headers)

        # fmt: off
        # Design borrowed from: https://stackoverflow.com/a/2342589/5093960
            
        OK = requests.codes.ok                  # 200
        CREATED = requests.codes.created        # 201
        ACCEPTED = requests.codes.accepted      # 202
        NO_CONTENT = requests.codes.no_content  # 204

        # fmt: on

        if r.status_code not in [OK, CREATED, NO_CONTENT, ACCEPTED]:
            raise Error(
                f"Staging operation over HTTP was unsuccessful: {r.status_code}-{r.text}"
            )

        if r.status_code == ACCEPTED:
            logger.debug(
                f"Response code {ACCEPTED} from server indicates ingestion command was accepted "
                + "but not yet applied on the server. It's possible this command may fail later."
            )

    def _handle_staging_get(
        self, local_file: str, presigned_url: str, headers: dict = None
    ):
        """Make an HTTP GET request, create a local file with the received data

        Raise an exception if request fails. Returns no data.
        """

        if local_file is None:
            raise Error("Cannot perform GET without specifying a local_file")

        r = requests.get(url=presigned_url, headers=headers)

        # response.ok verifies the status code is not between 400-600.
        # Any 2xx or 3xx will evaluate r.ok == True
        if not r.ok:
            raise Error(
                f"Staging operation over HTTP was unsuccessful: {r.status_code}-{r.text}"
            )

        with open(local_file, "wb") as fp:
            fp.write(r.content)

    def _handle_staging_remove(self, presigned_url: str, headers: dict = None):
        """Make an HTTP DELETE request to the presigned_url"""

        r = requests.delete(url=presigned_url, headers=headers)

        if not r.ok:
            raise Error(
                f"Staging operation over HTTP was unsuccessful: {r.status_code}-{r.text}"
            )

    def execute(
        self, operation: str, parameters: Optional[Dict[str, str]] = None
    ) -> "Cursor":
        """
        Execute a query and wait for execution to complete.
        Parameters should be given in extended param format style: %(...)<s|d|f>.
        For example:
            operation = "SELECT * FROM %(table_name)s"
            parameters = {"table_name": "my_table_name"}
            Will result in the query "SELECT * FROM 'my_table_name' being sent to the server
        :returns self
        """
        if parameters is not None:
            operation = inject_parameters(
                operation, self.escaper.escape_args(parameters)
            )

        self._check_not_closed()
        self._close_and_clear_active_result_set()
        execute_response = self.thrift_backend.execute_command(
            operation=operation,
            session_handle=self.connection._session_handle,
            max_rows=self.arraysize,
            max_bytes=self.buffer_size_bytes,
            lz4_compression=self.connection.lz4_compression,
            cursor=self,
        )
        self.active_result_set = ResultSet(
            self.connection,
            execute_response,
            self.thrift_backend,
            self.buffer_size_bytes,
            self.arraysize,
        )

        if execute_response.is_staging_operation:
            self._handle_staging_operation(
                staging_allowed_local_path=self.thrift_backend.staging_allowed_local_path
            )

        return self

    def executemany(self, operation, seq_of_parameters):
        """
        Prepare a database operation (query or command) and then execute it against all parameter
        sequences or mappings found in the sequence ``seq_of_parameters``.

        Only the final result set is retained.

        :returns self
        """
        for parameters in seq_of_parameters:
            self.execute(operation, parameters)
        return self

    def catalogs(self) -> "Cursor":
        """
        Get all available catalogs.

        :returns self
        """
        self._check_not_closed()
        self._close_and_clear_active_result_set()
        execute_response = self.thrift_backend.get_catalogs(
            session_handle=self.connection._session_handle,
            max_rows=self.arraysize,
            max_bytes=self.buffer_size_bytes,
            cursor=self,
        )
        self.active_result_set = ResultSet(
            self.connection,
            execute_response,
            self.thrift_backend,
            self.buffer_size_bytes,
            self.arraysize,
        )
        return self

    def schemas(
        self, catalog_name: Optional[str] = None, schema_name: Optional[str] = None
    ) -> "Cursor":
        """
        Get schemas corresponding to the catalog_name and schema_name.

        Names can contain % wildcards.
        :returns self
        """
        self._check_not_closed()
        self._close_and_clear_active_result_set()
        execute_response = self.thrift_backend.get_schemas(
            session_handle=self.connection._session_handle,
            max_rows=self.arraysize,
            max_bytes=self.buffer_size_bytes,
            cursor=self,
            catalog_name=catalog_name,
            schema_name=schema_name,
        )
        self.active_result_set = ResultSet(
            self.connection,
            execute_response,
            self.thrift_backend,
            self.buffer_size_bytes,
            self.arraysize,
        )
        return self

    def tables(
        self,
        catalog_name: Optional[str] = None,
        schema_name: Optional[str] = None,
        table_name: Optional[str] = None,
        table_types: List[str] = None,
    ) -> "Cursor":
        """
        Get tables corresponding to the catalog_name, schema_name and table_name.

        Names can contain % wildcards.
        :returns self
        """
        self._check_not_closed()
        self._close_and_clear_active_result_set()

        execute_response = self.thrift_backend.get_tables(
            session_handle=self.connection._session_handle,
            max_rows=self.arraysize,
            max_bytes=self.buffer_size_bytes,
            cursor=self,
            catalog_name=catalog_name,
            schema_name=schema_name,
            table_name=table_name,
            table_types=table_types,
        )
        self.active_result_set = ResultSet(
            self.connection,
            execute_response,
            self.thrift_backend,
            self.buffer_size_bytes,
            self.arraysize,
        )
        return self

    def columns(
        self,
        catalog_name: Optional[str] = None,
        schema_name: Optional[str] = None,
        table_name: Optional[str] = None,
        column_name: Optional[str] = None,
    ) -> "Cursor":
        """
        Get columns corresponding to the catalog_name, schema_name, table_name and column_name.

        Names can contain % wildcards.
        :returns self
        """
        self._check_not_closed()
        self._close_and_clear_active_result_set()

        execute_response = self.thrift_backend.get_columns(
            session_handle=self.connection._session_handle,
            max_rows=self.arraysize,
            max_bytes=self.buffer_size_bytes,
            cursor=self,
            catalog_name=catalog_name,
            schema_name=schema_name,
            table_name=table_name,
            column_name=column_name,
        )
        self.active_result_set = ResultSet(
            self.connection,
            execute_response,
            self.thrift_backend,
            self.buffer_size_bytes,
            self.arraysize,
        )
        return self

    def fetchall(self) -> List[Row]:
        """
        Fetch all (remaining) rows of a query result, returning them as a sequence of sequences.

        A databricks.sql.Error (or subclass) exception is raised if the previous call to
        execute did not produce any result set or no call was issued yet.
        """
        self._check_not_closed()
        if self.active_result_set:
            return self.active_result_set.fetchall()
        else:
            raise Error("There is no active result set")

    def fetchone(self) -> Optional[Row]:
        """
        Fetch the next row of a query result set, returning a single sequence, or ``None`` when
        no more data is available.

        An databricks.sql.Error (or subclass) exception is raised if the previous call to
        execute did not produce any result set or no call was issued yet.
        """
        self._check_not_closed()
        if self.active_result_set:
            return self.active_result_set.fetchone()
        else:
            raise Error("There is no active result set")

    def fetchmany(self, size: int) -> List[Row]:
        """
        Fetch the next set of rows of a query result, returning a sequence of sequences (e.g. a
        list of tuples).

        An empty sequence is returned when no more rows are available.

        The number of rows to fetch per call is specified by the parameter n_rows. If it is not
        given, the cursor's arraysize determines the number of rows to be fetched. The method
        should try to fetch as many rows as indicated by the size parameter. If this is not
        possible due to the specified number of rows not being available, fewer rows may be
        returned.

        A databricks.sql.Error (or subclass) exception is raised if the previous call
        to execute did not produce any result set or no call was issued yet.
        """
        self._check_not_closed()
        if self.active_result_set:
            return self.active_result_set.fetchmany(size)
        else:
            raise Error("There is no active result set")

    def fetchall_arrow(self) -> pyarrow.Table:
        self._check_not_closed()
        if self.active_result_set:
            return self.active_result_set.fetchall_arrow()
        else:
            raise Error("There is no active result set")

    def fetchmany_arrow(self, size) -> pyarrow.Table:
        self._check_not_closed()
        if self.active_result_set:
            return self.active_result_set.fetchmany_arrow(size)
        else:
            raise Error("There is no active result set")

    def cancel(self) -> None:
        """
        Cancel a running command.

        The command should be closed to free resources from the server.
        This method can be called from another thread.
        """
        if self.active_op_handle is not None:
            self.thrift_backend.cancel_command(self.active_op_handle)
        else:
            logger.warning(
                "Attempting to cancel a command, but there is no "
                "currently executing command"
            )

    def close(self) -> None:
        """Close cursor"""
        self.open = False
        if self.active_result_set:
            self._close_and_clear_active_result_set()

    @property
    def description(self) -> Optional[List[Tuple]]:
        """
        This read-only attribute is a sequence of 7-item sequences.

        Each of these sequences contains information describing one result column:

        - name
        - type_code
        - display_size (None in current implementation)
        - internal_size (None in current implementation)
        - precision (None in current implementation)
        - scale (None in current implementation)
        - null_ok (always True in current implementation)

        This attribute will be ``None`` for operations that do not return rows or if the cursor has
        not had an operation invoked via the execute method yet.

        The ``type_code`` can be interpreted by comparing it to the Type Objects.
        """
        if self.active_result_set:
            return self.active_result_set.description
        else:
            return None

    @property
    def rownumber(self):
        """This read-only attribute should provide the current 0-based index of the cursor in the
        result set.

        The index can be seen as index of the cursor in a sequence (the result set). The next fetch
        operation will fetch the row indexed by ``rownumber`` in that sequence.
        """
        return self.active_result_set.rownumber if self.active_result_set else 0

    def setinputsizes(self, sizes):
        """Does nothing by default"""
        pass

    def setoutputsize(self, size, column=None):
        """Does nothing by default"""
        pass


class ResultSet:
    def __init__(
        self,
        connection: Connection,
        execute_response: ExecuteResponse,
        thrift_backend: ThriftBackend,
        result_buffer_size_bytes: int = DEFAULT_RESULT_BUFFER_SIZE_BYTES,
        arraysize: int = 10000,
    ):
        """
        A ResultSet manages the results of a single command.

        :param connection: The parent connection that was used to execute this command
        :param execute_response: A `ExecuteResponse` class returned by a command execution
        :param result_buffer_size_bytes: The size (in bytes) of the internal buffer + max fetch
        amount :param arraysize: The max number of rows to fetch at a time (PEP-249)
        """
        self.connection = connection
        self.command_id = execute_response.command_handle
        self.op_state = execute_response.status
        self.has_been_closed_server_side = execute_response.has_been_closed_server_side
        self.has_more_rows = execute_response.has_more_rows
        self.buffer_size_bytes = result_buffer_size_bytes
        self.lz4_compressed = execute_response.lz4_compressed
        self.arraysize = arraysize
        self.thrift_backend = thrift_backend
        self.description = execute_response.description
        self._arrow_schema_bytes = execute_response.arrow_schema_bytes
        self._next_row_index = 0

        if execute_response.arrow_queue:
            # In this case the server has taken the fast path and returned an initial batch of
            # results
            self.results = execute_response.arrow_queue
        else:
            # In this case, there are results waiting on the server so we fetch now for simplicity
            self._fill_results_buffer()

    def __iter__(self):
        while True:
            row = self.fetchone()
            if row:
                yield row
            else:
                break

    def _fill_results_buffer(self):
        results, has_more_rows = self.thrift_backend.fetch_results(
            op_handle=self.command_id,
            max_rows=self.arraysize,
            max_bytes=self.buffer_size_bytes,
            expected_row_start_offset=self._next_row_index,
            lz4_compressed=self.lz4_compressed,
            arrow_schema_bytes=self._arrow_schema_bytes,
            description=self.description,
        )
        self.results = results
        self.has_more_rows = has_more_rows

    def _convert_arrow_table(self, table):
        column_names = [c[0] for c in self.description]
        ResultRow = Row(*column_names)

        if self.connection.disable_pandas is True:
            return [
                ResultRow(*[v.as_py() for v in r]) for r in zip(*table.itercolumns())
            ]

        # Need to use nullable types, as otherwise type can change when there are missing values.
        # See https://arrow.apache.org/docs/python/pandas.html#nullable-types
        # NOTE: This api is epxerimental https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html
        dtype_mapping = {
            pyarrow.int8(): pandas.Int8Dtype(),
            pyarrow.int16(): pandas.Int16Dtype(),
            pyarrow.int32(): pandas.Int32Dtype(),
            pyarrow.int64(): pandas.Int64Dtype(),
            pyarrow.uint8(): pandas.UInt8Dtype(),
            pyarrow.uint16(): pandas.UInt16Dtype(),
            pyarrow.uint32(): pandas.UInt32Dtype(),
            pyarrow.uint64(): pandas.UInt64Dtype(),
            pyarrow.bool_(): pandas.BooleanDtype(),
            pyarrow.float32(): pandas.Float32Dtype(),
            pyarrow.float64(): pandas.Float64Dtype(),
            pyarrow.string(): pandas.StringDtype(),
        }

        # Need to rename columns, as the to_pandas function cannot handle duplicate column names
        table_renamed = table.rename_columns([str(c) for c in range(table.num_columns)])
        df = table_renamed.to_pandas(
            types_mapper=dtype_mapping.get,
            date_as_object=True,
            timestamp_as_object=True,
        )

        res = df.to_numpy(na_value=None)
        return [ResultRow(*v) for v in res]

    @property
    def rownumber(self):
        return self._next_row_index

    def fetchmany_arrow(self, size: int) -> pyarrow.Table:
        """
        Fetch the next set of rows of a query result, returning a PyArrow table.

        An empty sequence is returned when no more rows are available.
        """
        if size < 0:
            raise ValueError("size argument for fetchmany is %s but must be >= 0", size)
        results = self.results.next_n_rows(size)
        n_remaining_rows = size - results.num_rows
        self._next_row_index += results.num_rows

        while (
            n_remaining_rows > 0
            and not self.has_been_closed_server_side
            and self.has_more_rows
        ):
            self._fill_results_buffer()
            partial_results = self.results.next_n_rows(n_remaining_rows)
            results = pyarrow.concat_tables([results, partial_results])
            n_remaining_rows -= partial_results.num_rows
            self._next_row_index += partial_results.num_rows

        return results

    def fetchall_arrow(self) -> pyarrow.Table:
        """Fetch all (remaining) rows of a query result, returning them as a PyArrow table."""
        results = self.results.remaining_rows()
        self._next_row_index += results.num_rows

        while not self.has_been_closed_server_side and self.has_more_rows:
            self._fill_results_buffer()
            partial_results = self.results.remaining_rows()
            results = pyarrow.concat_tables([results, partial_results])
            self._next_row_index += partial_results.num_rows

        return results

    def fetchone(self) -> Optional[Row]:
        """
        Fetch the next row of a query result set, returning a single sequence,
        or None when no more data is available.
        """
        res = self._convert_arrow_table(self.fetchmany_arrow(1))
        if len(res) > 0:
            return res[0]
        else:
            return None

    def fetchall(self) -> List[Row]:
        """
        Fetch all (remaining) rows of a query result, returning them as a list of rows.
        """
        return self._convert_arrow_table(self.fetchall_arrow())

    def fetchmany(self, size: int) -> List[Row]:
        """
        Fetch the next set of rows of a query result, returning a list of rows.

        An empty sequence is returned when no more rows are available.
        """
        return self._convert_arrow_table(self.fetchmany_arrow(size))

    def close(self) -> None:
        """
        Close the cursor.

        If the connection has not been closed, and the cursor has not already
        been closed on the server for some other reason, issue a request to the server to close it.
        """
        try:
            if (
                self.op_state != self.thrift_backend.CLOSED_OP_STATE
                and not self.has_been_closed_server_side
                and self.connection.open
            ):
                self.thrift_backend.close_command(self.command_id)
        finally:
            self.has_been_closed_server_side = True
            self.op_state = self.thrift_backend.CLOSED_OP_STATE

    @staticmethod
    def _get_schema_description(table_schema_message):
        """
        Takes a TableSchema message and returns a description 7-tuple as specified by PEP-249
        """

        def map_col_type(type_):
            if type_.startswith("decimal"):
                return "decimal"
            else:
                return type_

        return [
            (column.name, map_col_type(column.datatype), None, None, None, None, None)
            for column in table_schema_message.columns
        ]
import json
import logging

logger = logging.getLogger(__name__)


### PEP-249 Mandated ###
class Error(Exception):
    """Base class for DB-API2.0 exceptions.
    `message`: An optional user-friendly error message. It should be short, actionable and stable
    `context`: Optional extra context about the error. MUST be JSON serializable
    """

    def __init__(self, message=None, context=None, *args, **kwargs):
        super().__init__(message, *args, **kwargs)
        self.message = message
        self.context = context or {}

    def __str__(self):
        return self.message

    def message_with_context(self):
        return self.message + ": " + json.dumps(self.context, default=str)


class Warning(Exception):
    pass


class InterfaceError(Error):
    pass


class DatabaseError(Error):
    pass


class InternalError(DatabaseError):
    pass


class OperationalError(DatabaseError):
    pass


class ProgrammingError(DatabaseError):
    pass


class IntegrityError(DatabaseError):
    pass


class DataError(DatabaseError):
    pass


class NotSupportedError(DatabaseError):
    pass


### Custom error classes ###
class InvalidServerResponseError(OperationalError):
    """Thrown if the server does not set the initial namespace correctly"""

    pass


class ServerOperationError(DatabaseError):
    """Thrown if the operation moved to an error state, if for example there was a syntax
    error.
    Its context will have the following keys:
    "diagnostic-info": The full Spark stack trace (if available)
    "operation-id": The Thrift ID of the operation
    """

    pass


class RequestError(OperationalError):
    """Thrown if there was a error during request to the server.
    Its context will have the following keys:
    "method": The RPC method name that failed
    "session-id": The Thrift session guid
    "query-id": The Thrift query guid (if available)
    "http-code": HTTP response code to RPC request (if available)
    "error-message": Error message from the HTTP headers (if available)
    "original-exception": The Python level original exception
    "no-retry-reason": Why the request wasn't retried (if available)
    "bounded-retry-delay": The maximum amount of time an error will be retried before giving up
    "attempt": current retry number / maximum number of retries
    "elapsed-seconds": time that has elapsed since first attempting the RPC request
    """

    pass
import logging
import json
from typing import Optional

logger = logging.getLogger(__name__)


class OAuthToken:
    def __init__(self, access_token, refresh_token):
        self._access_token = access_token
        self._refresh_token = refresh_token

    @property
    def access_token(self) -> str:
        return self._access_token

    @property
    def refresh_token(self) -> str:
        return self._refresh_token


class OAuthPersistence:
    def persist(self, hostname: str, oauth_token: OAuthToken):
        pass

    def read(self, hostname: str) -> Optional[OAuthToken]:
        pass


# Note this is only intended to be used for development
class DevOnlyFilePersistence(OAuthPersistence):
    def __init__(self, file_path):
        self._file_path = file_path

    def persist(self, hostname: str, token: OAuthToken):
        logger.info(f"persisting token in {self._file_path}")

        # Data to be written
        dictionary = {
            "refresh_token": token.refresh_token,
            "access_token": token.access_token,
            "hostname": hostname,
        }

        # Serializing json
        json_object = json.dumps(dictionary, indent=4)

        with open(self._file_path, "w") as outfile:
            outfile.write(json_object)

    def read(self, hostname: str) -> Optional[OAuthToken]:
        try:
            with open(self._file_path, "r") as infile:
                json_as_string = infile.read()

                token_as_json = json.loads(json_as_string)
                hostname_in_token = token_as_json["hostname"]
                if hostname != hostname_in_token:
                    msg = (
                        f"token was persisted for host {hostname_in_token} does not match {hostname} "
                        f"This is a dev only persistence and it only supports a single Databricks hostname."
                        f"\n manually delete {self._file_path} file and restart this process"
                    )
                    logger.error(msg)
                    raise Exception(msg)
                return OAuthToken(
                    token_as_json["access_token"], token_as_json["refresh_token"]
                )
        except Exception as e:
            return None
#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from TCLIService import TCLIService
from TCLIService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  TOpenSessionResp OpenSession(TOpenSessionReq req)')
    print('  TCloseSessionResp CloseSession(TCloseSessionReq req)')
    print('  TGetInfoResp GetInfo(TGetInfoReq req)')
    print('  TExecuteStatementResp ExecuteStatement(TExecuteStatementReq req)')
    print('  TGetTypeInfoResp GetTypeInfo(TGetTypeInfoReq req)')
    print('  TGetCatalogsResp GetCatalogs(TGetCatalogsReq req)')
    print('  TGetSchemasResp GetSchemas(TGetSchemasReq req)')
    print('  TGetTablesResp GetTables(TGetTablesReq req)')
    print('  TGetTableTypesResp GetTableTypes(TGetTableTypesReq req)')
    print('  TGetColumnsResp GetColumns(TGetColumnsReq req)')
    print('  TGetFunctionsResp GetFunctions(TGetFunctionsReq req)')
    print('  TGetPrimaryKeysResp GetPrimaryKeys(TGetPrimaryKeysReq req)')
    print('  TGetCrossReferenceResp GetCrossReference(TGetCrossReferenceReq req)')
    print('  TGetOperationStatusResp GetOperationStatus(TGetOperationStatusReq req)')
    print('  TCancelOperationResp CancelOperation(TCancelOperationReq req)')
    print('  TCloseOperationResp CloseOperation(TCloseOperationReq req)')
    print('  TGetResultSetMetadataResp GetResultSetMetadata(TGetResultSetMetadataReq req)')
    print('  TFetchResultsResp FetchResults(TFetchResultsReq req)')
    print('  TGetDelegationTokenResp GetDelegationToken(TGetDelegationTokenReq req)')
    print('  TCancelDelegationTokenResp CancelDelegationToken(TCancelDelegationTokenReq req)')
    print('  TRenewDelegationTokenResp RenewDelegationToken(TRenewDelegationTokenReq req)')
    print('  TDBSqlGetLoadInformationResp GetLoadInformation(TDBSqlGetLoadInformationReq req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TCLIService.Client(protocol)
transport.open()

if cmd == 'OpenSession':
    if len(args) != 1:
        print('OpenSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.OpenSession(eval(args[0]),))

elif cmd == 'CloseSession':
    if len(args) != 1:
        print('CloseSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.CloseSession(eval(args[0]),))

elif cmd == 'GetInfo':
    if len(args) != 1:
        print('GetInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetInfo(eval(args[0]),))

elif cmd == 'ExecuteStatement':
    if len(args) != 1:
        print('ExecuteStatement requires 1 args')
        sys.exit(1)
    pp.pprint(client.ExecuteStatement(eval(args[0]),))

elif cmd == 'GetTypeInfo':
    if len(args) != 1:
        print('GetTypeInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTypeInfo(eval(args[0]),))

elif cmd == 'GetCatalogs':
    if len(args) != 1:
        print('GetCatalogs requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetCatalogs(eval(args[0]),))

elif cmd == 'GetSchemas':
    if len(args) != 1:
        print('GetSchemas requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetSchemas(eval(args[0]),))

elif cmd == 'GetTables':
    if len(args) != 1:
        print('GetTables requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTables(eval(args[0]),))

elif cmd == 'GetTableTypes':
    if len(args) != 1:
        print('GetTableTypes requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTableTypes(eval(args[0]),))

elif cmd == 'GetColumns':
    if len(args) != 1:
        print('GetColumns requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetColumns(eval(args[0]),))

elif cmd == 'GetFunctions':
    if len(args) != 1:
        print('GetFunctions requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetFunctions(eval(args[0]),))

elif cmd == 'GetPrimaryKeys':
    if len(args) != 1:
        print('GetPrimaryKeys requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPrimaryKeys(eval(args[0]),))

elif cmd == 'GetCrossReference':
    if len(args) != 1:
        print('GetCrossReference requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetCrossReference(eval(args[0]),))

elif cmd == 'GetOperationStatus':
    if len(args) != 1:
        print('GetOperationStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetOperationStatus(eval(args[0]),))

elif cmd == 'CancelOperation':
    if len(args) != 1:
        print('CancelOperation requires 1 args')
        sys.exit(1)
    pp.pprint(client.CancelOperation(eval(args[0]),))

elif cmd == 'CloseOperation':
    if len(args) != 1:
        print('CloseOperation requires 1 args')
        sys.exit(1)
    pp.pprint(client.CloseOperation(eval(args[0]),))

elif cmd == 'GetResultSetMetadata':
    if len(args) != 1:
        print('GetResultSetMetadata requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetResultSetMetadata(eval(args[0]),))

elif cmd == 'FetchResults':
    if len(args) != 1:
        print('FetchResults requires 1 args')
        sys.exit(1)
    pp.pprint(client.FetchResults(eval(args[0]),))

elif cmd == 'GetDelegationToken':
    if len(args) != 1:
        print('GetDelegationToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetDelegationToken(eval(args[0]),))

elif cmd == 'CancelDelegationToken':
    if len(args) != 1:
        print('CancelDelegationToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.CancelDelegationToken(eval(args[0]),))

elif cmd == 'RenewDelegationToken':
    if len(args) != 1:
        print('RenewDelegationToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.RenewDelegationToken(eval(args[0]),))

elif cmd == 'GetLoadInformation':
    if len(args) != 1:
        print('GetLoadInformation requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetLoadInformation(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def OpenSession(self, req):
        """
        Parameters:
         - req

        """
        pass

    def CloseSession(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetInfo(self, req):
        """
        Parameters:
         - req

        """
        pass

    def ExecuteStatement(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetTypeInfo(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetCatalogs(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetSchemas(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetTables(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetTableTypes(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetColumns(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetFunctions(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetPrimaryKeys(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetCrossReference(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetOperationStatus(self, req):
        """
        Parameters:
         - req

        """
        pass

    def CancelOperation(self, req):
        """
        Parameters:
         - req

        """
        pass

    def CloseOperation(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetResultSetMetadata(self, req):
        """
        Parameters:
         - req

        """
        pass

    def FetchResults(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetDelegationToken(self, req):
        """
        Parameters:
         - req

        """
        pass

    def CancelDelegationToken(self, req):
        """
        Parameters:
         - req

        """
        pass

    def RenewDelegationToken(self, req):
        """
        Parameters:
         - req

        """
        pass

    def GetLoadInformation(self, req):
        """
        Parameters:
         - req

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def OpenSession(self, req):
        """
        Parameters:
         - req

        """
        self.send_OpenSession(req)
        return self.recv_OpenSession()

    def send_OpenSession(self, req):
        self._oprot.writeMessageBegin('OpenSession', TMessageType.CALL, self._seqid)
        args = OpenSession_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_OpenSession(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = OpenSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "OpenSession failed: unknown result")

    def CloseSession(self, req):
        """
        Parameters:
         - req

        """
        self.send_CloseSession(req)
        return self.recv_CloseSession()

    def send_CloseSession(self, req):
        self._oprot.writeMessageBegin('CloseSession', TMessageType.CALL, self._seqid)
        args = CloseSession_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CloseSession(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CloseSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CloseSession failed: unknown result")

    def GetInfo(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetInfo(req)
        return self.recv_GetInfo()

    def send_GetInfo(self, req):
        self._oprot.writeMessageBegin('GetInfo', TMessageType.CALL, self._seqid)
        args = GetInfo_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetInfo failed: unknown result")

    def ExecuteStatement(self, req):
        """
        Parameters:
         - req

        """
        self.send_ExecuteStatement(req)
        return self.recv_ExecuteStatement()

    def send_ExecuteStatement(self, req):
        self._oprot.writeMessageBegin('ExecuteStatement', TMessageType.CALL, self._seqid)
        args = ExecuteStatement_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ExecuteStatement(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ExecuteStatement_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ExecuteStatement failed: unknown result")

    def GetTypeInfo(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetTypeInfo(req)
        return self.recv_GetTypeInfo()

    def send_GetTypeInfo(self, req):
        self._oprot.writeMessageBegin('GetTypeInfo', TMessageType.CALL, self._seqid)
        args = GetTypeInfo_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTypeInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTypeInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTypeInfo failed: unknown result")

    def GetCatalogs(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetCatalogs(req)
        return self.recv_GetCatalogs()

    def send_GetCatalogs(self, req):
        self._oprot.writeMessageBegin('GetCatalogs', TMessageType.CALL, self._seqid)
        args = GetCatalogs_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCatalogs(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCatalogs_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCatalogs failed: unknown result")

    def GetSchemas(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetSchemas(req)
        return self.recv_GetSchemas()

    def send_GetSchemas(self, req):
        self._oprot.writeMessageBegin('GetSchemas', TMessageType.CALL, self._seqid)
        args = GetSchemas_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetSchemas(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetSchemas_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetSchemas failed: unknown result")

    def GetTables(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetTables(req)
        return self.recv_GetTables()

    def send_GetTables(self, req):
        self._oprot.writeMessageBegin('GetTables', TMessageType.CALL, self._seqid)
        args = GetTables_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTables(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTables_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTables failed: unknown result")

    def GetTableTypes(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetTableTypes(req)
        return self.recv_GetTableTypes()

    def send_GetTableTypes(self, req):
        self._oprot.writeMessageBegin('GetTableTypes', TMessageType.CALL, self._seqid)
        args = GetTableTypes_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTableTypes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTableTypes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTableTypes failed: unknown result")

    def GetColumns(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetColumns(req)
        return self.recv_GetColumns()

    def send_GetColumns(self, req):
        self._oprot.writeMessageBegin('GetColumns', TMessageType.CALL, self._seqid)
        args = GetColumns_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetColumns(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetColumns_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetColumns failed: unknown result")

    def GetFunctions(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetFunctions(req)
        return self.recv_GetFunctions()

    def send_GetFunctions(self, req):
        self._oprot.writeMessageBegin('GetFunctions', TMessageType.CALL, self._seqid)
        args = GetFunctions_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetFunctions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetFunctions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetFunctions failed: unknown result")

    def GetPrimaryKeys(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetPrimaryKeys(req)
        return self.recv_GetPrimaryKeys()

    def send_GetPrimaryKeys(self, req):
        self._oprot.writeMessageBegin('GetPrimaryKeys', TMessageType.CALL, self._seqid)
        args = GetPrimaryKeys_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetPrimaryKeys(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetPrimaryKeys_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetPrimaryKeys failed: unknown result")

    def GetCrossReference(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetCrossReference(req)
        return self.recv_GetCrossReference()

    def send_GetCrossReference(self, req):
        self._oprot.writeMessageBegin('GetCrossReference', TMessageType.CALL, self._seqid)
        args = GetCrossReference_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCrossReference(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCrossReference_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCrossReference failed: unknown result")

    def GetOperationStatus(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetOperationStatus(req)
        return self.recv_GetOperationStatus()

    def send_GetOperationStatus(self, req):
        self._oprot.writeMessageBegin('GetOperationStatus', TMessageType.CALL, self._seqid)
        args = GetOperationStatus_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetOperationStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetOperationStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetOperationStatus failed: unknown result")

    def CancelOperation(self, req):
        """
        Parameters:
         - req

        """
        self.send_CancelOperation(req)
        return self.recv_CancelOperation()

    def send_CancelOperation(self, req):
        self._oprot.writeMessageBegin('CancelOperation', TMessageType.CALL, self._seqid)
        args = CancelOperation_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CancelOperation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CancelOperation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CancelOperation failed: unknown result")

    def CloseOperation(self, req):
        """
        Parameters:
         - req

        """
        self.send_CloseOperation(req)
        return self.recv_CloseOperation()

    def send_CloseOperation(self, req):
        self._oprot.writeMessageBegin('CloseOperation', TMessageType.CALL, self._seqid)
        args = CloseOperation_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CloseOperation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CloseOperation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CloseOperation failed: unknown result")

    def GetResultSetMetadata(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetResultSetMetadata(req)
        return self.recv_GetResultSetMetadata()

    def send_GetResultSetMetadata(self, req):
        self._oprot.writeMessageBegin('GetResultSetMetadata', TMessageType.CALL, self._seqid)
        args = GetResultSetMetadata_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetResultSetMetadata(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetResultSetMetadata_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetResultSetMetadata failed: unknown result")

    def FetchResults(self, req):
        """
        Parameters:
         - req

        """
        self.send_FetchResults(req)
        return self.recv_FetchResults()

    def send_FetchResults(self, req):
        self._oprot.writeMessageBegin('FetchResults', TMessageType.CALL, self._seqid)
        args = FetchResults_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FetchResults(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FetchResults_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FetchResults failed: unknown result")

    def GetDelegationToken(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetDelegationToken(req)
        return self.recv_GetDelegationToken()

    def send_GetDelegationToken(self, req):
        self._oprot.writeMessageBegin('GetDelegationToken', TMessageType.CALL, self._seqid)
        args = GetDelegationToken_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetDelegationToken(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetDelegationToken_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetDelegationToken failed: unknown result")

    def CancelDelegationToken(self, req):
        """
        Parameters:
         - req

        """
        self.send_CancelDelegationToken(req)
        return self.recv_CancelDelegationToken()

    def send_CancelDelegationToken(self, req):
        self._oprot.writeMessageBegin('CancelDelegationToken', TMessageType.CALL, self._seqid)
        args = CancelDelegationToken_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CancelDelegationToken(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CancelDelegationToken_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CancelDelegationToken failed: unknown result")

    def RenewDelegationToken(self, req):
        """
        Parameters:
         - req

        """
        self.send_RenewDelegationToken(req)
        return self.recv_RenewDelegationToken()

    def send_RenewDelegationToken(self, req):
        self._oprot.writeMessageBegin('RenewDelegationToken', TMessageType.CALL, self._seqid)
        args = RenewDelegationToken_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_RenewDelegationToken(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = RenewDelegationToken_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "RenewDelegationToken failed: unknown result")

    def GetLoadInformation(self, req):
        """
        Parameters:
         - req

        """
        self.send_GetLoadInformation(req)
        return self.recv_GetLoadInformation()

    def send_GetLoadInformation(self, req):
        self._oprot.writeMessageBegin('GetLoadInformation', TMessageType.CALL, self._seqid)
        args = GetLoadInformation_args()
        args.req = req
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetLoadInformation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetLoadInformation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetLoadInformation failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["OpenSession"] = Processor.process_OpenSession
        self._processMap["CloseSession"] = Processor.process_CloseSession
        self._processMap["GetInfo"] = Processor.process_GetInfo
        self._processMap["ExecuteStatement"] = Processor.process_ExecuteStatement
        self._processMap["GetTypeInfo"] = Processor.process_GetTypeInfo
        self._processMap["GetCatalogs"] = Processor.process_GetCatalogs
        self._processMap["GetSchemas"] = Processor.process_GetSchemas
        self._processMap["GetTables"] = Processor.process_GetTables
        self._processMap["GetTableTypes"] = Processor.process_GetTableTypes
        self._processMap["GetColumns"] = Processor.process_GetColumns
        self._processMap["GetFunctions"] = Processor.process_GetFunctions
        self._processMap["GetPrimaryKeys"] = Processor.process_GetPrimaryKeys
        self._processMap["GetCrossReference"] = Processor.process_GetCrossReference
        self._processMap["GetOperationStatus"] = Processor.process_GetOperationStatus
        self._processMap["CancelOperation"] = Processor.process_CancelOperation
        self._processMap["CloseOperation"] = Processor.process_CloseOperation
        self._processMap["GetResultSetMetadata"] = Processor.process_GetResultSetMetadata
        self._processMap["FetchResults"] = Processor.process_FetchResults
        self._processMap["GetDelegationToken"] = Processor.process_GetDelegationToken
        self._processMap["CancelDelegationToken"] = Processor.process_CancelDelegationToken
        self._processMap["RenewDelegationToken"] = Processor.process_RenewDelegationToken
        self._processMap["GetLoadInformation"] = Processor.process_GetLoadInformation
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_OpenSession(self, seqid, iprot, oprot):
        args = OpenSession_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = OpenSession_result()
        try:
            result.success = self._handler.OpenSession(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("OpenSession", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CloseSession(self, seqid, iprot, oprot):
        args = CloseSession_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CloseSession_result()
        try:
            result.success = self._handler.CloseSession(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CloseSession", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetInfo(self, seqid, iprot, oprot):
        args = GetInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetInfo_result()
        try:
            result.success = self._handler.GetInfo(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ExecuteStatement(self, seqid, iprot, oprot):
        args = ExecuteStatement_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ExecuteStatement_result()
        try:
            result.success = self._handler.ExecuteStatement(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ExecuteStatement", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTypeInfo(self, seqid, iprot, oprot):
        args = GetTypeInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTypeInfo_result()
        try:
            result.success = self._handler.GetTypeInfo(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTypeInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCatalogs(self, seqid, iprot, oprot):
        args = GetCatalogs_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCatalogs_result()
        try:
            result.success = self._handler.GetCatalogs(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCatalogs", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetSchemas(self, seqid, iprot, oprot):
        args = GetSchemas_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetSchemas_result()
        try:
            result.success = self._handler.GetSchemas(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetSchemas", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTables(self, seqid, iprot, oprot):
        args = GetTables_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTables_result()
        try:
            result.success = self._handler.GetTables(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTables", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTableTypes(self, seqid, iprot, oprot):
        args = GetTableTypes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTableTypes_result()
        try:
            result.success = self._handler.GetTableTypes(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTableTypes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetColumns(self, seqid, iprot, oprot):
        args = GetColumns_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetColumns_result()
        try:
            result.success = self._handler.GetColumns(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetColumns", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetFunctions(self, seqid, iprot, oprot):
        args = GetFunctions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetFunctions_result()
        try:
            result.success = self._handler.GetFunctions(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetFunctions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetPrimaryKeys(self, seqid, iprot, oprot):
        args = GetPrimaryKeys_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetPrimaryKeys_result()
        try:
            result.success = self._handler.GetPrimaryKeys(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetPrimaryKeys", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCrossReference(self, seqid, iprot, oprot):
        args = GetCrossReference_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCrossReference_result()
        try:
            result.success = self._handler.GetCrossReference(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCrossReference", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetOperationStatus(self, seqid, iprot, oprot):
        args = GetOperationStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetOperationStatus_result()
        try:
            result.success = self._handler.GetOperationStatus(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetOperationStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CancelOperation(self, seqid, iprot, oprot):
        args = CancelOperation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CancelOperation_result()
        try:
            result.success = self._handler.CancelOperation(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CancelOperation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CloseOperation(self, seqid, iprot, oprot):
        args = CloseOperation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CloseOperation_result()
        try:
            result.success = self._handler.CloseOperation(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CloseOperation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetResultSetMetadata(self, seqid, iprot, oprot):
        args = GetResultSetMetadata_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetResultSetMetadata_result()
        try:
            result.success = self._handler.GetResultSetMetadata(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetResultSetMetadata", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FetchResults(self, seqid, iprot, oprot):
        args = FetchResults_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FetchResults_result()
        try:
            result.success = self._handler.FetchResults(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FetchResults", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetDelegationToken(self, seqid, iprot, oprot):
        args = GetDelegationToken_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetDelegationToken_result()
        try:
            result.success = self._handler.GetDelegationToken(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetDelegationToken", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CancelDelegationToken(self, seqid, iprot, oprot):
        args = CancelDelegationToken_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CancelDelegationToken_result()
        try:
            result.success = self._handler.CancelDelegationToken(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CancelDelegationToken", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_RenewDelegationToken(self, seqid, iprot, oprot):
        args = RenewDelegationToken_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = RenewDelegationToken_result()
        try:
            result.success = self._handler.RenewDelegationToken(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("RenewDelegationToken", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetLoadInformation(self, seqid, iprot, oprot):
        args = GetLoadInformation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetLoadInformation_result()
        try:
            result.success = self._handler.GetLoadInformation(args.req)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetLoadInformation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class OpenSession_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TOpenSessionReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenSession_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(OpenSession_args)
OpenSession_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TOpenSessionReq, None], None, ),  # 1
)


class OpenSession_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TOpenSessionResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenSession_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(OpenSession_result)
OpenSession_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TOpenSessionResp, None], None, ),  # 0
)


class CloseSession_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TCloseSessionReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CloseSession_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CloseSession_args)
CloseSession_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TCloseSessionReq, None], None, ),  # 1
)


class CloseSession_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TCloseSessionResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CloseSession_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CloseSession_result)
CloseSession_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TCloseSessionResp, None], None, ),  # 0
)


class GetInfo_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetInfoReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetInfo_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetInfo_args)
GetInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetInfoReq, None], None, ),  # 1
)


class GetInfo_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetInfoResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetInfo_result)
GetInfo_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetInfoResp, None], None, ),  # 0
)


class ExecuteStatement_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TExecuteStatementReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExecuteStatement_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ExecuteStatement_args)
ExecuteStatement_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TExecuteStatementReq, None], None, ),  # 1
)


class ExecuteStatement_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TExecuteStatementResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExecuteStatement_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ExecuteStatement_result)
ExecuteStatement_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TExecuteStatementResp, None], None, ),  # 0
)


class GetTypeInfo_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetTypeInfoReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTypeInfo_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTypeInfo_args)
GetTypeInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetTypeInfoReq, None], None, ),  # 1
)


class GetTypeInfo_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetTypeInfoResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTypeInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTypeInfo_result)
GetTypeInfo_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetTypeInfoResp, None], None, ),  # 0
)


class GetCatalogs_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetCatalogsReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCatalogs_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCatalogs_args)
GetCatalogs_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetCatalogsReq, None], None, ),  # 1
)


class GetCatalogs_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetCatalogsResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCatalogs_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCatalogs_result)
GetCatalogs_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetCatalogsResp, None], None, ),  # 0
)


class GetSchemas_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetSchemasReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetSchemas_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetSchemas_args)
GetSchemas_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetSchemasReq, None], None, ),  # 1
)


class GetSchemas_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetSchemasResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetSchemas_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetSchemas_result)
GetSchemas_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetSchemasResp, None], None, ),  # 0
)


class GetTables_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetTablesReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTables_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTables_args)
GetTables_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetTablesReq, None], None, ),  # 1
)


class GetTables_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetTablesResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTables_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTables_result)
GetTables_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetTablesResp, None], None, ),  # 0
)


class GetTableTypes_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetTableTypesReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTableTypes_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTableTypes_args)
GetTableTypes_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetTableTypesReq, None], None, ),  # 1
)


class GetTableTypes_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetTableTypesResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTableTypes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTableTypes_result)
GetTableTypes_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetTableTypesResp, None], None, ),  # 0
)


class GetColumns_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetColumnsReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetColumns_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetColumns_args)
GetColumns_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetColumnsReq, None], None, ),  # 1
)


class GetColumns_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetColumnsResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetColumns_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetColumns_result)
GetColumns_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetColumnsResp, None], None, ),  # 0
)


class GetFunctions_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetFunctionsReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFunctions_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetFunctions_args)
GetFunctions_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetFunctionsReq, None], None, ),  # 1
)


class GetFunctions_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetFunctionsResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFunctions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetFunctions_result)
GetFunctions_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetFunctionsResp, None], None, ),  # 0
)


class GetPrimaryKeys_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetPrimaryKeysReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPrimaryKeys_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetPrimaryKeys_args)
GetPrimaryKeys_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetPrimaryKeysReq, None], None, ),  # 1
)


class GetPrimaryKeys_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetPrimaryKeysResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPrimaryKeys_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetPrimaryKeys_result)
GetPrimaryKeys_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetPrimaryKeysResp, None], None, ),  # 0
)


class GetCrossReference_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetCrossReferenceReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCrossReference_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCrossReference_args)
GetCrossReference_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetCrossReferenceReq, None], None, ),  # 1
)


class GetCrossReference_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetCrossReferenceResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCrossReference_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCrossReference_result)
GetCrossReference_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetCrossReferenceResp, None], None, ),  # 0
)


class GetOperationStatus_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetOperationStatusReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetOperationStatus_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetOperationStatus_args)
GetOperationStatus_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetOperationStatusReq, None], None, ),  # 1
)


class GetOperationStatus_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetOperationStatusResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetOperationStatus_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetOperationStatus_result)
GetOperationStatus_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetOperationStatusResp, None], None, ),  # 0
)


class CancelOperation_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TCancelOperationReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CancelOperation_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CancelOperation_args)
CancelOperation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TCancelOperationReq, None], None, ),  # 1
)


class CancelOperation_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TCancelOperationResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CancelOperation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CancelOperation_result)
CancelOperation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TCancelOperationResp, None], None, ),  # 0
)


class CloseOperation_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TCloseOperationReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CloseOperation_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CloseOperation_args)
CloseOperation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TCloseOperationReq, None], None, ),  # 1
)


class CloseOperation_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TCloseOperationResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CloseOperation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CloseOperation_result)
CloseOperation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TCloseOperationResp, None], None, ),  # 0
)


class GetResultSetMetadata_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetResultSetMetadataReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetResultSetMetadata_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetResultSetMetadata_args)
GetResultSetMetadata_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetResultSetMetadataReq, None], None, ),  # 1
)


class GetResultSetMetadata_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetResultSetMetadataResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetResultSetMetadata_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetResultSetMetadata_result)
GetResultSetMetadata_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetResultSetMetadataResp, None], None, ),  # 0
)


class FetchResults_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TFetchResultsReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FetchResults_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FetchResults_args)
FetchResults_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TFetchResultsReq, None], None, ),  # 1
)


class FetchResults_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TFetchResultsResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FetchResults_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FetchResults_result)
FetchResults_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TFetchResultsResp, None], None, ),  # 0
)


class GetDelegationToken_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TGetDelegationTokenReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetDelegationToken_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetDelegationToken_args)
GetDelegationToken_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TGetDelegationTokenReq, None], None, ),  # 1
)


class GetDelegationToken_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TGetDelegationTokenResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetDelegationToken_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetDelegationToken_result)
GetDelegationToken_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TGetDelegationTokenResp, None], None, ),  # 0
)


class CancelDelegationToken_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TCancelDelegationTokenReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CancelDelegationToken_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CancelDelegationToken_args)
CancelDelegationToken_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TCancelDelegationTokenReq, None], None, ),  # 1
)


class CancelDelegationToken_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TCancelDelegationTokenResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CancelDelegationToken_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CancelDelegationToken_result)
CancelDelegationToken_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TCancelDelegationTokenResp, None], None, ),  # 0
)


class RenewDelegationToken_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TRenewDelegationTokenReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RenewDelegationToken_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RenewDelegationToken_args)
RenewDelegationToken_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TRenewDelegationTokenReq, None], None, ),  # 1
)


class RenewDelegationToken_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TRenewDelegationTokenResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RenewDelegationToken_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RenewDelegationToken_result)
RenewDelegationToken_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TRenewDelegationTokenResp, None], None, ),  # 0
)


class GetLoadInformation_args(object):
    """
    Attributes:
     - req

    """


    def __init__(self, req=None,):
        self.req = req

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = TDBSqlGetLoadInformationReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLoadInformation_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetLoadInformation_args)
GetLoadInformation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [TDBSqlGetLoadInformationReq, None], None, ),  # 1
)


class GetLoadInformation_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TDBSqlGetLoadInformationResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLoadInformation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetLoadInformation_result)
GetLoadInformation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TDBSqlGetLoadInformationResp, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs
__all__ = ['ttypes', 'constants', 'TCLIService']
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
from .ttypes import *
PRIMITIVE_TYPES = set((
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
))
COMPLEX_TYPES = set((
        10,
        11,
        12,
        13,
        14,
))
COLLECTION_TYPES = set((
        10,
        11,
))
TYPE_NAMES = {
        10: "ARRAY",
        4: "BIGINT",
        9: "BINARY",
        0: "BOOLEAN",
        19: "CHAR",
        17: "DATE",
        15: "DECIMAL",
        6: "DOUBLE",
        5: "FLOAT",
        21: "INTERVAL_DAY_TIME",
        20: "INTERVAL_YEAR_MONTH",
        3: "INT",
        11: "MAP",
        16: "NULL",
        2: "SMALLINT",
        7: "STRING",
        12: "STRUCT",
        8: "TIMESTAMP",
        1: "TINYINT",
        13: "UNIONTYPE",
        18: "VARCHAR",
}
CHARACTER_MAXIMUM_LENGTH = "characterMaximumLength"
PRECISION = "precision"
SCALE = "scale"
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TProtocolVersion(object):
    __HIVE_JDBC_WORKAROUND = -7
    __TEST_PROTOCOL_VERSION = 65281
    HIVE_CLI_SERVICE_PROTOCOL_V1 = 0
    HIVE_CLI_SERVICE_PROTOCOL_V2 = 1
    HIVE_CLI_SERVICE_PROTOCOL_V3 = 2
    HIVE_CLI_SERVICE_PROTOCOL_V4 = 3
    HIVE_CLI_SERVICE_PROTOCOL_V5 = 4
    HIVE_CLI_SERVICE_PROTOCOL_V6 = 5
    HIVE_CLI_SERVICE_PROTOCOL_V7 = 6
    HIVE_CLI_SERVICE_PROTOCOL_V8 = 7
    HIVE_CLI_SERVICE_PROTOCOL_V9 = 8
    HIVE_CLI_SERVICE_PROTOCOL_V10 = 9
    SPARK_CLI_SERVICE_PROTOCOL_V1 = 42241
    SPARK_CLI_SERVICE_PROTOCOL_V2 = 42242
    SPARK_CLI_SERVICE_PROTOCOL_V3 = 42243
    SPARK_CLI_SERVICE_PROTOCOL_V4 = 42244
    SPARK_CLI_SERVICE_PROTOCOL_V5 = 42245
    SPARK_CLI_SERVICE_PROTOCOL_V6 = 42246
    SPARK_CLI_SERVICE_PROTOCOL_V7 = 42247

    _VALUES_TO_NAMES = {
        -7: "__HIVE_JDBC_WORKAROUND",
        65281: "__TEST_PROTOCOL_VERSION",
        0: "HIVE_CLI_SERVICE_PROTOCOL_V1",
        1: "HIVE_CLI_SERVICE_PROTOCOL_V2",
        2: "HIVE_CLI_SERVICE_PROTOCOL_V3",
        3: "HIVE_CLI_SERVICE_PROTOCOL_V4",
        4: "HIVE_CLI_SERVICE_PROTOCOL_V5",
        5: "HIVE_CLI_SERVICE_PROTOCOL_V6",
        6: "HIVE_CLI_SERVICE_PROTOCOL_V7",
        7: "HIVE_CLI_SERVICE_PROTOCOL_V8",
        8: "HIVE_CLI_SERVICE_PROTOCOL_V9",
        9: "HIVE_CLI_SERVICE_PROTOCOL_V10",
        42241: "SPARK_CLI_SERVICE_PROTOCOL_V1",
        42242: "SPARK_CLI_SERVICE_PROTOCOL_V2",
        42243: "SPARK_CLI_SERVICE_PROTOCOL_V3",
        42244: "SPARK_CLI_SERVICE_PROTOCOL_V4",
        42245: "SPARK_CLI_SERVICE_PROTOCOL_V5",
        42246: "SPARK_CLI_SERVICE_PROTOCOL_V6",
        42247: "SPARK_CLI_SERVICE_PROTOCOL_V7",
    }

    _NAMES_TO_VALUES = {
        "__HIVE_JDBC_WORKAROUND": -7,
        "__TEST_PROTOCOL_VERSION": 65281,
        "HIVE_CLI_SERVICE_PROTOCOL_V1": 0,
        "HIVE_CLI_SERVICE_PROTOCOL_V2": 1,
        "HIVE_CLI_SERVICE_PROTOCOL_V3": 2,
        "HIVE_CLI_SERVICE_PROTOCOL_V4": 3,
        "HIVE_CLI_SERVICE_PROTOCOL_V5": 4,
        "HIVE_CLI_SERVICE_PROTOCOL_V6": 5,
        "HIVE_CLI_SERVICE_PROTOCOL_V7": 6,
        "HIVE_CLI_SERVICE_PROTOCOL_V8": 7,
        "HIVE_CLI_SERVICE_PROTOCOL_V9": 8,
        "HIVE_CLI_SERVICE_PROTOCOL_V10": 9,
        "SPARK_CLI_SERVICE_PROTOCOL_V1": 42241,
        "SPARK_CLI_SERVICE_PROTOCOL_V2": 42242,
        "SPARK_CLI_SERVICE_PROTOCOL_V3": 42243,
        "SPARK_CLI_SERVICE_PROTOCOL_V4": 42244,
        "SPARK_CLI_SERVICE_PROTOCOL_V5": 42245,
        "SPARK_CLI_SERVICE_PROTOCOL_V6": 42246,
        "SPARK_CLI_SERVICE_PROTOCOL_V7": 42247,
    }


class TTypeId(object):
    BOOLEAN_TYPE = 0
    TINYINT_TYPE = 1
    SMALLINT_TYPE = 2
    INT_TYPE = 3
    BIGINT_TYPE = 4
    FLOAT_TYPE = 5
    DOUBLE_TYPE = 6
    STRING_TYPE = 7
    TIMESTAMP_TYPE = 8
    BINARY_TYPE = 9
    ARRAY_TYPE = 10
    MAP_TYPE = 11
    STRUCT_TYPE = 12
    UNION_TYPE = 13
    USER_DEFINED_TYPE = 14
    DECIMAL_TYPE = 15
    NULL_TYPE = 16
    DATE_TYPE = 17
    VARCHAR_TYPE = 18
    CHAR_TYPE = 19
    INTERVAL_YEAR_MONTH_TYPE = 20
    INTERVAL_DAY_TIME_TYPE = 21

    _VALUES_TO_NAMES = {
        0: "BOOLEAN_TYPE",
        1: "TINYINT_TYPE",
        2: "SMALLINT_TYPE",
        3: "INT_TYPE",
        4: "BIGINT_TYPE",
        5: "FLOAT_TYPE",
        6: "DOUBLE_TYPE",
        7: "STRING_TYPE",
        8: "TIMESTAMP_TYPE",
        9: "BINARY_TYPE",
        10: "ARRAY_TYPE",
        11: "MAP_TYPE",
        12: "STRUCT_TYPE",
        13: "UNION_TYPE",
        14: "USER_DEFINED_TYPE",
        15: "DECIMAL_TYPE",
        16: "NULL_TYPE",
        17: "DATE_TYPE",
        18: "VARCHAR_TYPE",
        19: "CHAR_TYPE",
        20: "INTERVAL_YEAR_MONTH_TYPE",
        21: "INTERVAL_DAY_TIME_TYPE",
    }

    _NAMES_TO_VALUES = {
        "BOOLEAN_TYPE": 0,
        "TINYINT_TYPE": 1,
        "SMALLINT_TYPE": 2,
        "INT_TYPE": 3,
        "BIGINT_TYPE": 4,
        "FLOAT_TYPE": 5,
        "DOUBLE_TYPE": 6,
        "STRING_TYPE": 7,
        "TIMESTAMP_TYPE": 8,
        "BINARY_TYPE": 9,
        "ARRAY_TYPE": 10,
        "MAP_TYPE": 11,
        "STRUCT_TYPE": 12,
        "UNION_TYPE": 13,
        "USER_DEFINED_TYPE": 14,
        "DECIMAL_TYPE": 15,
        "NULL_TYPE": 16,
        "DATE_TYPE": 17,
        "VARCHAR_TYPE": 18,
        "CHAR_TYPE": 19,
        "INTERVAL_YEAR_MONTH_TYPE": 20,
        "INTERVAL_DAY_TIME_TYPE": 21,
    }


class TSparkRowSetType(object):
    ARROW_BASED_SET = 0
    COLUMN_BASED_SET = 1
    ROW_BASED_SET = 2
    URL_BASED_SET = 3

    _VALUES_TO_NAMES = {
        0: "ARROW_BASED_SET",
        1: "COLUMN_BASED_SET",
        2: "ROW_BASED_SET",
        3: "URL_BASED_SET",
    }

    _NAMES_TO_VALUES = {
        "ARROW_BASED_SET": 0,
        "COLUMN_BASED_SET": 1,
        "ROW_BASED_SET": 2,
        "URL_BASED_SET": 3,
    }


class TOperationIdempotencyType(object):
    UNKNOWN = 0
    NON_IDEMPOTENT = 1
    IDEMPOTENT = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "NON_IDEMPOTENT",
        2: "IDEMPOTENT",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "NON_IDEMPOTENT": 1,
        "IDEMPOTENT": 2,
    }


class TOperationTimeoutLevel(object):
    CLUSTER = 0
    SESSION = 1

    _VALUES_TO_NAMES = {
        0: "CLUSTER",
        1: "SESSION",
    }

    _NAMES_TO_VALUES = {
        "CLUSTER": 0,
        "SESSION": 1,
    }


class TStatusCode(object):
    SUCCESS_STATUS = 0
    SUCCESS_WITH_INFO_STATUS = 1
    STILL_EXECUTING_STATUS = 2
    ERROR_STATUS = 3
    INVALID_HANDLE_STATUS = 4

    _VALUES_TO_NAMES = {
        0: "SUCCESS_STATUS",
        1: "SUCCESS_WITH_INFO_STATUS",
        2: "STILL_EXECUTING_STATUS",
        3: "ERROR_STATUS",
        4: "INVALID_HANDLE_STATUS",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS_STATUS": 0,
        "SUCCESS_WITH_INFO_STATUS": 1,
        "STILL_EXECUTING_STATUS": 2,
        "ERROR_STATUS": 3,
        "INVALID_HANDLE_STATUS": 4,
    }


class TOperationState(object):
    INITIALIZED_STATE = 0
    RUNNING_STATE = 1
    FINISHED_STATE = 2
    CANCELED_STATE = 3
    CLOSED_STATE = 4
    ERROR_STATE = 5
    UKNOWN_STATE = 6
    PENDING_STATE = 7
    TIMEDOUT_STATE = 8

    _VALUES_TO_NAMES = {
        0: "INITIALIZED_STATE",
        1: "RUNNING_STATE",
        2: "FINISHED_STATE",
        3: "CANCELED_STATE",
        4: "CLOSED_STATE",
        5: "ERROR_STATE",
        6: "UKNOWN_STATE",
        7: "PENDING_STATE",
        8: "TIMEDOUT_STATE",
    }

    _NAMES_TO_VALUES = {
        "INITIALIZED_STATE": 0,
        "RUNNING_STATE": 1,
        "FINISHED_STATE": 2,
        "CANCELED_STATE": 3,
        "CLOSED_STATE": 4,
        "ERROR_STATE": 5,
        "UKNOWN_STATE": 6,
        "PENDING_STATE": 7,
        "TIMEDOUT_STATE": 8,
    }


class TOperationType(object):
    EXECUTE_STATEMENT = 0
    GET_TYPE_INFO = 1
    GET_CATALOGS = 2
    GET_SCHEMAS = 3
    GET_TABLES = 4
    GET_TABLE_TYPES = 5
    GET_COLUMNS = 6
    GET_FUNCTIONS = 7
    UNKNOWN = 8

    _VALUES_TO_NAMES = {
        0: "EXECUTE_STATEMENT",
        1: "GET_TYPE_INFO",
        2: "GET_CATALOGS",
        3: "GET_SCHEMAS",
        4: "GET_TABLES",
        5: "GET_TABLE_TYPES",
        6: "GET_COLUMNS",
        7: "GET_FUNCTIONS",
        8: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "EXECUTE_STATEMENT": 0,
        "GET_TYPE_INFO": 1,
        "GET_CATALOGS": 2,
        "GET_SCHEMAS": 3,
        "GET_TABLES": 4,
        "GET_TABLE_TYPES": 5,
        "GET_COLUMNS": 6,
        "GET_FUNCTIONS": 7,
        "UNKNOWN": 8,
    }


class TGetInfoType(object):
    CLI_MAX_DRIVER_CONNECTIONS = 0
    CLI_MAX_CONCURRENT_ACTIVITIES = 1
    CLI_DATA_SOURCE_NAME = 2
    CLI_FETCH_DIRECTION = 8
    CLI_SERVER_NAME = 13
    CLI_SEARCH_PATTERN_ESCAPE = 14
    CLI_DBMS_NAME = 17
    CLI_DBMS_VER = 18
    CLI_ACCESSIBLE_TABLES = 19
    CLI_ACCESSIBLE_PROCEDURES = 20
    CLI_CURSOR_COMMIT_BEHAVIOR = 23
    CLI_DATA_SOURCE_READ_ONLY = 25
    CLI_DEFAULT_TXN_ISOLATION = 26
    CLI_IDENTIFIER_CASE = 28
    CLI_IDENTIFIER_QUOTE_CHAR = 29
    CLI_MAX_COLUMN_NAME_LEN = 30
    CLI_MAX_CURSOR_NAME_LEN = 31
    CLI_MAX_SCHEMA_NAME_LEN = 32
    CLI_MAX_CATALOG_NAME_LEN = 34
    CLI_MAX_TABLE_NAME_LEN = 35
    CLI_SCROLL_CONCURRENCY = 43
    CLI_TXN_CAPABLE = 46
    CLI_USER_NAME = 47
    CLI_TXN_ISOLATION_OPTION = 72
    CLI_INTEGRITY = 73
    CLI_GETDATA_EXTENSIONS = 81
    CLI_NULL_COLLATION = 85
    CLI_ALTER_TABLE = 86
    CLI_ORDER_BY_COLUMNS_IN_SELECT = 90
    CLI_SPECIAL_CHARACTERS = 94
    CLI_MAX_COLUMNS_IN_GROUP_BY = 97
    CLI_MAX_COLUMNS_IN_INDEX = 98
    CLI_MAX_COLUMNS_IN_ORDER_BY = 99
    CLI_MAX_COLUMNS_IN_SELECT = 100
    CLI_MAX_COLUMNS_IN_TABLE = 101
    CLI_MAX_INDEX_SIZE = 102
    CLI_MAX_ROW_SIZE = 104
    CLI_MAX_STATEMENT_LEN = 105
    CLI_MAX_TABLES_IN_SELECT = 106
    CLI_MAX_USER_NAME_LEN = 107
    CLI_OJ_CAPABILITIES = 115
    CLI_XOPEN_CLI_YEAR = 10000
    CLI_CURSOR_SENSITIVITY = 10001
    CLI_DESCRIBE_PARAMETER = 10002
    CLI_CATALOG_NAME = 10003
    CLI_COLLATION_SEQ = 10004
    CLI_MAX_IDENTIFIER_LEN = 10005

    _VALUES_TO_NAMES = {
        0: "CLI_MAX_DRIVER_CONNECTIONS",
        1: "CLI_MAX_CONCURRENT_ACTIVITIES",
        2: "CLI_DATA_SOURCE_NAME",
        8: "CLI_FETCH_DIRECTION",
        13: "CLI_SERVER_NAME",
        14: "CLI_SEARCH_PATTERN_ESCAPE",
        17: "CLI_DBMS_NAME",
        18: "CLI_DBMS_VER",
        19: "CLI_ACCESSIBLE_TABLES",
        20: "CLI_ACCESSIBLE_PROCEDURES",
        23: "CLI_CURSOR_COMMIT_BEHAVIOR",
        25: "CLI_DATA_SOURCE_READ_ONLY",
        26: "CLI_DEFAULT_TXN_ISOLATION",
        28: "CLI_IDENTIFIER_CASE",
        29: "CLI_IDENTIFIER_QUOTE_CHAR",
        30: "CLI_MAX_COLUMN_NAME_LEN",
        31: "CLI_MAX_CURSOR_NAME_LEN",
        32: "CLI_MAX_SCHEMA_NAME_LEN",
        34: "CLI_MAX_CATALOG_NAME_LEN",
        35: "CLI_MAX_TABLE_NAME_LEN",
        43: "CLI_SCROLL_CONCURRENCY",
        46: "CLI_TXN_CAPABLE",
        47: "CLI_USER_NAME",
        72: "CLI_TXN_ISOLATION_OPTION",
        73: "CLI_INTEGRITY",
        81: "CLI_GETDATA_EXTENSIONS",
        85: "CLI_NULL_COLLATION",
        86: "CLI_ALTER_TABLE",
        90: "CLI_ORDER_BY_COLUMNS_IN_SELECT",
        94: "CLI_SPECIAL_CHARACTERS",
        97: "CLI_MAX_COLUMNS_IN_GROUP_BY",
        98: "CLI_MAX_COLUMNS_IN_INDEX",
        99: "CLI_MAX_COLUMNS_IN_ORDER_BY",
        100: "CLI_MAX_COLUMNS_IN_SELECT",
        101: "CLI_MAX_COLUMNS_IN_TABLE",
        102: "CLI_MAX_INDEX_SIZE",
        104: "CLI_MAX_ROW_SIZE",
        105: "CLI_MAX_STATEMENT_LEN",
        106: "CLI_MAX_TABLES_IN_SELECT",
        107: "CLI_MAX_USER_NAME_LEN",
        115: "CLI_OJ_CAPABILITIES",
        10000: "CLI_XOPEN_CLI_YEAR",
        10001: "CLI_CURSOR_SENSITIVITY",
        10002: "CLI_DESCRIBE_PARAMETER",
        10003: "CLI_CATALOG_NAME",
        10004: "CLI_COLLATION_SEQ",
        10005: "CLI_MAX_IDENTIFIER_LEN",
    }

    _NAMES_TO_VALUES = {
        "CLI_MAX_DRIVER_CONNECTIONS": 0,
        "CLI_MAX_CONCURRENT_ACTIVITIES": 1,
        "CLI_DATA_SOURCE_NAME": 2,
        "CLI_FETCH_DIRECTION": 8,
        "CLI_SERVER_NAME": 13,
        "CLI_SEARCH_PATTERN_ESCAPE": 14,
        "CLI_DBMS_NAME": 17,
        "CLI_DBMS_VER": 18,
        "CLI_ACCESSIBLE_TABLES": 19,
        "CLI_ACCESSIBLE_PROCEDURES": 20,
        "CLI_CURSOR_COMMIT_BEHAVIOR": 23,
        "CLI_DATA_SOURCE_READ_ONLY": 25,
        "CLI_DEFAULT_TXN_ISOLATION": 26,
        "CLI_IDENTIFIER_CASE": 28,
        "CLI_IDENTIFIER_QUOTE_CHAR": 29,
        "CLI_MAX_COLUMN_NAME_LEN": 30,
        "CLI_MAX_CURSOR_NAME_LEN": 31,
        "CLI_MAX_SCHEMA_NAME_LEN": 32,
        "CLI_MAX_CATALOG_NAME_LEN": 34,
        "CLI_MAX_TABLE_NAME_LEN": 35,
        "CLI_SCROLL_CONCURRENCY": 43,
        "CLI_TXN_CAPABLE": 46,
        "CLI_USER_NAME": 47,
        "CLI_TXN_ISOLATION_OPTION": 72,
        "CLI_INTEGRITY": 73,
        "CLI_GETDATA_EXTENSIONS": 81,
        "CLI_NULL_COLLATION": 85,
        "CLI_ALTER_TABLE": 86,
        "CLI_ORDER_BY_COLUMNS_IN_SELECT": 90,
        "CLI_SPECIAL_CHARACTERS": 94,
        "CLI_MAX_COLUMNS_IN_GROUP_BY": 97,
        "CLI_MAX_COLUMNS_IN_INDEX": 98,
        "CLI_MAX_COLUMNS_IN_ORDER_BY": 99,
        "CLI_MAX_COLUMNS_IN_SELECT": 100,
        "CLI_MAX_COLUMNS_IN_TABLE": 101,
        "CLI_MAX_INDEX_SIZE": 102,
        "CLI_MAX_ROW_SIZE": 104,
        "CLI_MAX_STATEMENT_LEN": 105,
        "CLI_MAX_TABLES_IN_SELECT": 106,
        "CLI_MAX_USER_NAME_LEN": 107,
        "CLI_OJ_CAPABILITIES": 115,
        "CLI_XOPEN_CLI_YEAR": 10000,
        "CLI_CURSOR_SENSITIVITY": 10001,
        "CLI_DESCRIBE_PARAMETER": 10002,
        "CLI_CATALOG_NAME": 10003,
        "CLI_COLLATION_SEQ": 10004,
        "CLI_MAX_IDENTIFIER_LEN": 10005,
    }


class TResultPersistenceMode(object):
    ONLY_LARGE_RESULTS = 0
    ALL_QUERY_RESULTS = 1
    ALL_RESULTS = 2

    _VALUES_TO_NAMES = {
        0: "ONLY_LARGE_RESULTS",
        1: "ALL_QUERY_RESULTS",
        2: "ALL_RESULTS",
    }

    _NAMES_TO_VALUES = {
        "ONLY_LARGE_RESULTS": 0,
        "ALL_QUERY_RESULTS": 1,
        "ALL_RESULTS": 2,
    }


class TCacheLookupResult(object):
    CACHE_INELIGIBLE = 0
    LOCAL_CACHE_HIT = 1
    REMOTE_CACHE_HIT = 2
    CACHE_MISS = 3

    _VALUES_TO_NAMES = {
        0: "CACHE_INELIGIBLE",
        1: "LOCAL_CACHE_HIT",
        2: "REMOTE_CACHE_HIT",
        3: "CACHE_MISS",
    }

    _NAMES_TO_VALUES = {
        "CACHE_INELIGIBLE": 0,
        "LOCAL_CACHE_HIT": 1,
        "REMOTE_CACHE_HIT": 2,
        "CACHE_MISS": 3,
    }


class TCloudFetchDisabledReason(object):
    ARROW_SUPPORT = 0
    CLOUD_FETCH_SUPPORT = 1
    PROTOCOL_VERSION = 2
    REGION_SUPPORT = 3
    BLOCKLISTED_OPERATION = 4
    SMALL_RESULT_SIZE = 5
    CUSTOMER_STORAGE_SUPPORT = 6
    UNKNOWN = 7

    _VALUES_TO_NAMES = {
        0: "ARROW_SUPPORT",
        1: "CLOUD_FETCH_SUPPORT",
        2: "PROTOCOL_VERSION",
        3: "REGION_SUPPORT",
        4: "BLOCKLISTED_OPERATION",
        5: "SMALL_RESULT_SIZE",
        6: "CUSTOMER_STORAGE_SUPPORT",
        7: "UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "ARROW_SUPPORT": 0,
        "CLOUD_FETCH_SUPPORT": 1,
        "PROTOCOL_VERSION": 2,
        "REGION_SUPPORT": 3,
        "BLOCKLISTED_OPERATION": 4,
        "SMALL_RESULT_SIZE": 5,
        "CUSTOMER_STORAGE_SUPPORT": 6,
        "UNKNOWN": 7,
    }


class TFetchOrientation(object):
    FETCH_NEXT = 0
    FETCH_PRIOR = 1
    FETCH_RELATIVE = 2
    FETCH_ABSOLUTE = 3
    FETCH_FIRST = 4
    FETCH_LAST = 5

    _VALUES_TO_NAMES = {
        0: "FETCH_NEXT",
        1: "FETCH_PRIOR",
        2: "FETCH_RELATIVE",
        3: "FETCH_ABSOLUTE",
        4: "FETCH_FIRST",
        5: "FETCH_LAST",
    }

    _NAMES_TO_VALUES = {
        "FETCH_NEXT": 0,
        "FETCH_PRIOR": 1,
        "FETCH_RELATIVE": 2,
        "FETCH_ABSOLUTE": 3,
        "FETCH_FIRST": 4,
        "FETCH_LAST": 5,
    }


class TJobExecutionStatus(object):
    IN_PROGRESS = 0
    COMPLETE = 1
    NOT_AVAILABLE = 2

    _VALUES_TO_NAMES = {
        0: "IN_PROGRESS",
        1: "COMPLETE",
        2: "NOT_AVAILABLE",
    }

    _NAMES_TO_VALUES = {
        "IN_PROGRESS": 0,
        "COMPLETE": 1,
        "NOT_AVAILABLE": 2,
    }


class TTypeQualifierValue(object):
    """
    Attributes:
     - i32Value
     - stringValue

    """


    def __init__(self, i32Value=None, stringValue=None,):
        self.i32Value = i32Value
        self.stringValue = stringValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.i32Value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeQualifierValue')
        if self.i32Value is not None:
            oprot.writeFieldBegin('i32Value', TType.I32, 1)
            oprot.writeI32(self.i32Value)
            oprot.writeFieldEnd()
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 2)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTypeQualifiers(object):
    """
    Attributes:
     - qualifiers

    """


    def __init__(self, qualifiers=None,):
        self.qualifiers = qualifiers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.qualifiers = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = TTypeQualifierValue()
                        _val6.read(iprot)
                        self.qualifiers[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeQualifiers')
        if self.qualifiers is not None:
            oprot.writeFieldBegin('qualifiers', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.qualifiers))
            for kiter7, viter8 in self.qualifiers.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.qualifiers is None:
            raise TProtocolException(message='Required field qualifiers is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPrimitiveTypeEntry(object):
    """
    Attributes:
     - type
     - typeQualifiers

    """


    def __init__(self, type=None, typeQualifiers=None,):
        self.type = type
        self.typeQualifiers = typeQualifiers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.typeQualifiers = TTypeQualifiers()
                    self.typeQualifiers.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TPrimitiveTypeEntry')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.typeQualifiers is not None:
            oprot.writeFieldBegin('typeQualifiers', TType.STRUCT, 2)
            self.typeQualifiers.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TArrayTypeEntry(object):
    """
    Attributes:
     - objectTypePtr

    """


    def __init__(self, objectTypePtr=None,):
        self.objectTypePtr = objectTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objectTypePtr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TArrayTypeEntry')
        if self.objectTypePtr is not None:
            oprot.writeFieldBegin('objectTypePtr', TType.I32, 1)
            oprot.writeI32(self.objectTypePtr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.objectTypePtr is None:
            raise TProtocolException(message='Required field objectTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMapTypeEntry(object):
    """
    Attributes:
     - keyTypePtr
     - valueTypePtr

    """


    def __init__(self, keyTypePtr=None, valueTypePtr=None,):
        self.keyTypePtr = keyTypePtr
        self.valueTypePtr = valueTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.keyTypePtr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.valueTypePtr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TMapTypeEntry')
        if self.keyTypePtr is not None:
            oprot.writeFieldBegin('keyTypePtr', TType.I32, 1)
            oprot.writeI32(self.keyTypePtr)
            oprot.writeFieldEnd()
        if self.valueTypePtr is not None:
            oprot.writeFieldBegin('valueTypePtr', TType.I32, 2)
            oprot.writeI32(self.valueTypePtr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.keyTypePtr is None:
            raise TProtocolException(message='Required field keyTypePtr is unset!')
        if self.valueTypePtr is None:
            raise TProtocolException(message='Required field valueTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStructTypeEntry(object):
    """
    Attributes:
     - nameToTypePtr

    """


    def __init__(self, nameToTypePtr=None,):
        self.nameToTypePtr = nameToTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.nameToTypePtr = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readI32()
                        self.nameToTypePtr[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStructTypeEntry')
        if self.nameToTypePtr is not None:
            oprot.writeFieldBegin('nameToTypePtr', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.nameToTypePtr))
            for kiter16, viter17 in self.nameToTypePtr.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeI32(viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nameToTypePtr is None:
            raise TProtocolException(message='Required field nameToTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TUnionTypeEntry(object):
    """
    Attributes:
     - nameToTypePtr

    """


    def __init__(self, nameToTypePtr=None,):
        self.nameToTypePtr = nameToTypePtr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.nameToTypePtr = {}
                    (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                    for _i22 in range(_size18):
                        _key23 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val24 = iprot.readI32()
                        self.nameToTypePtr[_key23] = _val24
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TUnionTypeEntry')
        if self.nameToTypePtr is not None:
            oprot.writeFieldBegin('nameToTypePtr', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.nameToTypePtr))
            for kiter25, viter26 in self.nameToTypePtr.items():
                oprot.writeString(kiter25.encode('utf-8') if sys.version_info[0] == 2 else kiter25)
                oprot.writeI32(viter26)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nameToTypePtr is None:
            raise TProtocolException(message='Required field nameToTypePtr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TUserDefinedTypeEntry(object):
    """
    Attributes:
     - typeClassName

    """


    def __init__(self, typeClassName=None,):
        self.typeClassName = typeClassName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.typeClassName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TUserDefinedTypeEntry')
        if self.typeClassName is not None:
            oprot.writeFieldBegin('typeClassName', TType.STRING, 1)
            oprot.writeString(self.typeClassName.encode('utf-8') if sys.version_info[0] == 2 else self.typeClassName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.typeClassName is None:
            raise TProtocolException(message='Required field typeClassName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTypeEntry(object):
    """
    Attributes:
     - primitiveEntry
     - arrayEntry
     - mapEntry
     - structEntry
     - unionEntry
     - userDefinedTypeEntry

    """


    def __init__(self, primitiveEntry=None, arrayEntry=None, mapEntry=None, structEntry=None, unionEntry=None, userDefinedTypeEntry=None,):
        self.primitiveEntry = primitiveEntry
        self.arrayEntry = arrayEntry
        self.mapEntry = mapEntry
        self.structEntry = structEntry
        self.unionEntry = unionEntry
        self.userDefinedTypeEntry = userDefinedTypeEntry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.primitiveEntry = TPrimitiveTypeEntry()
                    self.primitiveEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.arrayEntry = TArrayTypeEntry()
                    self.arrayEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mapEntry = TMapTypeEntry()
                    self.mapEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.structEntry = TStructTypeEntry()
                    self.structEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.unionEntry = TUnionTypeEntry()
                    self.unionEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.userDefinedTypeEntry = TUserDefinedTypeEntry()
                    self.userDefinedTypeEntry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeEntry')
        if self.primitiveEntry is not None:
            oprot.writeFieldBegin('primitiveEntry', TType.STRUCT, 1)
            self.primitiveEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.arrayEntry is not None:
            oprot.writeFieldBegin('arrayEntry', TType.STRUCT, 2)
            self.arrayEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.mapEntry is not None:
            oprot.writeFieldBegin('mapEntry', TType.STRUCT, 3)
            self.mapEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.structEntry is not None:
            oprot.writeFieldBegin('structEntry', TType.STRUCT, 4)
            self.structEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.unionEntry is not None:
            oprot.writeFieldBegin('unionEntry', TType.STRUCT, 5)
            self.unionEntry.write(oprot)
            oprot.writeFieldEnd()
        if self.userDefinedTypeEntry is not None:
            oprot.writeFieldBegin('userDefinedTypeEntry', TType.STRUCT, 6)
            self.userDefinedTypeEntry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTypeDesc(object):
    """
    Attributes:
     - types

    """


    def __init__(self, types=None,):
        self.types = types

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.types = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = TTypeEntry()
                        _elem32.read(iprot)
                        self.types.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTypeDesc')
        if self.types is not None:
            oprot.writeFieldBegin('types', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.types))
            for iter33 in self.types:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.types is None:
            raise TProtocolException(message='Required field types is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TColumnDesc(object):
    """
    Attributes:
     - columnName
     - typeDesc
     - position
     - comment

    """


    def __init__(self, columnName=None, typeDesc=None, position=None, comment=None,):
        self.columnName = columnName
        self.typeDesc = typeDesc
        self.position = position
        self.comment = comment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.typeDesc = TTypeDesc()
                    self.typeDesc.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.position = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TColumnDesc')
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 1)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        if self.typeDesc is not None:
            oprot.writeFieldBegin('typeDesc', TType.STRUCT, 2)
            self.typeDesc.write(oprot)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.I32, 3)
            oprot.writeI32(self.position)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 4)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.columnName is None:
            raise TProtocolException(message='Required field columnName is unset!')
        if self.typeDesc is None:
            raise TProtocolException(message='Required field typeDesc is unset!')
        if self.position is None:
            raise TProtocolException(message='Required field position is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTableSchema(object):
    """
    Attributes:
     - columns

    """


    def __init__(self, columns=None,):
        self.columns = columns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = TColumnDesc()
                        _elem39.read(iprot)
                        self.columns.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTableSchema')
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter40 in self.columns:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.columns is None:
            raise TProtocolException(message='Required field columns is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBoolValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBoolValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 1)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TByteValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.value = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TByteValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BYTE, 1)
            oprot.writeByte(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI16Value(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.value = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI16Value')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I16, 1)
            oprot.writeI16(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI32Value(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI32Value')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 1)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI64Value(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI64Value')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I64, 1)
            oprot.writeI64(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDoubleValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDoubleValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 1)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStringValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStringValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TColumnValue(object):
    """
    Attributes:
     - boolVal
     - byteVal
     - i16Val
     - i32Val
     - i64Val
     - doubleVal
     - stringVal

    """


    def __init__(self, boolVal=None, byteVal=None, i16Val=None, i32Val=None, i64Val=None, doubleVal=None, stringVal=None,):
        self.boolVal = boolVal
        self.byteVal = byteVal
        self.i16Val = i16Val
        self.i32Val = i32Val
        self.i64Val = i64Val
        self.doubleVal = doubleVal
        self.stringVal = stringVal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.boolVal = TBoolValue()
                    self.boolVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.byteVal = TByteValue()
                    self.byteVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.i16Val = TI16Value()
                    self.i16Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.i32Val = TI32Value()
                    self.i32Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.i64Val = TI64Value()
                    self.i64Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.doubleVal = TDoubleValue()
                    self.doubleVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.stringVal = TStringValue()
                    self.stringVal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TColumnValue')
        if self.boolVal is not None:
            oprot.writeFieldBegin('boolVal', TType.STRUCT, 1)
            self.boolVal.write(oprot)
            oprot.writeFieldEnd()
        if self.byteVal is not None:
            oprot.writeFieldBegin('byteVal', TType.STRUCT, 2)
            self.byteVal.write(oprot)
            oprot.writeFieldEnd()
        if self.i16Val is not None:
            oprot.writeFieldBegin('i16Val', TType.STRUCT, 3)
            self.i16Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i32Val is not None:
            oprot.writeFieldBegin('i32Val', TType.STRUCT, 4)
            self.i32Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i64Val is not None:
            oprot.writeFieldBegin('i64Val', TType.STRUCT, 5)
            self.i64Val.write(oprot)
            oprot.writeFieldEnd()
        if self.doubleVal is not None:
            oprot.writeFieldBegin('doubleVal', TType.STRUCT, 6)
            self.doubleVal.write(oprot)
            oprot.writeFieldEnd()
        if self.stringVal is not None:
            oprot.writeFieldBegin('stringVal', TType.STRUCT, 7)
            self.stringVal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRow(object):
    """
    Attributes:
     - colVals

    """


    def __init__(self, colVals=None,):
        self.colVals = colVals

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.colVals = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = TColumnValue()
                        _elem46.read(iprot)
                        self.colVals.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRow')
        if self.colVals is not None:
            oprot.writeFieldBegin('colVals', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.colVals))
            for iter47 in self.colVals:
                iter47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.colVals is None:
            raise TProtocolException(message='Required field colVals is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBoolColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readBool()
                        self.values.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBoolColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.BOOL, len(self.values))
            for iter54 in self.values:
                oprot.writeBool(iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TByteColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readByte()
                        self.values.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TByteColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.BYTE, len(self.values))
            for iter61 in self.values:
                oprot.writeByte(iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI16Column(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readI16()
                        self.values.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI16Column')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.I16, len(self.values))
            for iter68 in self.values:
                oprot.writeI16(iter68)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI32Column(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readI32()
                        self.values.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI32Column')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.values))
            for iter75 in self.values:
                oprot.writeI32(iter75)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TI64Column(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = iprot.readI64()
                        self.values.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TI64Column')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.values))
            for iter82 in self.values:
                oprot.writeI64(iter82)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDoubleColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readDouble()
                        self.values.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDoubleColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.values))
            for iter89 in self.values:
                oprot.writeDouble(iter89)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStringColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.values.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStringColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.values))
            for iter96 in self.values:
                oprot.writeString(iter96.encode('utf-8') if sys.version_info[0] == 2 else iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBinaryColumn(object):
    """
    Attributes:
     - values
     - nulls

    """


    def __init__(self, values=None, nulls=None,):
        self.values = values
        self.nulls = nulls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = iprot.readBinary()
                        self.values.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nulls = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBinaryColumn')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.values))
            for iter103 in self.values:
                oprot.writeBinary(iter103)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nulls is not None:
            oprot.writeFieldBegin('nulls', TType.STRING, 2)
            oprot.writeBinary(self.nulls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.values is None:
            raise TProtocolException(message='Required field values is unset!')
        if self.nulls is None:
            raise TProtocolException(message='Required field nulls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TColumn(object):
    """
    Attributes:
     - boolVal
     - byteVal
     - i16Val
     - i32Val
     - i64Val
     - doubleVal
     - stringVal
     - binaryVal

    """


    def __init__(self, boolVal=None, byteVal=None, i16Val=None, i32Val=None, i64Val=None, doubleVal=None, stringVal=None, binaryVal=None,):
        self.boolVal = boolVal
        self.byteVal = byteVal
        self.i16Val = i16Val
        self.i32Val = i32Val
        self.i64Val = i64Val
        self.doubleVal = doubleVal
        self.stringVal = stringVal
        self.binaryVal = binaryVal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.boolVal = TBoolColumn()
                    self.boolVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.byteVal = TByteColumn()
                    self.byteVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.i16Val = TI16Column()
                    self.i16Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.i32Val = TI32Column()
                    self.i32Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.i64Val = TI64Column()
                    self.i64Val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.doubleVal = TDoubleColumn()
                    self.doubleVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.stringVal = TStringColumn()
                    self.stringVal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.binaryVal = TBinaryColumn()
                    self.binaryVal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TColumn')
        if self.boolVal is not None:
            oprot.writeFieldBegin('boolVal', TType.STRUCT, 1)
            self.boolVal.write(oprot)
            oprot.writeFieldEnd()
        if self.byteVal is not None:
            oprot.writeFieldBegin('byteVal', TType.STRUCT, 2)
            self.byteVal.write(oprot)
            oprot.writeFieldEnd()
        if self.i16Val is not None:
            oprot.writeFieldBegin('i16Val', TType.STRUCT, 3)
            self.i16Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i32Val is not None:
            oprot.writeFieldBegin('i32Val', TType.STRUCT, 4)
            self.i32Val.write(oprot)
            oprot.writeFieldEnd()
        if self.i64Val is not None:
            oprot.writeFieldBegin('i64Val', TType.STRUCT, 5)
            self.i64Val.write(oprot)
            oprot.writeFieldEnd()
        if self.doubleVal is not None:
            oprot.writeFieldBegin('doubleVal', TType.STRUCT, 6)
            self.doubleVal.write(oprot)
            oprot.writeFieldEnd()
        if self.stringVal is not None:
            oprot.writeFieldBegin('stringVal', TType.STRUCT, 7)
            self.stringVal.write(oprot)
            oprot.writeFieldEnd()
        if self.binaryVal is not None:
            oprot.writeFieldBegin('binaryVal', TType.STRUCT, 8)
            self.binaryVal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkArrowBatch(object):
    """
    Attributes:
     - batch
     - rowCount

    """


    def __init__(self, batch=None, rowCount=None,):
        self.batch = batch
        self.rowCount = rowCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.batch = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.rowCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkArrowBatch')
        if self.batch is not None:
            oprot.writeFieldBegin('batch', TType.STRING, 1)
            oprot.writeBinary(self.batch)
            oprot.writeFieldEnd()
        if self.rowCount is not None:
            oprot.writeFieldBegin('rowCount', TType.I64, 2)
            oprot.writeI64(self.rowCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.batch is None:
            raise TProtocolException(message='Required field batch is unset!')
        if self.rowCount is None:
            raise TProtocolException(message='Required field rowCount is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkArrowResultLink(object):
    """
    Attributes:
     - fileLink
     - expiryTime
     - startRowOffset
     - rowCount
     - bytesNum

    """


    def __init__(self, fileLink=None, expiryTime=None, startRowOffset=None, rowCount=None, bytesNum=None,):
        self.fileLink = fileLink
        self.expiryTime = expiryTime
        self.startRowOffset = startRowOffset
        self.rowCount = rowCount
        self.bytesNum = bytesNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileLink = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.expiryTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.rowCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.bytesNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkArrowResultLink')
        if self.fileLink is not None:
            oprot.writeFieldBegin('fileLink', TType.STRING, 1)
            oprot.writeString(self.fileLink.encode('utf-8') if sys.version_info[0] == 2 else self.fileLink)
            oprot.writeFieldEnd()
        if self.expiryTime is not None:
            oprot.writeFieldBegin('expiryTime', TType.I64, 2)
            oprot.writeI64(self.expiryTime)
            oprot.writeFieldEnd()
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 3)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.rowCount is not None:
            oprot.writeFieldBegin('rowCount', TType.I64, 4)
            oprot.writeI64(self.rowCount)
            oprot.writeFieldEnd()
        if self.bytesNum is not None:
            oprot.writeFieldBegin('bytesNum', TType.I64, 5)
            oprot.writeI64(self.bytesNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fileLink is None:
            raise TProtocolException(message='Required field fileLink is unset!')
        if self.expiryTime is None:
            raise TProtocolException(message='Required field expiryTime is unset!')
        if self.startRowOffset is None:
            raise TProtocolException(message='Required field startRowOffset is unset!')
        if self.rowCount is None:
            raise TProtocolException(message='Required field rowCount is unset!')
        if self.bytesNum is None:
            raise TProtocolException(message='Required field bytesNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlCloudResultFile(object):
    """
    Attributes:
     - filePath
     - startRowOffset
     - rowCount
     - uncompressedBytes
     - compressedBytes

    """


    def __init__(self, filePath=None, startRowOffset=None, rowCount=None, uncompressedBytes=None, compressedBytes=None,):
        self.filePath = filePath
        self.startRowOffset = startRowOffset
        self.rowCount = rowCount
        self.uncompressedBytes = uncompressedBytes
        self.compressedBytes = compressedBytes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.filePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.rowCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.uncompressedBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.compressedBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlCloudResultFile')
        if self.filePath is not None:
            oprot.writeFieldBegin('filePath', TType.STRING, 1)
            oprot.writeString(self.filePath.encode('utf-8') if sys.version_info[0] == 2 else self.filePath)
            oprot.writeFieldEnd()
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 2)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.rowCount is not None:
            oprot.writeFieldBegin('rowCount', TType.I64, 3)
            oprot.writeI64(self.rowCount)
            oprot.writeFieldEnd()
        if self.uncompressedBytes is not None:
            oprot.writeFieldBegin('uncompressedBytes', TType.I64, 4)
            oprot.writeI64(self.uncompressedBytes)
            oprot.writeFieldEnd()
        if self.compressedBytes is not None:
            oprot.writeFieldBegin('compressedBytes', TType.I64, 5)
            oprot.writeI64(self.compressedBytes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.filePath is None:
            raise TProtocolException(message='Required field filePath is unset!')
        if self.startRowOffset is None:
            raise TProtocolException(message='Required field startRowOffset is unset!')
        if self.rowCount is None:
            raise TProtocolException(message='Required field rowCount is unset!')
        if self.uncompressedBytes is None:
            raise TProtocolException(message='Required field uncompressedBytes is unset!')
        if self.compressedBytes is None:
            raise TProtocolException(message='Required field compressedBytes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRowSet(object):
    """
    Attributes:
     - startRowOffset
     - rows
     - columns
     - binaryColumns
     - columnCount
     - arrowBatches
     - resultLinks

    """


    def __init__(self, startRowOffset=None, rows=None, columns=None, binaryColumns=None, columnCount=None, arrowBatches=None, resultLinks=None,):
        self.startRowOffset = startRowOffset
        self.rows = rows
        self.columns = columns
        self.binaryColumns = binaryColumns
        self.columnCount = columnCount
        self.arrowBatches = arrowBatches
        self.resultLinks = resultLinks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype107, _size104) = iprot.readListBegin()
                    for _i108 in range(_size104):
                        _elem109 = TRow()
                        _elem109.read(iprot)
                        self.rows.append(_elem109)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype113, _size110) = iprot.readListBegin()
                    for _i114 in range(_size110):
                        _elem115 = TColumn()
                        _elem115.read(iprot)
                        self.columns.append(_elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.binaryColumns = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.columnCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.LIST:
                    self.arrowBatches = []
                    (_etype119, _size116) = iprot.readListBegin()
                    for _i120 in range(_size116):
                        _elem121 = TSparkArrowBatch()
                        _elem121.read(iprot)
                        self.arrowBatches.append(_elem121)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.LIST:
                    self.resultLinks = []
                    (_etype125, _size122) = iprot.readListBegin()
                    for _i126 in range(_size122):
                        _elem127 = TSparkArrowResultLink()
                        _elem127.read(iprot)
                        self.resultLinks.append(_elem127)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRowSet')
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 1)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.rows))
            for iter128 in self.rows:
                iter128.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter129 in self.columns:
                iter129.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.binaryColumns is not None:
            oprot.writeFieldBegin('binaryColumns', TType.STRING, 4)
            oprot.writeBinary(self.binaryColumns)
            oprot.writeFieldEnd()
        if self.columnCount is not None:
            oprot.writeFieldBegin('columnCount', TType.I32, 5)
            oprot.writeI32(self.columnCount)
            oprot.writeFieldEnd()
        if self.arrowBatches is not None:
            oprot.writeFieldBegin('arrowBatches', TType.LIST, 1281)
            oprot.writeListBegin(TType.STRUCT, len(self.arrowBatches))
            for iter130 in self.arrowBatches:
                iter130.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.resultLinks is not None:
            oprot.writeFieldBegin('resultLinks', TType.LIST, 1282)
            oprot.writeListBegin(TType.STRUCT, len(self.resultLinks))
            for iter131 in self.resultLinks:
                iter131.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.startRowOffset is None:
            raise TProtocolException(message='Required field startRowOffset is unset!')
        if self.rows is None:
            raise TProtocolException(message='Required field rows is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlTempView(object):
    """
    Attributes:
     - name
     - sqlStatement
     - properties
     - viewSchema

    """


    def __init__(self, name=None, sqlStatement=None, properties=None, viewSchema=None,):
        self.name = name
        self.sqlStatement = sqlStatement
        self.properties = properties
        self.viewSchema = viewSchema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sqlStatement = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.properties = {}
                    (_ktype133, _vtype134, _size132) = iprot.readMapBegin()
                    for _i136 in range(_size132):
                        _key137 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val138 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.properties[_key137] = _val138
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.viewSchema = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlTempView')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.sqlStatement is not None:
            oprot.writeFieldBegin('sqlStatement', TType.STRING, 2)
            oprot.writeString(self.sqlStatement.encode('utf-8') if sys.version_info[0] == 2 else self.sqlStatement)
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.properties))
            for kiter139, viter140 in self.properties.items():
                oprot.writeString(kiter139.encode('utf-8') if sys.version_info[0] == 2 else kiter139)
                oprot.writeString(viter140.encode('utf-8') if sys.version_info[0] == 2 else viter140)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.viewSchema is not None:
            oprot.writeFieldBegin('viewSchema', TType.STRING, 4)
            oprot.writeString(self.viewSchema.encode('utf-8') if sys.version_info[0] == 2 else self.viewSchema)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlSessionCapabilities(object):
    """
    Attributes:
     - supportsMultipleCatalogs

    """


    def __init__(self, supportsMultipleCatalogs=None,):
        self.supportsMultipleCatalogs = supportsMultipleCatalogs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.supportsMultipleCatalogs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlSessionCapabilities')
        if self.supportsMultipleCatalogs is not None:
            oprot.writeFieldBegin('supportsMultipleCatalogs', TType.BOOL, 1)
            oprot.writeBool(self.supportsMultipleCatalogs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExpressionInfo(object):
    """
    Attributes:
     - className
     - usage
     - name
     - extended
     - db
     - arguments
     - examples
     - note
     - group
     - since
     - deprecated
     - source

    """


    def __init__(self, className=None, usage=None, name=None, extended=None, db=None, arguments=None, examples=None, note=None, group=None, since=None, deprecated=None, source=None,):
        self.className = className
        self.usage = usage
        self.name = name
        self.extended = extended
        self.db = db
        self.arguments = arguments
        self.examples = examples
        self.note = note
        self.group = group
        self.since = since
        self.deprecated = deprecated
        self.source = source

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.className = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.usage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.extended = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.db = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.arguments = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.examples = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.note = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.group = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.since = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.deprecated = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.source = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExpressionInfo')
        if self.className is not None:
            oprot.writeFieldBegin('className', TType.STRING, 1)
            oprot.writeString(self.className.encode('utf-8') if sys.version_info[0] == 2 else self.className)
            oprot.writeFieldEnd()
        if self.usage is not None:
            oprot.writeFieldBegin('usage', TType.STRING, 2)
            oprot.writeString(self.usage.encode('utf-8') if sys.version_info[0] == 2 else self.usage)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.extended is not None:
            oprot.writeFieldBegin('extended', TType.STRING, 4)
            oprot.writeString(self.extended.encode('utf-8') if sys.version_info[0] == 2 else self.extended)
            oprot.writeFieldEnd()
        if self.db is not None:
            oprot.writeFieldBegin('db', TType.STRING, 5)
            oprot.writeString(self.db.encode('utf-8') if sys.version_info[0] == 2 else self.db)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.STRING, 6)
            oprot.writeString(self.arguments.encode('utf-8') if sys.version_info[0] == 2 else self.arguments)
            oprot.writeFieldEnd()
        if self.examples is not None:
            oprot.writeFieldBegin('examples', TType.STRING, 7)
            oprot.writeString(self.examples.encode('utf-8') if sys.version_info[0] == 2 else self.examples)
            oprot.writeFieldEnd()
        if self.note is not None:
            oprot.writeFieldBegin('note', TType.STRING, 8)
            oprot.writeString(self.note.encode('utf-8') if sys.version_info[0] == 2 else self.note)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRING, 9)
            oprot.writeString(self.group.encode('utf-8') if sys.version_info[0] == 2 else self.group)
            oprot.writeFieldEnd()
        if self.since is not None:
            oprot.writeFieldBegin('since', TType.STRING, 10)
            oprot.writeString(self.since.encode('utf-8') if sys.version_info[0] == 2 else self.since)
            oprot.writeFieldEnd()
        if self.deprecated is not None:
            oprot.writeFieldBegin('deprecated', TType.STRING, 11)
            oprot.writeString(self.deprecated.encode('utf-8') if sys.version_info[0] == 2 else self.deprecated)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 12)
            oprot.writeString(self.source.encode('utf-8') if sys.version_info[0] == 2 else self.source)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlConfValue(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlConfValue')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlSessionConf(object):
    """
    Attributes:
     - confs
     - tempViews
     - currentDatabase
     - currentCatalog
     - sessionCapabilities
     - expressionsInfos
     - internalConfs

    """


    def __init__(self, confs=None, tempViews=None, currentDatabase=None, currentCatalog=None, sessionCapabilities=None, expressionsInfos=None, internalConfs=None,):
        self.confs = confs
        self.tempViews = tempViews
        self.currentDatabase = currentDatabase
        self.currentCatalog = currentCatalog
        self.sessionCapabilities = sessionCapabilities
        self.expressionsInfos = expressionsInfos
        self.internalConfs = internalConfs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.confs = {}
                    (_ktype142, _vtype143, _size141) = iprot.readMapBegin()
                    for _i145 in range(_size141):
                        _key146 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val147 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.confs[_key146] = _val147
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tempViews = []
                    (_etype151, _size148) = iprot.readListBegin()
                    for _i152 in range(_size148):
                        _elem153 = TDBSqlTempView()
                        _elem153.read(iprot)
                        self.tempViews.append(_elem153)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.currentDatabase = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.currentCatalog = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.sessionCapabilities = TDBSqlSessionCapabilities()
                    self.sessionCapabilities.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.expressionsInfos = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = TExpressionInfo()
                        _elem159.read(iprot)
                        self.expressionsInfos.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.internalConfs = {}
                    (_ktype161, _vtype162, _size160) = iprot.readMapBegin()
                    for _i164 in range(_size160):
                        _key165 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val166 = TDBSqlConfValue()
                        _val166.read(iprot)
                        self.internalConfs[_key165] = _val166
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlSessionConf')
        if self.confs is not None:
            oprot.writeFieldBegin('confs', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.confs))
            for kiter167, viter168 in self.confs.items():
                oprot.writeString(kiter167.encode('utf-8') if sys.version_info[0] == 2 else kiter167)
                oprot.writeString(viter168.encode('utf-8') if sys.version_info[0] == 2 else viter168)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tempViews is not None:
            oprot.writeFieldBegin('tempViews', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.tempViews))
            for iter169 in self.tempViews:
                iter169.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.currentDatabase is not None:
            oprot.writeFieldBegin('currentDatabase', TType.STRING, 3)
            oprot.writeString(self.currentDatabase.encode('utf-8') if sys.version_info[0] == 2 else self.currentDatabase)
            oprot.writeFieldEnd()
        if self.currentCatalog is not None:
            oprot.writeFieldBegin('currentCatalog', TType.STRING, 4)
            oprot.writeString(self.currentCatalog.encode('utf-8') if sys.version_info[0] == 2 else self.currentCatalog)
            oprot.writeFieldEnd()
        if self.sessionCapabilities is not None:
            oprot.writeFieldBegin('sessionCapabilities', TType.STRUCT, 5)
            self.sessionCapabilities.write(oprot)
            oprot.writeFieldEnd()
        if self.expressionsInfos is not None:
            oprot.writeFieldBegin('expressionsInfos', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.expressionsInfos))
            for iter170 in self.expressionsInfos:
                iter170.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalConfs is not None:
            oprot.writeFieldBegin('internalConfs', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.internalConfs))
            for kiter171, viter172 in self.internalConfs.items():
                oprot.writeString(kiter171.encode('utf-8') if sys.version_info[0] == 2 else kiter171)
                viter172.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStatus(object):
    """
    Attributes:
     - statusCode
     - infoMessages
     - sqlState
     - errorCode
     - errorMessage
     - displayMessage
     - responseValidation

    """


    def __init__(self, statusCode=None, infoMessages=None, sqlState=None, errorCode=None, errorMessage=None, displayMessage=None, responseValidation=None,):
        self.statusCode = statusCode
        self.infoMessages = infoMessages
        self.sqlState = sqlState
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.displayMessage = displayMessage
        self.responseValidation = responseValidation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.infoMessages = []
                    (_etype176, _size173) = iprot.readListBegin()
                    for _i177 in range(_size173):
                        _elem178 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.infoMessages.append(_elem178)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sqlState = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRING:
                    self.responseValidation = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStatus')
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 1)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.infoMessages is not None:
            oprot.writeFieldBegin('infoMessages', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.infoMessages))
            for iter179 in self.infoMessages:
                oprot.writeString(iter179.encode('utf-8') if sys.version_info[0] == 2 else iter179)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sqlState is not None:
            oprot.writeFieldBegin('sqlState', TType.STRING, 3)
            oprot.writeString(self.sqlState.encode('utf-8') if sys.version_info[0] == 2 else self.sqlState)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 4)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 5)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 6)
            oprot.writeString(self.displayMessage.encode('utf-8') if sys.version_info[0] == 2 else self.displayMessage)
            oprot.writeFieldEnd()
        if self.responseValidation is not None:
            oprot.writeFieldBegin('responseValidation', TType.STRING, 3329)
            oprot.writeBinary(self.responseValidation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TNamespace(object):
    """
    Attributes:
     - catalogName
     - schemaName

    """


    def __init__(self, catalogName=None, schemaName=None,):
        self.catalogName = catalogName
        self.schemaName = schemaName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TNamespace')
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 1)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 2)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class THandleIdentifier(object):
    """
    Attributes:
     - guid
     - secret
     - executionVersion

    """


    def __init__(self, guid=None, secret=None, executionVersion=None,):
        self.guid = guid
        self.secret = secret
        self.executionVersion = executionVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guid = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secret = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.I16:
                    self.executionVersion = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('THandleIdentifier')
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 1)
            oprot.writeBinary(self.guid)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 2)
            oprot.writeBinary(self.secret)
            oprot.writeFieldEnd()
        if self.executionVersion is not None:
            oprot.writeFieldBegin('executionVersion', TType.I16, 3329)
            oprot.writeI16(self.executionVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guid is None:
            raise TProtocolException(message='Required field guid is unset!')
        if self.secret is None:
            raise TProtocolException(message='Required field secret is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSessionHandle(object):
    """
    Attributes:
     - sessionId
     - serverProtocolVersion

    """


    def __init__(self, sessionId=None, serverProtocolVersion=None,):
        self.sessionId = sessionId
        self.serverProtocolVersion = serverProtocolVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionId = THandleIdentifier()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.I32:
                    self.serverProtocolVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSessionHandle')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 1)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        if self.serverProtocolVersion is not None:
            oprot.writeFieldBegin('serverProtocolVersion', TType.I32, 3329)
            oprot.writeI32(self.serverProtocolVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionId is None:
            raise TProtocolException(message='Required field sessionId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TOperationHandle(object):
    """
    Attributes:
     - operationId
     - operationType
     - hasResultSet
     - modifiedRowCount

    """


    def __init__(self, operationId=None, operationType=None, hasResultSet=None, modifiedRowCount=None,):
        self.operationId = operationId
        self.operationType = operationType
        self.hasResultSet = hasResultSet
        self.modifiedRowCount = modifiedRowCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasResultSet = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.modifiedRowCount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TOperationHandle')
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 1)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.operationType is not None:
            oprot.writeFieldBegin('operationType', TType.I32, 2)
            oprot.writeI32(self.operationType)
            oprot.writeFieldEnd()
        if self.hasResultSet is not None:
            oprot.writeFieldBegin('hasResultSet', TType.BOOL, 3)
            oprot.writeBool(self.hasResultSet)
            oprot.writeFieldEnd()
        if self.modifiedRowCount is not None:
            oprot.writeFieldBegin('modifiedRowCount', TType.DOUBLE, 4)
            oprot.writeDouble(self.modifiedRowCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationId is None:
            raise TProtocolException(message='Required field operationId is unset!')
        if self.operationType is None:
            raise TProtocolException(message='Required field operationType is unset!')
        if self.hasResultSet is None:
            raise TProtocolException(message='Required field hasResultSet is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TOpenSessionReq(object):
    """
    Attributes:
     - client_protocol
     - username
     - password
     - configuration
     - getInfos
     - client_protocol_i64
     - connectionProperties
     - initialNamespace
     - canUseMultipleCatalogs
     - sessionId

    """


    def __init__(self, client_protocol=    -7, username=None, password=None, configuration=None, getInfos=None, client_protocol_i64=None, connectionProperties=None, initialNamespace=None, canUseMultipleCatalogs=None, sessionId=None,):
        self.client_protocol = client_protocol
        self.username = username
        self.password = password
        self.configuration = configuration
        self.getInfos = getInfos
        self.client_protocol_i64 = client_protocol_i64
        self.connectionProperties = connectionProperties
        self.initialNamespace = initialNamespace
        self.canUseMultipleCatalogs = canUseMultipleCatalogs
        self.sessionId = sessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.client_protocol = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.configuration = {}
                    (_ktype181, _vtype182, _size180) = iprot.readMapBegin()
                    for _i184 in range(_size180):
                        _key185 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val186 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.configuration[_key185] = _val186
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.LIST:
                    self.getInfos = []
                    (_etype190, _size187) = iprot.readListBegin()
                    for _i191 in range(_size187):
                        _elem192 = iprot.readI32()
                        self.getInfos.append(_elem192)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.I64:
                    self.client_protocol_i64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.MAP:
                    self.connectionProperties = {}
                    (_ktype194, _vtype195, _size193) = iprot.readMapBegin()
                    for _i197 in range(_size193):
                        _key198 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val199 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.connectionProperties[_key198] = _val199
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.STRUCT:
                    self.initialNamespace = TNamespace()
                    self.initialNamespace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.BOOL:
                    self.canUseMultipleCatalogs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.sessionId = THandleIdentifier()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TOpenSessionReq')
        if self.client_protocol is not None:
            oprot.writeFieldBegin('client_protocol', TType.I32, 1)
            oprot.writeI32(self.client_protocol)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.configuration))
            for kiter200, viter201 in self.configuration.items():
                oprot.writeString(kiter200.encode('utf-8') if sys.version_info[0] == 2 else kiter200)
                oprot.writeString(viter201.encode('utf-8') if sys.version_info[0] == 2 else viter201)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.getInfos is not None:
            oprot.writeFieldBegin('getInfos', TType.LIST, 1281)
            oprot.writeListBegin(TType.I32, len(self.getInfos))
            for iter202 in self.getInfos:
                oprot.writeI32(iter202)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.client_protocol_i64 is not None:
            oprot.writeFieldBegin('client_protocol_i64', TType.I64, 1282)
            oprot.writeI64(self.client_protocol_i64)
            oprot.writeFieldEnd()
        if self.connectionProperties is not None:
            oprot.writeFieldBegin('connectionProperties', TType.MAP, 1283)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.connectionProperties))
            for kiter203, viter204 in self.connectionProperties.items():
                oprot.writeString(kiter203.encode('utf-8') if sys.version_info[0] == 2 else kiter203)
                oprot.writeString(viter204.encode('utf-8') if sys.version_info[0] == 2 else viter204)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.initialNamespace is not None:
            oprot.writeFieldBegin('initialNamespace', TType.STRUCT, 1284)
            self.initialNamespace.write(oprot)
            oprot.writeFieldEnd()
        if self.canUseMultipleCatalogs is not None:
            oprot.writeFieldBegin('canUseMultipleCatalogs', TType.BOOL, 1285)
            oprot.writeBool(self.canUseMultipleCatalogs)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 3329)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TOpenSessionResp(object):
    """
    Attributes:
     - status
     - serverProtocolVersion
     - sessionHandle
     - configuration
     - initialNamespace
     - canUseMultipleCatalogs
     - getInfos

    """


    def __init__(self, status=None, serverProtocolVersion=None, sessionHandle=None, configuration=None, initialNamespace=None, canUseMultipleCatalogs=None, getInfos=None,):
        self.status = status
        self.serverProtocolVersion = serverProtocolVersion
        self.sessionHandle = sessionHandle
        self.configuration = configuration
        self.initialNamespace = initialNamespace
        self.canUseMultipleCatalogs = canUseMultipleCatalogs
        self.getInfos = getInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.serverProtocolVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.configuration = {}
                    (_ktype206, _vtype207, _size205) = iprot.readMapBegin()
                    for _i209 in range(_size205):
                        _key210 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val211 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.configuration[_key210] = _val211
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.STRUCT:
                    self.initialNamespace = TNamespace()
                    self.initialNamespace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.BOOL:
                    self.canUseMultipleCatalogs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.LIST:
                    self.getInfos = []
                    (_etype215, _size212) = iprot.readListBegin()
                    for _i216 in range(_size212):
                        _elem217 = TGetInfoValue()
                        _elem217.read(iprot)
                        self.getInfos.append(_elem217)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TOpenSessionResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.serverProtocolVersion is not None:
            oprot.writeFieldBegin('serverProtocolVersion', TType.I32, 2)
            oprot.writeI32(self.serverProtocolVersion)
            oprot.writeFieldEnd()
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 3)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.configuration))
            for kiter218, viter219 in self.configuration.items():
                oprot.writeString(kiter218.encode('utf-8') if sys.version_info[0] == 2 else kiter218)
                oprot.writeString(viter219.encode('utf-8') if sys.version_info[0] == 2 else viter219)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.getInfos is not None:
            oprot.writeFieldBegin('getInfos', TType.LIST, 1281)
            oprot.writeListBegin(TType.STRUCT, len(self.getInfos))
            for iter220 in self.getInfos:
                iter220.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.initialNamespace is not None:
            oprot.writeFieldBegin('initialNamespace', TType.STRUCT, 1284)
            self.initialNamespace.write(oprot)
            oprot.writeFieldEnd()
        if self.canUseMultipleCatalogs is not None:
            oprot.writeFieldBegin('canUseMultipleCatalogs', TType.BOOL, 1285)
            oprot.writeBool(self.canUseMultipleCatalogs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.serverProtocolVersion is None:
            raise TProtocolException(message='Required field serverProtocolVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseSessionReq(object):
    """
    Attributes:
     - sessionHandle

    """


    def __init__(self, sessionHandle=None,):
        self.sessionHandle = sessionHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseSessionReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseSessionResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseSessionResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetInfoValue(object):
    """
    Attributes:
     - stringValue
     - smallIntValue
     - integerBitmask
     - integerFlag
     - binaryValue
     - lenValue

    """


    def __init__(self, stringValue=None, smallIntValue=None, integerBitmask=None, integerFlag=None, binaryValue=None, lenValue=None,):
        self.stringValue = stringValue
        self.smallIntValue = smallIntValue
        self.integerBitmask = integerBitmask
        self.integerFlag = integerFlag
        self.binaryValue = binaryValue
        self.lenValue = lenValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.smallIntValue = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.integerBitmask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.integerFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.binaryValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lenValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetInfoValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.smallIntValue is not None:
            oprot.writeFieldBegin('smallIntValue', TType.I16, 2)
            oprot.writeI16(self.smallIntValue)
            oprot.writeFieldEnd()
        if self.integerBitmask is not None:
            oprot.writeFieldBegin('integerBitmask', TType.I32, 3)
            oprot.writeI32(self.integerBitmask)
            oprot.writeFieldEnd()
        if self.integerFlag is not None:
            oprot.writeFieldBegin('integerFlag', TType.I32, 4)
            oprot.writeI32(self.integerFlag)
            oprot.writeFieldEnd()
        if self.binaryValue is not None:
            oprot.writeFieldBegin('binaryValue', TType.I32, 5)
            oprot.writeI32(self.binaryValue)
            oprot.writeFieldEnd()
        if self.lenValue is not None:
            oprot.writeFieldBegin('lenValue', TType.I64, 6)
            oprot.writeI64(self.lenValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetInfoReq(object):
    """
    Attributes:
     - sessionHandle
     - infoType
     - sessionConf

    """


    def __init__(self, sessionHandle=None, infoType=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.infoType = infoType
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.infoType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetInfoReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.infoType is not None:
            oprot.writeFieldBegin('infoType', TType.I32, 2)
            oprot.writeI32(self.infoType)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3329)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.infoType is None:
            raise TProtocolException(message='Required field infoType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetInfoResp(object):
    """
    Attributes:
     - status
     - infoValue

    """


    def __init__(self, status=None, infoValue=None,):
        self.status = status
        self.infoValue = infoValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.infoValue = TGetInfoValue()
                    self.infoValue.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetInfoResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.infoValue is not None:
            oprot.writeFieldBegin('infoValue', TType.STRUCT, 2)
            self.infoValue.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.infoValue is None:
            raise TProtocolException(message='Required field infoValue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkGetDirectResults(object):
    """
    Attributes:
     - maxRows
     - maxBytes

    """


    def __init__(self, maxRows=None, maxBytes=None,):
        self.maxRows = maxRows
        self.maxBytes = maxBytes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.maxRows = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkGetDirectResults')
        if self.maxRows is not None:
            oprot.writeFieldBegin('maxRows', TType.I64, 1)
            oprot.writeI64(self.maxRows)
            oprot.writeFieldEnd()
        if self.maxBytes is not None:
            oprot.writeFieldBegin('maxBytes', TType.I64, 2)
            oprot.writeI64(self.maxBytes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.maxRows is None:
            raise TProtocolException(message='Required field maxRows is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkDirectResults(object):
    """
    Attributes:
     - operationStatus
     - resultSetMetadata
     - resultSet
     - closeOperation

    """


    def __init__(self, operationStatus=None, resultSetMetadata=None, resultSet=None, closeOperation=None,):
        self.operationStatus = operationStatus
        self.resultSetMetadata = resultSetMetadata
        self.resultSet = resultSet
        self.closeOperation = closeOperation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationStatus = TGetOperationStatusResp()
                    self.operationStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.resultSetMetadata = TGetResultSetMetadataResp()
                    self.resultSetMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.resultSet = TFetchResultsResp()
                    self.resultSet.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.closeOperation = TCloseOperationResp()
                    self.closeOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkDirectResults')
        if self.operationStatus is not None:
            oprot.writeFieldBegin('operationStatus', TType.STRUCT, 1)
            self.operationStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.resultSetMetadata is not None:
            oprot.writeFieldBegin('resultSetMetadata', TType.STRUCT, 2)
            self.resultSetMetadata.write(oprot)
            oprot.writeFieldEnd()
        if self.resultSet is not None:
            oprot.writeFieldBegin('resultSet', TType.STRUCT, 3)
            self.resultSet.write(oprot)
            oprot.writeFieldEnd()
        if self.closeOperation is not None:
            oprot.writeFieldBegin('closeOperation', TType.STRUCT, 4)
            self.closeOperation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSparkArrowTypes(object):
    """
    Attributes:
     - timestampAsArrow
     - decimalAsArrow
     - complexTypesAsArrow
     - intervalTypesAsArrow

    """


    def __init__(self, timestampAsArrow=None, decimalAsArrow=None, complexTypesAsArrow=None, intervalTypesAsArrow=None,):
        self.timestampAsArrow = timestampAsArrow
        self.decimalAsArrow = decimalAsArrow
        self.complexTypesAsArrow = complexTypesAsArrow
        self.intervalTypesAsArrow = intervalTypesAsArrow

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.timestampAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.decimalAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.complexTypesAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.intervalTypesAsArrow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSparkArrowTypes')
        if self.timestampAsArrow is not None:
            oprot.writeFieldBegin('timestampAsArrow', TType.BOOL, 1)
            oprot.writeBool(self.timestampAsArrow)
            oprot.writeFieldEnd()
        if self.decimalAsArrow is not None:
            oprot.writeFieldBegin('decimalAsArrow', TType.BOOL, 2)
            oprot.writeBool(self.decimalAsArrow)
            oprot.writeFieldEnd()
        if self.complexTypesAsArrow is not None:
            oprot.writeFieldBegin('complexTypesAsArrow', TType.BOOL, 3)
            oprot.writeBool(self.complexTypesAsArrow)
            oprot.writeFieldEnd()
        if self.intervalTypesAsArrow is not None:
            oprot.writeFieldBegin('intervalTypesAsArrow', TType.BOOL, 4)
            oprot.writeBool(self.intervalTypesAsArrow)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteStatementReq(object):
    """
    Attributes:
     - sessionHandle
     - statement
     - confOverlay
     - runAsync
     - getDirectResults
     - queryTimeout
     - canReadArrowResult
     - canDownloadResult
     - canDecompressLZ4Result
     - maxBytesPerFile
     - useArrowNativeTypes
     - resultRowLimit
     - operationId
     - sessionConf
     - rejectHighCostQueries
     - estimatedCost
     - executionVersion
     - requestValidation
     - resultPersistenceMode
     - trimArrowBatchesToLimit

    """


    def __init__(self, sessionHandle=None, statement=None, confOverlay=None, runAsync=False, getDirectResults=None, queryTimeout=0, canReadArrowResult=None, canDownloadResult=None, canDecompressLZ4Result=None, maxBytesPerFile=None, useArrowNativeTypes=None, resultRowLimit=None, operationId=None, sessionConf=None, rejectHighCostQueries=None, estimatedCost=None, executionVersion=None, requestValidation=None, resultPersistenceMode=None, trimArrowBatchesToLimit=None,):
        self.sessionHandle = sessionHandle
        self.statement = statement
        self.confOverlay = confOverlay
        self.runAsync = runAsync
        self.getDirectResults = getDirectResults
        self.queryTimeout = queryTimeout
        self.canReadArrowResult = canReadArrowResult
        self.canDownloadResult = canDownloadResult
        self.canDecompressLZ4Result = canDecompressLZ4Result
        self.maxBytesPerFile = maxBytesPerFile
        self.useArrowNativeTypes = useArrowNativeTypes
        self.resultRowLimit = resultRowLimit
        self.operationId = operationId
        self.sessionConf = sessionConf
        self.rejectHighCostQueries = rejectHighCostQueries
        self.estimatedCost = estimatedCost
        self.executionVersion = executionVersion
        self.requestValidation = requestValidation
        self.resultPersistenceMode = resultPersistenceMode
        self.trimArrowBatchesToLimit = trimArrowBatchesToLimit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.statement = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.confOverlay = {}
                    (_ktype222, _vtype223, _size221) = iprot.readMapBegin()
                    for _i225 in range(_size221):
                        _key226 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val227 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.confOverlay[_key226] = _val227
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.queryTimeout = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.canReadArrowResult = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.BOOL:
                    self.canDownloadResult = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.BOOL:
                    self.canDecompressLZ4Result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.I64:
                    self.maxBytesPerFile = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1286:
                if ftype == TType.STRUCT:
                    self.useArrowNativeTypes = TSparkArrowTypes()
                    self.useArrowNativeTypes.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1287:
                if ftype == TType.I64:
                    self.resultRowLimit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3331:
                if ftype == TType.BOOL:
                    self.rejectHighCostQueries = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3332:
                if ftype == TType.DOUBLE:
                    self.estimatedCost = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3333:
                if ftype == TType.I16:
                    self.executionVersion = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3334:
                if ftype == TType.STRING:
                    self.requestValidation = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3335:
                if ftype == TType.I32:
                    self.resultPersistenceMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3336:
                if ftype == TType.BOOL:
                    self.trimArrowBatchesToLimit = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteStatementReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.statement is not None:
            oprot.writeFieldBegin('statement', TType.STRING, 2)
            oprot.writeString(self.statement.encode('utf-8') if sys.version_info[0] == 2 else self.statement)
            oprot.writeFieldEnd()
        if self.confOverlay is not None:
            oprot.writeFieldBegin('confOverlay', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.confOverlay))
            for kiter228, viter229 in self.confOverlay.items():
                oprot.writeString(kiter228.encode('utf-8') if sys.version_info[0] == 2 else kiter228)
                oprot.writeString(viter229.encode('utf-8') if sys.version_info[0] == 2 else viter229)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 4)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.queryTimeout is not None:
            oprot.writeFieldBegin('queryTimeout', TType.I64, 5)
            oprot.writeI64(self.queryTimeout)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.canReadArrowResult is not None:
            oprot.writeFieldBegin('canReadArrowResult', TType.BOOL, 1282)
            oprot.writeBool(self.canReadArrowResult)
            oprot.writeFieldEnd()
        if self.canDownloadResult is not None:
            oprot.writeFieldBegin('canDownloadResult', TType.BOOL, 1283)
            oprot.writeBool(self.canDownloadResult)
            oprot.writeFieldEnd()
        if self.canDecompressLZ4Result is not None:
            oprot.writeFieldBegin('canDecompressLZ4Result', TType.BOOL, 1284)
            oprot.writeBool(self.canDecompressLZ4Result)
            oprot.writeFieldEnd()
        if self.maxBytesPerFile is not None:
            oprot.writeFieldBegin('maxBytesPerFile', TType.I64, 1285)
            oprot.writeI64(self.maxBytesPerFile)
            oprot.writeFieldEnd()
        if self.useArrowNativeTypes is not None:
            oprot.writeFieldBegin('useArrowNativeTypes', TType.STRUCT, 1286)
            self.useArrowNativeTypes.write(oprot)
            oprot.writeFieldEnd()
        if self.resultRowLimit is not None:
            oprot.writeFieldBegin('resultRowLimit', TType.I64, 1287)
            oprot.writeI64(self.resultRowLimit)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        if self.rejectHighCostQueries is not None:
            oprot.writeFieldBegin('rejectHighCostQueries', TType.BOOL, 3331)
            oprot.writeBool(self.rejectHighCostQueries)
            oprot.writeFieldEnd()
        if self.estimatedCost is not None:
            oprot.writeFieldBegin('estimatedCost', TType.DOUBLE, 3332)
            oprot.writeDouble(self.estimatedCost)
            oprot.writeFieldEnd()
        if self.executionVersion is not None:
            oprot.writeFieldBegin('executionVersion', TType.I16, 3333)
            oprot.writeI16(self.executionVersion)
            oprot.writeFieldEnd()
        if self.requestValidation is not None:
            oprot.writeFieldBegin('requestValidation', TType.STRING, 3334)
            oprot.writeBinary(self.requestValidation)
            oprot.writeFieldEnd()
        if self.resultPersistenceMode is not None:
            oprot.writeFieldBegin('resultPersistenceMode', TType.I32, 3335)
            oprot.writeI32(self.resultPersistenceMode)
            oprot.writeFieldEnd()
        if self.trimArrowBatchesToLimit is not None:
            oprot.writeFieldBegin('trimArrowBatchesToLimit', TType.BOOL, 3336)
            oprot.writeBool(self.trimArrowBatchesToLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.statement is None:
            raise TProtocolException(message='Required field statement is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteStatementResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults
     - executionRejected
     - maxClusterCapacity
     - queryCost
     - sessionConf
     - currentClusterLoad
     - idempotencyType

    """


    def __init__(self, status=None, operationHandle=None, directResults=None, executionRejected=None, maxClusterCapacity=None, queryCost=None, sessionConf=None, currentClusterLoad=None, idempotencyType=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults
        self.executionRejected = executionRejected
        self.maxClusterCapacity = maxClusterCapacity
        self.queryCost = queryCost
        self.sessionConf = sessionConf
        self.currentClusterLoad = currentClusterLoad
        self.idempotencyType = idempotencyType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.BOOL:
                    self.executionRejected = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.DOUBLE:
                    self.maxClusterCapacity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3331:
                if ftype == TType.DOUBLE:
                    self.queryCost = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3332:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3333:
                if ftype == TType.DOUBLE:
                    self.currentClusterLoad = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3334:
                if ftype == TType.I32:
                    self.idempotencyType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteStatementResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        if self.executionRejected is not None:
            oprot.writeFieldBegin('executionRejected', TType.BOOL, 3329)
            oprot.writeBool(self.executionRejected)
            oprot.writeFieldEnd()
        if self.maxClusterCapacity is not None:
            oprot.writeFieldBegin('maxClusterCapacity', TType.DOUBLE, 3330)
            oprot.writeDouble(self.maxClusterCapacity)
            oprot.writeFieldEnd()
        if self.queryCost is not None:
            oprot.writeFieldBegin('queryCost', TType.DOUBLE, 3331)
            oprot.writeDouble(self.queryCost)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3332)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        if self.currentClusterLoad is not None:
            oprot.writeFieldBegin('currentClusterLoad', TType.DOUBLE, 3333)
            oprot.writeDouble(self.currentClusterLoad)
            oprot.writeFieldEnd()
        if self.idempotencyType is not None:
            oprot.writeFieldBegin('idempotencyType', TType.I32, 3334)
            oprot.writeI32(self.idempotencyType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTypeInfoReq(object):
    """
    Attributes:
     - sessionHandle
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTypeInfoReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTypeInfoResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTypeInfoResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCatalogsReq(object):
    """
    Attributes:
     - sessionHandle
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCatalogsReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCatalogsResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCatalogsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetSchemasReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetSchemasReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetSchemasResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetSchemasResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTablesReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - tableName
     - tableTypes
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, tableName=None, tableTypes=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.tableTypes = tableTypes
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.tableTypes = []
                    (_etype233, _size230) = iprot.readListBegin()
                    for _i234 in range(_size230):
                        _elem235 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tableTypes.append(_elem235)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTablesReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 4)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.tableTypes is not None:
            oprot.writeFieldBegin('tableTypes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.tableTypes))
            for iter236 in self.tableTypes:
                oprot.writeString(iter236.encode('utf-8') if sys.version_info[0] == 2 else iter236)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTablesResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTablesResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTableTypesReq(object):
    """
    Attributes:
     - sessionHandle
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTableTypesReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetTableTypesResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetTableTypesResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetColumnsReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - tableName
     - columnName
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, tableName=None, columnName=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.columnName = columnName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetColumnsReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 4)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 5)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetColumnsResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetColumnsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetFunctionsReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - functionName
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, functionName=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.functionName = functionName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.functionName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetFunctionsReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.functionName is not None:
            oprot.writeFieldBegin('functionName', TType.STRING, 4)
            oprot.writeString(self.functionName.encode('utf-8') if sys.version_info[0] == 2 else self.functionName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.functionName is None:
            raise TProtocolException(message='Required field functionName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetFunctionsResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetFunctionsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetPrimaryKeysReq(object):
    """
    Attributes:
     - sessionHandle
     - catalogName
     - schemaName
     - tableName
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, catalogName=None, schemaName=None, tableName=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetPrimaryKeysReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin('catalogName', TType.STRING, 2)
            oprot.writeString(self.catalogName.encode('utf-8') if sys.version_info[0] == 2 else self.catalogName)
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin('schemaName', TType.STRING, 3)
            oprot.writeString(self.schemaName.encode('utf-8') if sys.version_info[0] == 2 else self.schemaName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 4)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetPrimaryKeysResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetPrimaryKeysResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCrossReferenceReq(object):
    """
    Attributes:
     - sessionHandle
     - parentCatalogName
     - parentSchemaName
     - parentTableName
     - foreignCatalogName
     - foreignSchemaName
     - foreignTableName
     - getDirectResults
     - runAsync
     - operationId
     - sessionConf

    """


    def __init__(self, sessionHandle=None, parentCatalogName=None, parentSchemaName=None, parentTableName=None, foreignCatalogName=None, foreignSchemaName=None, foreignTableName=None, getDirectResults=None, runAsync=False, operationId=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.parentCatalogName = parentCatalogName
        self.parentSchemaName = parentSchemaName
        self.parentTableName = parentTableName
        self.foreignCatalogName = foreignCatalogName
        self.foreignSchemaName = foreignSchemaName
        self.foreignTableName = foreignTableName
        self.getDirectResults = getDirectResults
        self.runAsync = runAsync
        self.operationId = operationId
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentCatalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentSchemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parentTableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.foreignCatalogName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.foreignSchemaName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.foreignTableName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.getDirectResults = TSparkGetDirectResults()
                    self.getDirectResults.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.runAsync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.operationId = THandleIdentifier()
                    self.operationId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCrossReferenceReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.parentCatalogName is not None:
            oprot.writeFieldBegin('parentCatalogName', TType.STRING, 2)
            oprot.writeString(self.parentCatalogName.encode('utf-8') if sys.version_info[0] == 2 else self.parentCatalogName)
            oprot.writeFieldEnd()
        if self.parentSchemaName is not None:
            oprot.writeFieldBegin('parentSchemaName', TType.STRING, 3)
            oprot.writeString(self.parentSchemaName.encode('utf-8') if sys.version_info[0] == 2 else self.parentSchemaName)
            oprot.writeFieldEnd()
        if self.parentTableName is not None:
            oprot.writeFieldBegin('parentTableName', TType.STRING, 4)
            oprot.writeString(self.parentTableName.encode('utf-8') if sys.version_info[0] == 2 else self.parentTableName)
            oprot.writeFieldEnd()
        if self.foreignCatalogName is not None:
            oprot.writeFieldBegin('foreignCatalogName', TType.STRING, 5)
            oprot.writeString(self.foreignCatalogName.encode('utf-8') if sys.version_info[0] == 2 else self.foreignCatalogName)
            oprot.writeFieldEnd()
        if self.foreignSchemaName is not None:
            oprot.writeFieldBegin('foreignSchemaName', TType.STRING, 6)
            oprot.writeString(self.foreignSchemaName.encode('utf-8') if sys.version_info[0] == 2 else self.foreignSchemaName)
            oprot.writeFieldEnd()
        if self.foreignTableName is not None:
            oprot.writeFieldBegin('foreignTableName', TType.STRING, 7)
            oprot.writeString(self.foreignTableName.encode('utf-8') if sys.version_info[0] == 2 else self.foreignTableName)
            oprot.writeFieldEnd()
        if self.getDirectResults is not None:
            oprot.writeFieldBegin('getDirectResults', TType.STRUCT, 1281)
            self.getDirectResults.write(oprot)
            oprot.writeFieldEnd()
        if self.runAsync is not None:
            oprot.writeFieldBegin('runAsync', TType.BOOL, 1282)
            oprot.writeBool(self.runAsync)
            oprot.writeFieldEnd()
        if self.operationId is not None:
            oprot.writeFieldBegin('operationId', TType.STRUCT, 3329)
            self.operationId.write(oprot)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3330)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetCrossReferenceResp(object):
    """
    Attributes:
     - status
     - operationHandle
     - directResults

    """


    def __init__(self, status=None, operationHandle=None, directResults=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.directResults = directResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.directResults = TSparkDirectResults()
                    self.directResults.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetCrossReferenceResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.directResults is not None:
            oprot.writeFieldBegin('directResults', TType.STRUCT, 1281)
            self.directResults.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetOperationStatusReq(object):
    """
    Attributes:
     - operationHandle
     - getProgressUpdate

    """


    def __init__(self, operationHandle=None, getProgressUpdate=None,):
        self.operationHandle = operationHandle
        self.getProgressUpdate = getProgressUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.getProgressUpdate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetOperationStatusReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.getProgressUpdate is not None:
            oprot.writeFieldBegin('getProgressUpdate', TType.BOOL, 2)
            oprot.writeBool(self.getProgressUpdate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetOperationStatusResp(object):
    """
    Attributes:
     - status
     - operationState
     - sqlState
     - errorCode
     - errorMessage: The long-form error message. This is deprecated in DBR,
    however servers expecting to serve to Simba drivers should be careful
    to keep returning this as these drivers still depend on it.

    Clients should avoid using this field and prefer displayMessage and diagnosticInfo if given.
     - taskStatus
     - operationStarted
     - operationCompleted
     - hasResultSet
     - progressUpdateResponse
     - numModifiedRows
     - displayMessage
     - diagnosticInfo
     - responseValidation
     - idempotencyType
     - statementTimeout
     - statementTimeoutLevel

    """


    def __init__(self, status=None, operationState=None, sqlState=None, errorCode=None, errorMessage=None, taskStatus=None, operationStarted=None, operationCompleted=None, hasResultSet=None, progressUpdateResponse=None, numModifiedRows=None, displayMessage=None, diagnosticInfo=None, responseValidation=None, idempotencyType=None, statementTimeout=None, statementTimeoutLevel=None,):
        self.status = status
        self.operationState = operationState
        self.sqlState = sqlState
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.taskStatus = taskStatus
        self.operationStarted = operationStarted
        self.operationCompleted = operationCompleted
        self.hasResultSet = hasResultSet
        self.progressUpdateResponse = progressUpdateResponse
        self.numModifiedRows = numModifiedRows
        self.displayMessage = displayMessage
        self.diagnosticInfo = diagnosticInfo
        self.responseValidation = responseValidation
        self.idempotencyType = idempotencyType
        self.statementTimeout = statementTimeout
        self.statementTimeoutLevel = statementTimeoutLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operationState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sqlState = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.taskStatus = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.operationStarted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.operationCompleted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.hasResultSet = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.progressUpdateResponse = TProgressUpdateResp()
                    self.progressUpdateResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.numModifiedRows = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.STRING:
                    self.diagnosticInfo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRING:
                    self.responseValidation = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.I32:
                    self.idempotencyType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3331:
                if ftype == TType.I64:
                    self.statementTimeout = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3332:
                if ftype == TType.I32:
                    self.statementTimeoutLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetOperationStatusResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationState is not None:
            oprot.writeFieldBegin('operationState', TType.I32, 2)
            oprot.writeI32(self.operationState)
            oprot.writeFieldEnd()
        if self.sqlState is not None:
            oprot.writeFieldBegin('sqlState', TType.STRING, 3)
            oprot.writeString(self.sqlState.encode('utf-8') if sys.version_info[0] == 2 else self.sqlState)
            oprot.writeFieldEnd()
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 4)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 5)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        if self.taskStatus is not None:
            oprot.writeFieldBegin('taskStatus', TType.STRING, 6)
            oprot.writeString(self.taskStatus.encode('utf-8') if sys.version_info[0] == 2 else self.taskStatus)
            oprot.writeFieldEnd()
        if self.operationStarted is not None:
            oprot.writeFieldBegin('operationStarted', TType.I64, 7)
            oprot.writeI64(self.operationStarted)
            oprot.writeFieldEnd()
        if self.operationCompleted is not None:
            oprot.writeFieldBegin('operationCompleted', TType.I64, 8)
            oprot.writeI64(self.operationCompleted)
            oprot.writeFieldEnd()
        if self.hasResultSet is not None:
            oprot.writeFieldBegin('hasResultSet', TType.BOOL, 9)
            oprot.writeBool(self.hasResultSet)
            oprot.writeFieldEnd()
        if self.progressUpdateResponse is not None:
            oprot.writeFieldBegin('progressUpdateResponse', TType.STRUCT, 10)
            self.progressUpdateResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.numModifiedRows is not None:
            oprot.writeFieldBegin('numModifiedRows', TType.I64, 11)
            oprot.writeI64(self.numModifiedRows)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 1281)
            oprot.writeString(self.displayMessage.encode('utf-8') if sys.version_info[0] == 2 else self.displayMessage)
            oprot.writeFieldEnd()
        if self.diagnosticInfo is not None:
            oprot.writeFieldBegin('diagnosticInfo', TType.STRING, 1282)
            oprot.writeString(self.diagnosticInfo.encode('utf-8') if sys.version_info[0] == 2 else self.diagnosticInfo)
            oprot.writeFieldEnd()
        if self.responseValidation is not None:
            oprot.writeFieldBegin('responseValidation', TType.STRING, 3329)
            oprot.writeBinary(self.responseValidation)
            oprot.writeFieldEnd()
        if self.idempotencyType is not None:
            oprot.writeFieldBegin('idempotencyType', TType.I32, 3330)
            oprot.writeI32(self.idempotencyType)
            oprot.writeFieldEnd()
        if self.statementTimeout is not None:
            oprot.writeFieldBegin('statementTimeout', TType.I64, 3331)
            oprot.writeI64(self.statementTimeout)
            oprot.writeFieldEnd()
        if self.statementTimeoutLevel is not None:
            oprot.writeFieldBegin('statementTimeoutLevel', TType.I32, 3332)
            oprot.writeI32(self.statementTimeoutLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelOperationReq(object):
    """
    Attributes:
     - operationHandle
     - executionVersion
     - replacedByNextAttempt

    """


    def __init__(self, operationHandle=None, executionVersion=None, replacedByNextAttempt=None,):
        self.operationHandle = operationHandle
        self.executionVersion = executionVersion
        self.replacedByNextAttempt = replacedByNextAttempt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.I16:
                    self.executionVersion = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.BOOL:
                    self.replacedByNextAttempt = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelOperationReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.executionVersion is not None:
            oprot.writeFieldBegin('executionVersion', TType.I16, 3329)
            oprot.writeI16(self.executionVersion)
            oprot.writeFieldEnd()
        if self.replacedByNextAttempt is not None:
            oprot.writeFieldBegin('replacedByNextAttempt', TType.BOOL, 3330)
            oprot.writeBool(self.replacedByNextAttempt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelOperationResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelOperationResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseOperationReq(object):
    """
    Attributes:
     - operationHandle

    """


    def __init__(self, operationHandle=None,):
        self.operationHandle = operationHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseOperationReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCloseOperationResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCloseOperationResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetResultSetMetadataReq(object):
    """
    Attributes:
     - operationHandle
     - includeCloudResultFiles

    """


    def __init__(self, operationHandle=None, includeCloudResultFiles=None,):
        self.operationHandle = operationHandle
        self.includeCloudResultFiles = includeCloudResultFiles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.BOOL:
                    self.includeCloudResultFiles = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetResultSetMetadataReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.includeCloudResultFiles is not None:
            oprot.writeFieldBegin('includeCloudResultFiles', TType.BOOL, 3329)
            oprot.writeBool(self.includeCloudResultFiles)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetResultSetMetadataResp(object):
    """
    Attributes:
     - status
     - schema
     - resultFormat
     - lz4Compressed
     - arrowSchema
     - cacheLookupResult
     - uncompressedBytes
     - compressedBytes
     - isStagingOperation
     - reasonForNoCloudFetch
     - resultFiles
     - manifestFile
     - manifestFileFormat

    """


    def __init__(self, status=None, schema=None, resultFormat=None, lz4Compressed=None, arrowSchema=None, cacheLookupResult=None, uncompressedBytes=None, compressedBytes=None, isStagingOperation=None, reasonForNoCloudFetch=None, resultFiles=None, manifestFile=None, manifestFileFormat=None,):
        self.status = status
        self.schema = schema
        self.resultFormat = resultFormat
        self.lz4Compressed = lz4Compressed
        self.arrowSchema = arrowSchema
        self.cacheLookupResult = cacheLookupResult
        self.uncompressedBytes = uncompressedBytes
        self.compressedBytes = compressedBytes
        self.isStagingOperation = isStagingOperation
        self.reasonForNoCloudFetch = reasonForNoCloudFetch
        self.resultFiles = resultFiles
        self.manifestFile = manifestFile
        self.manifestFileFormat = manifestFileFormat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.schema = TTableSchema()
                    self.schema.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.I32:
                    self.resultFormat = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.BOOL:
                    self.lz4Compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.STRING:
                    self.arrowSchema = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1284:
                if ftype == TType.I32:
                    self.cacheLookupResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1285:
                if ftype == TType.I64:
                    self.uncompressedBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1286:
                if ftype == TType.I64:
                    self.compressedBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1287:
                if ftype == TType.BOOL:
                    self.isStagingOperation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.I32:
                    self.reasonForNoCloudFetch = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3330:
                if ftype == TType.LIST:
                    self.resultFiles = []
                    (_etype240, _size237) = iprot.readListBegin()
                    for _i241 in range(_size237):
                        _elem242 = TDBSqlCloudResultFile()
                        _elem242.read(iprot)
                        self.resultFiles.append(_elem242)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3331:
                if ftype == TType.STRING:
                    self.manifestFile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3332:
                if ftype == TType.STRING:
                    self.manifestFileFormat = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetResultSetMetadataResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.STRUCT, 2)
            self.schema.write(oprot)
            oprot.writeFieldEnd()
        if self.resultFormat is not None:
            oprot.writeFieldBegin('resultFormat', TType.I32, 1281)
            oprot.writeI32(self.resultFormat)
            oprot.writeFieldEnd()
        if self.lz4Compressed is not None:
            oprot.writeFieldBegin('lz4Compressed', TType.BOOL, 1282)
            oprot.writeBool(self.lz4Compressed)
            oprot.writeFieldEnd()
        if self.arrowSchema is not None:
            oprot.writeFieldBegin('arrowSchema', TType.STRING, 1283)
            oprot.writeBinary(self.arrowSchema)
            oprot.writeFieldEnd()
        if self.cacheLookupResult is not None:
            oprot.writeFieldBegin('cacheLookupResult', TType.I32, 1284)
            oprot.writeI32(self.cacheLookupResult)
            oprot.writeFieldEnd()
        if self.uncompressedBytes is not None:
            oprot.writeFieldBegin('uncompressedBytes', TType.I64, 1285)
            oprot.writeI64(self.uncompressedBytes)
            oprot.writeFieldEnd()
        if self.compressedBytes is not None:
            oprot.writeFieldBegin('compressedBytes', TType.I64, 1286)
            oprot.writeI64(self.compressedBytes)
            oprot.writeFieldEnd()
        if self.isStagingOperation is not None:
            oprot.writeFieldBegin('isStagingOperation', TType.BOOL, 1287)
            oprot.writeBool(self.isStagingOperation)
            oprot.writeFieldEnd()
        if self.reasonForNoCloudFetch is not None:
            oprot.writeFieldBegin('reasonForNoCloudFetch', TType.I32, 3329)
            oprot.writeI32(self.reasonForNoCloudFetch)
            oprot.writeFieldEnd()
        if self.resultFiles is not None:
            oprot.writeFieldBegin('resultFiles', TType.LIST, 3330)
            oprot.writeListBegin(TType.STRUCT, len(self.resultFiles))
            for iter243 in self.resultFiles:
                iter243.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.manifestFile is not None:
            oprot.writeFieldBegin('manifestFile', TType.STRING, 3331)
            oprot.writeString(self.manifestFile.encode('utf-8') if sys.version_info[0] == 2 else self.manifestFile)
            oprot.writeFieldEnd()
        if self.manifestFileFormat is not None:
            oprot.writeFieldBegin('manifestFileFormat', TType.STRING, 3332)
            oprot.writeString(self.manifestFileFormat.encode('utf-8') if sys.version_info[0] == 2 else self.manifestFileFormat)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFetchResultsReq(object):
    """
    Attributes:
     - operationHandle
     - orientation
     - maxRows
     - fetchType
     - maxBytes
     - startRowOffset
     - includeResultSetMetadata

    """


    def __init__(self, operationHandle=None, orientation=    0, maxRows=None, fetchType=0, maxBytes=None, startRowOffset=None, includeResultSetMetadata=None,):
        self.operationHandle = operationHandle
        self.orientation = orientation
        self.maxRows = maxRows
        self.fetchType = fetchType
        self.maxBytes = maxBytes
        self.startRowOffset = startRowOffset
        self.includeResultSetMetadata = includeResultSetMetadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.orientation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.maxRows = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.fetchType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.I64:
                    self.maxBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1282:
                if ftype == TType.I64:
                    self.startRowOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1283:
                if ftype == TType.BOOL:
                    self.includeResultSetMetadata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFetchResultsReq')
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 1)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.orientation is not None:
            oprot.writeFieldBegin('orientation', TType.I32, 2)
            oprot.writeI32(self.orientation)
            oprot.writeFieldEnd()
        if self.maxRows is not None:
            oprot.writeFieldBegin('maxRows', TType.I64, 3)
            oprot.writeI64(self.maxRows)
            oprot.writeFieldEnd()
        if self.fetchType is not None:
            oprot.writeFieldBegin('fetchType', TType.I16, 4)
            oprot.writeI16(self.fetchType)
            oprot.writeFieldEnd()
        if self.maxBytes is not None:
            oprot.writeFieldBegin('maxBytes', TType.I64, 1281)
            oprot.writeI64(self.maxBytes)
            oprot.writeFieldEnd()
        if self.startRowOffset is not None:
            oprot.writeFieldBegin('startRowOffset', TType.I64, 1282)
            oprot.writeI64(self.startRowOffset)
            oprot.writeFieldEnd()
        if self.includeResultSetMetadata is not None:
            oprot.writeFieldBegin('includeResultSetMetadata', TType.BOOL, 1283)
            oprot.writeBool(self.includeResultSetMetadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        if self.orientation is None:
            raise TProtocolException(message='Required field orientation is unset!')
        if self.maxRows is None:
            raise TProtocolException(message='Required field maxRows is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFetchResultsResp(object):
    """
    Attributes:
     - status
     - hasMoreRows
     - results
     - resultSetMetadata
     - responseValidation

    """


    def __init__(self, status=None, hasMoreRows=None, results=None, resultSetMetadata=None, responseValidation=None,):
        self.status = status
        self.hasMoreRows = hasMoreRows
        self.results = results
        self.resultSetMetadata = resultSetMetadata
        self.responseValidation = responseValidation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasMoreRows = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.results = TRowSet()
                    self.results.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1281:
                if ftype == TType.STRUCT:
                    self.resultSetMetadata = TGetResultSetMetadataResp()
                    self.resultSetMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRING:
                    self.responseValidation = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFetchResultsResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.hasMoreRows is not None:
            oprot.writeFieldBegin('hasMoreRows', TType.BOOL, 2)
            oprot.writeBool(self.hasMoreRows)
            oprot.writeFieldEnd()
        if self.results is not None:
            oprot.writeFieldBegin('results', TType.STRUCT, 3)
            self.results.write(oprot)
            oprot.writeFieldEnd()
        if self.resultSetMetadata is not None:
            oprot.writeFieldBegin('resultSetMetadata', TType.STRUCT, 1281)
            self.resultSetMetadata.write(oprot)
            oprot.writeFieldEnd()
        if self.responseValidation is not None:
            oprot.writeFieldBegin('responseValidation', TType.STRING, 3329)
            oprot.writeBinary(self.responseValidation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetDelegationTokenReq(object):
    """
    Attributes:
     - sessionHandle
     - owner
     - renewer
     - sessionConf

    """


    def __init__(self, sessionHandle=None, owner=None, renewer=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.owner = owner
        self.renewer = renewer
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.owner = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.renewer = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetDelegationTokenReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 2)
            oprot.writeString(self.owner.encode('utf-8') if sys.version_info[0] == 2 else self.owner)
            oprot.writeFieldEnd()
        if self.renewer is not None:
            oprot.writeFieldBegin('renewer', TType.STRING, 3)
            oprot.writeString(self.renewer.encode('utf-8') if sys.version_info[0] == 2 else self.renewer)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3329)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.owner is None:
            raise TProtocolException(message='Required field owner is unset!')
        if self.renewer is None:
            raise TProtocolException(message='Required field renewer is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGetDelegationTokenResp(object):
    """
    Attributes:
     - status
     - delegationToken

    """


    def __init__(self, status=None, delegationToken=None,):
        self.status = status
        self.delegationToken = delegationToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.delegationToken = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGetDelegationTokenResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.delegationToken is not None:
            oprot.writeFieldBegin('delegationToken', TType.STRING, 2)
            oprot.writeString(self.delegationToken.encode('utf-8') if sys.version_info[0] == 2 else self.delegationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelDelegationTokenReq(object):
    """
    Attributes:
     - sessionHandle
     - delegationToken
     - sessionConf

    """


    def __init__(self, sessionHandle=None, delegationToken=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.delegationToken = delegationToken
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.delegationToken = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelDelegationTokenReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.delegationToken is not None:
            oprot.writeFieldBegin('delegationToken', TType.STRING, 2)
            oprot.writeString(self.delegationToken.encode('utf-8') if sys.version_info[0] == 2 else self.delegationToken)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3329)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.delegationToken is None:
            raise TProtocolException(message='Required field delegationToken is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCancelDelegationTokenResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCancelDelegationTokenResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRenewDelegationTokenReq(object):
    """
    Attributes:
     - sessionHandle
     - delegationToken
     - sessionConf

    """


    def __init__(self, sessionHandle=None, delegationToken=None, sessionConf=None,):
        self.sessionHandle = sessionHandle
        self.delegationToken = delegationToken
        self.sessionConf = sessionConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.delegationToken = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3329:
                if ftype == TType.STRUCT:
                    self.sessionConf = TDBSqlSessionConf()
                    self.sessionConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRenewDelegationTokenReq')
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 1)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.delegationToken is not None:
            oprot.writeFieldBegin('delegationToken', TType.STRING, 2)
            oprot.writeString(self.delegationToken.encode('utf-8') if sys.version_info[0] == 2 else self.delegationToken)
            oprot.writeFieldEnd()
        if self.sessionConf is not None:
            oprot.writeFieldBegin('sessionConf', TType.STRUCT, 3329)
            self.sessionConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sessionHandle is None:
            raise TProtocolException(message='Required field sessionHandle is unset!')
        if self.delegationToken is None:
            raise TProtocolException(message='Required field delegationToken is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRenewDelegationTokenResp(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRenewDelegationTokenResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TProgressUpdateResp(object):
    """
    Attributes:
     - headerNames
     - rows
     - progressedPercentage
     - status
     - footerSummary
     - startTime

    """


    def __init__(self, headerNames=None, rows=None, progressedPercentage=None, status=None, footerSummary=None, startTime=None,):
        self.headerNames = headerNames
        self.rows = rows
        self.progressedPercentage = progressedPercentage
        self.status = status
        self.footerSummary = footerSummary
        self.startTime = startTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.headerNames = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.headerNames.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype253, _size250) = iprot.readListBegin()
                    for _i254 in range(_size250):
                        _elem255 = []
                        (_etype259, _size256) = iprot.readListBegin()
                        for _i260 in range(_size256):
                            _elem261 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem255.append(_elem261)
                        iprot.readListEnd()
                        self.rows.append(_elem255)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.progressedPercentage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.footerSummary = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TProgressUpdateResp')
        if self.headerNames is not None:
            oprot.writeFieldBegin('headerNames', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.headerNames))
            for iter262 in self.headerNames:
                oprot.writeString(iter262.encode('utf-8') if sys.version_info[0] == 2 else iter262)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.rows))
            for iter263 in self.rows:
                oprot.writeListBegin(TType.STRING, len(iter263))
                for iter264 in iter263:
                    oprot.writeString(iter264.encode('utf-8') if sys.version_info[0] == 2 else iter264)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.progressedPercentage is not None:
            oprot.writeFieldBegin('progressedPercentage', TType.DOUBLE, 3)
            oprot.writeDouble(self.progressedPercentage)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.footerSummary is not None:
            oprot.writeFieldBegin('footerSummary', TType.STRING, 5)
            oprot.writeString(self.footerSummary.encode('utf-8') if sys.version_info[0] == 2 else self.footerSummary)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 6)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.headerNames is None:
            raise TProtocolException(message='Required field headerNames is unset!')
        if self.rows is None:
            raise TProtocolException(message='Required field rows is unset!')
        if self.progressedPercentage is None:
            raise TProtocolException(message='Required field progressedPercentage is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.footerSummary is None:
            raise TProtocolException(message='Required field footerSummary is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlClusterMetrics(object):
    """
    Attributes:
     - clusterCapacity
     - numRunningTasks
     - numPendingTasks
     - rejectionThreshold
     - tasksCompletedPerMinute

    """


    def __init__(self, clusterCapacity=None, numRunningTasks=None, numPendingTasks=None, rejectionThreshold=None, tasksCompletedPerMinute=None,):
        self.clusterCapacity = clusterCapacity
        self.numRunningTasks = numRunningTasks
        self.numPendingTasks = numPendingTasks
        self.rejectionThreshold = rejectionThreshold
        self.tasksCompletedPerMinute = tasksCompletedPerMinute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.clusterCapacity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.numRunningTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numPendingTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.rejectionThreshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.tasksCompletedPerMinute = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlClusterMetrics')
        if self.clusterCapacity is not None:
            oprot.writeFieldBegin('clusterCapacity', TType.I32, 1)
            oprot.writeI32(self.clusterCapacity)
            oprot.writeFieldEnd()
        if self.numRunningTasks is not None:
            oprot.writeFieldBegin('numRunningTasks', TType.I32, 2)
            oprot.writeI32(self.numRunningTasks)
            oprot.writeFieldEnd()
        if self.numPendingTasks is not None:
            oprot.writeFieldBegin('numPendingTasks', TType.I32, 3)
            oprot.writeI32(self.numPendingTasks)
            oprot.writeFieldEnd()
        if self.rejectionThreshold is not None:
            oprot.writeFieldBegin('rejectionThreshold', TType.DOUBLE, 4)
            oprot.writeDouble(self.rejectionThreshold)
            oprot.writeFieldEnd()
        if self.tasksCompletedPerMinute is not None:
            oprot.writeFieldBegin('tasksCompletedPerMinute', TType.DOUBLE, 5)
            oprot.writeDouble(self.tasksCompletedPerMinute)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlQueryLaneMetrics(object):
    """
    Attributes:
     - fastLaneReservation
     - numFastLaneRunningTasks
     - numFastLanePendingTasks
     - slowLaneReservation
     - numSlowLaneRunningTasks
     - numSlowLanePendingTasks

    """


    def __init__(self, fastLaneReservation=None, numFastLaneRunningTasks=None, numFastLanePendingTasks=None, slowLaneReservation=None, numSlowLaneRunningTasks=None, numSlowLanePendingTasks=None,):
        self.fastLaneReservation = fastLaneReservation
        self.numFastLaneRunningTasks = numFastLaneRunningTasks
        self.numFastLanePendingTasks = numFastLanePendingTasks
        self.slowLaneReservation = slowLaneReservation
        self.numSlowLaneRunningTasks = numSlowLaneRunningTasks
        self.numSlowLanePendingTasks = numSlowLanePendingTasks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.fastLaneReservation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.numFastLaneRunningTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numFastLanePendingTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.slowLaneReservation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numSlowLaneRunningTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.numSlowLanePendingTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlQueryLaneMetrics')
        if self.fastLaneReservation is not None:
            oprot.writeFieldBegin('fastLaneReservation', TType.I32, 1)
            oprot.writeI32(self.fastLaneReservation)
            oprot.writeFieldEnd()
        if self.numFastLaneRunningTasks is not None:
            oprot.writeFieldBegin('numFastLaneRunningTasks', TType.I32, 2)
            oprot.writeI32(self.numFastLaneRunningTasks)
            oprot.writeFieldEnd()
        if self.numFastLanePendingTasks is not None:
            oprot.writeFieldBegin('numFastLanePendingTasks', TType.I32, 3)
            oprot.writeI32(self.numFastLanePendingTasks)
            oprot.writeFieldEnd()
        if self.slowLaneReservation is not None:
            oprot.writeFieldBegin('slowLaneReservation', TType.I32, 4)
            oprot.writeI32(self.slowLaneReservation)
            oprot.writeFieldEnd()
        if self.numSlowLaneRunningTasks is not None:
            oprot.writeFieldBegin('numSlowLaneRunningTasks', TType.I32, 5)
            oprot.writeI32(self.numSlowLaneRunningTasks)
            oprot.writeFieldEnd()
        if self.numSlowLanePendingTasks is not None:
            oprot.writeFieldBegin('numSlowLanePendingTasks', TType.I32, 6)
            oprot.writeI32(self.numSlowLanePendingTasks)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlQueryMetrics(object):
    """
    Attributes:
     - status
     - operationHandle
     - idempotencyType
     - sessionHandle
     - operationStarted
     - queryCost
     - numRunningTasks
     - numPendingTasks
     - numCompletedTasks

    """


    def __init__(self, status=None, operationHandle=None, idempotencyType=None, sessionHandle=None, operationStarted=None, queryCost=None, numRunningTasks=None, numPendingTasks=None, numCompletedTasks=None,):
        self.status = status
        self.operationHandle = operationHandle
        self.idempotencyType = idempotencyType
        self.sessionHandle = sessionHandle
        self.operationStarted = operationStarted
        self.queryCost = queryCost
        self.numRunningTasks = numRunningTasks
        self.numPendingTasks = numPendingTasks
        self.numCompletedTasks = numCompletedTasks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationHandle = TOperationHandle()
                    self.operationHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.idempotencyType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sessionHandle = TSessionHandle()
                    self.sessionHandle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.operationStarted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.queryCost = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.numRunningTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.numPendingTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.numCompletedTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlQueryMetrics')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.operationHandle is not None:
            oprot.writeFieldBegin('operationHandle', TType.STRUCT, 2)
            self.operationHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.idempotencyType is not None:
            oprot.writeFieldBegin('idempotencyType', TType.I32, 3)
            oprot.writeI32(self.idempotencyType)
            oprot.writeFieldEnd()
        if self.sessionHandle is not None:
            oprot.writeFieldBegin('sessionHandle', TType.STRUCT, 4)
            self.sessionHandle.write(oprot)
            oprot.writeFieldEnd()
        if self.operationStarted is not None:
            oprot.writeFieldBegin('operationStarted', TType.I64, 5)
            oprot.writeI64(self.operationStarted)
            oprot.writeFieldEnd()
        if self.queryCost is not None:
            oprot.writeFieldBegin('queryCost', TType.DOUBLE, 6)
            oprot.writeDouble(self.queryCost)
            oprot.writeFieldEnd()
        if self.numRunningTasks is not None:
            oprot.writeFieldBegin('numRunningTasks', TType.I32, 7)
            oprot.writeI32(self.numRunningTasks)
            oprot.writeFieldEnd()
        if self.numPendingTasks is not None:
            oprot.writeFieldBegin('numPendingTasks', TType.I32, 8)
            oprot.writeI32(self.numPendingTasks)
            oprot.writeFieldEnd()
        if self.numCompletedTasks is not None:
            oprot.writeFieldBegin('numCompletedTasks', TType.I32, 9)
            oprot.writeI32(self.numCompletedTasks)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.operationHandle is None:
            raise TProtocolException(message='Required field operationHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlGetLoadInformationReq(object):
    """
    Attributes:
     - includeQueryMetrics

    """


    def __init__(self, includeQueryMetrics=False,):
        self.includeQueryMetrics = includeQueryMetrics

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.includeQueryMetrics = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlGetLoadInformationReq')
        if self.includeQueryMetrics is not None:
            oprot.writeFieldBegin('includeQueryMetrics', TType.BOOL, 1)
            oprot.writeBool(self.includeQueryMetrics)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDBSqlGetLoadInformationResp(object):
    """
    Attributes:
     - status
     - clusterMetrics
     - queryLaneMetrics
     - queryMetrics

    """


    def __init__(self, status=None, clusterMetrics=None, queryLaneMetrics=None, queryMetrics=None,):
        self.status = status
        self.clusterMetrics = clusterMetrics
        self.queryLaneMetrics = queryLaneMetrics
        self.queryMetrics = queryMetrics

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = TStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.clusterMetrics = TDBSqlClusterMetrics()
                    self.clusterMetrics.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.queryLaneMetrics = TDBSqlQueryLaneMetrics()
                    self.queryLaneMetrics.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.queryMetrics = []
                    (_etype268, _size265) = iprot.readListBegin()
                    for _i269 in range(_size265):
                        _elem270 = TDBSqlQueryMetrics()
                        _elem270.read(iprot)
                        self.queryMetrics.append(_elem270)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDBSqlGetLoadInformationResp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.clusterMetrics is not None:
            oprot.writeFieldBegin('clusterMetrics', TType.STRUCT, 2)
            self.clusterMetrics.write(oprot)
            oprot.writeFieldEnd()
        if self.queryLaneMetrics is not None:
            oprot.writeFieldBegin('queryLaneMetrics', TType.STRUCT, 3)
            self.queryLaneMetrics.write(oprot)
            oprot.writeFieldEnd()
        if self.queryMetrics is not None:
            oprot.writeFieldBegin('queryMetrics', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.queryMetrics))
            for iter271 in self.queryMetrics:
                iter271.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TTypeQualifierValue)
TTypeQualifierValue.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'i32Value', None, None, ),  # 1
    (2, TType.STRING, 'stringValue', 'UTF8', None, ),  # 2
)
all_structs.append(TTypeQualifiers)
TTypeQualifiers.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'qualifiers', (TType.STRING, 'UTF8', TType.STRUCT, [TTypeQualifierValue, None], False), None, ),  # 1
)
all_structs.append(TPrimitiveTypeEntry)
TPrimitiveTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRUCT, 'typeQualifiers', [TTypeQualifiers, None], None, ),  # 2
)
all_structs.append(TArrayTypeEntry)
TArrayTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objectTypePtr', None, None, ),  # 1
)
all_structs.append(TMapTypeEntry)
TMapTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'keyTypePtr', None, None, ),  # 1
    (2, TType.I32, 'valueTypePtr', None, None, ),  # 2
)
all_structs.append(TStructTypeEntry)
TStructTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'nameToTypePtr', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 1
)
all_structs.append(TUnionTypeEntry)
TUnionTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'nameToTypePtr', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 1
)
all_structs.append(TUserDefinedTypeEntry)
TUserDefinedTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'typeClassName', 'UTF8', None, ),  # 1
)
all_structs.append(TTypeEntry)
TTypeEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'primitiveEntry', [TPrimitiveTypeEntry, None], None, ),  # 1
    (2, TType.STRUCT, 'arrayEntry', [TArrayTypeEntry, None], None, ),  # 2
    (3, TType.STRUCT, 'mapEntry', [TMapTypeEntry, None], None, ),  # 3
    (4, TType.STRUCT, 'structEntry', [TStructTypeEntry, None], None, ),  # 4
    (5, TType.STRUCT, 'unionEntry', [TUnionTypeEntry, None], None, ),  # 5
    (6, TType.STRUCT, 'userDefinedTypeEntry', [TUserDefinedTypeEntry, None], None, ),  # 6
)
all_structs.append(TTypeDesc)
TTypeDesc.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'types', (TType.STRUCT, [TTypeEntry, None], False), None, ),  # 1
)
all_structs.append(TColumnDesc)
TColumnDesc.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'columnName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'typeDesc', [TTypeDesc, None], None, ),  # 2
    (3, TType.I32, 'position', None, None, ),  # 3
    (4, TType.STRING, 'comment', 'UTF8', None, ),  # 4
)
all_structs.append(TTableSchema)
TTableSchema.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'columns', (TType.STRUCT, [TColumnDesc, None], False), None, ),  # 1
)
all_structs.append(TBoolValue)
TBoolValue.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'value', None, None, ),  # 1
)
all_structs.append(TByteValue)
TByteValue.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'value', None, None, ),  # 1
)
all_structs.append(TI16Value)
TI16Value.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'value', None, None, ),  # 1
)
all_structs.append(TI32Value)
TI32Value.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'value', None, None, ),  # 1
)
all_structs.append(TI64Value)
TI64Value.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'value', None, None, ),  # 1
)
all_structs.append(TDoubleValue)
TDoubleValue.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'value', None, None, ),  # 1
)
all_structs.append(TStringValue)
TStringValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
)
all_structs.append(TColumnValue)
TColumnValue.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'boolVal', [TBoolValue, None], None, ),  # 1
    (2, TType.STRUCT, 'byteVal', [TByteValue, None], None, ),  # 2
    (3, TType.STRUCT, 'i16Val', [TI16Value, None], None, ),  # 3
    (4, TType.STRUCT, 'i32Val', [TI32Value, None], None, ),  # 4
    (5, TType.STRUCT, 'i64Val', [TI64Value, None], None, ),  # 5
    (6, TType.STRUCT, 'doubleVal', [TDoubleValue, None], None, ),  # 6
    (7, TType.STRUCT, 'stringVal', [TStringValue, None], None, ),  # 7
)
all_structs.append(TRow)
TRow.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'colVals', (TType.STRUCT, [TColumnValue, None], False), None, ),  # 1
)
all_structs.append(TBoolColumn)
TBoolColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.BOOL, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TByteColumn)
TByteColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.BYTE, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TI16Column)
TI16Column.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I16, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TI32Column)
TI32Column.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I32, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TI64Column)
TI64Column.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.I64, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TDoubleColumn)
TDoubleColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TStringColumn)
TStringColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TBinaryColumn)
TBinaryColumn.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRING, 'BINARY', False), None, ),  # 1
    (2, TType.STRING, 'nulls', 'BINARY', None, ),  # 2
)
all_structs.append(TColumn)
TColumn.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'boolVal', [TBoolColumn, None], None, ),  # 1
    (2, TType.STRUCT, 'byteVal', [TByteColumn, None], None, ),  # 2
    (3, TType.STRUCT, 'i16Val', [TI16Column, None], None, ),  # 3
    (4, TType.STRUCT, 'i32Val', [TI32Column, None], None, ),  # 4
    (5, TType.STRUCT, 'i64Val', [TI64Column, None], None, ),  # 5
    (6, TType.STRUCT, 'doubleVal', [TDoubleColumn, None], None, ),  # 6
    (7, TType.STRUCT, 'stringVal', [TStringColumn, None], None, ),  # 7
    (8, TType.STRUCT, 'binaryVal', [TBinaryColumn, None], None, ),  # 8
)
all_structs.append(TSparkArrowBatch)
TSparkArrowBatch.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'batch', 'BINARY', None, ),  # 1
    (2, TType.I64, 'rowCount', None, None, ),  # 2
)
all_structs.append(TSparkArrowResultLink)
TSparkArrowResultLink.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileLink', 'UTF8', None, ),  # 1
    (2, TType.I64, 'expiryTime', None, None, ),  # 2
    (3, TType.I64, 'startRowOffset', None, None, ),  # 3
    (4, TType.I64, 'rowCount', None, None, ),  # 4
    (5, TType.I64, 'bytesNum', None, None, ),  # 5
)
all_structs.append(TDBSqlCloudResultFile)
TDBSqlCloudResultFile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'filePath', 'UTF8', None, ),  # 1
    (2, TType.I64, 'startRowOffset', None, None, ),  # 2
    (3, TType.I64, 'rowCount', None, None, ),  # 3
    (4, TType.I64, 'uncompressedBytes', None, None, ),  # 4
    (5, TType.I64, 'compressedBytes', None, None, ),  # 5
)
all_structs.append(TRowSet)
TRowSet.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'startRowOffset', None, None, ),  # 1
    (2, TType.LIST, 'rows', (TType.STRUCT, [TRow, None], False), None, ),  # 2
    (3, TType.LIST, 'columns', (TType.STRUCT, [TColumn, None], False), None, ),  # 3
    (4, TType.STRING, 'binaryColumns', 'BINARY', None, ),  # 4
    (5, TType.I32, 'columnCount', None, None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.LIST, 'arrowBatches', (TType.STRUCT, [TSparkArrowBatch, None], False), None, ),  # 1281
    (1282, TType.LIST, 'resultLinks', (TType.STRUCT, [TSparkArrowResultLink, None], False), None, ),  # 1282
)
all_structs.append(TDBSqlTempView)
TDBSqlTempView.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sqlStatement', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'viewSchema', 'UTF8', None, ),  # 4
)
all_structs.append(TDBSqlSessionCapabilities)
TDBSqlSessionCapabilities.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'supportsMultipleCatalogs', None, None, ),  # 1
)
all_structs.append(TExpressionInfo)
TExpressionInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'className', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'usage', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'extended', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'db', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'arguments', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'examples', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'note', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'group', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'since', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'deprecated', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'source', 'UTF8', None, ),  # 12
)
all_structs.append(TDBSqlConfValue)
TDBSqlConfValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
)
all_structs.append(TDBSqlSessionConf)
TDBSqlSessionConf.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'confs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'tempViews', (TType.STRUCT, [TDBSqlTempView, None], False), None, ),  # 2
    (3, TType.STRING, 'currentDatabase', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'currentCatalog', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'sessionCapabilities', [TDBSqlSessionCapabilities, None], None, ),  # 5
    (6, TType.LIST, 'expressionsInfos', (TType.STRUCT, [TExpressionInfo, None], False), None, ),  # 6
    (7, TType.MAP, 'internalConfs', (TType.STRING, 'UTF8', TType.STRUCT, [TDBSqlConfValue, None], False), None, ),  # 7
)
all_structs.append(TStatus)
TStatus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'statusCode', None, None, ),  # 1
    (2, TType.LIST, 'infoMessages', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'sqlState', 'UTF8', None, ),  # 3
    (4, TType.I32, 'errorCode', None, None, ),  # 4
    (5, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'displayMessage', 'UTF8', None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRING, 'responseValidation', 'BINARY', None, ),  # 3329
)
all_structs.append(TNamespace)
TNamespace.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catalogName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'schemaName', 'UTF8', None, ),  # 2
)
all_structs.append(THandleIdentifier)
THandleIdentifier.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guid', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'secret', 'BINARY', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.I16, 'executionVersion', None, None, ),  # 3329
)
all_structs.append(TSessionHandle)
TSessionHandle.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionId', [THandleIdentifier, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.I32, 'serverProtocolVersion', None, None, ),  # 3329
)
all_structs.append(TOperationHandle)
TOperationHandle.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 1
    (2, TType.I32, 'operationType', None, None, ),  # 2
    (3, TType.BOOL, 'hasResultSet', None, None, ),  # 3
    (4, TType.DOUBLE, 'modifiedRowCount', None, None, ),  # 4
)
all_structs.append(TOpenSessionReq)
TOpenSessionReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'client_protocol', None,     -7, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'configuration', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.LIST, 'getInfos', (TType.I32, None, False), None, ),  # 1281
    (1282, TType.I64, 'client_protocol_i64', None, None, ),  # 1282
    (1283, TType.MAP, 'connectionProperties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1283
    (1284, TType.STRUCT, 'initialNamespace', [TNamespace, None], None, ),  # 1284
    (1285, TType.BOOL, 'canUseMultipleCatalogs', None, None, ),  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'sessionId', [THandleIdentifier, None], None, ),  # 3329
)
all_structs.append(TOpenSessionResp)
TOpenSessionResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.I32, 'serverProtocolVersion', None, None, ),  # 2
    (3, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 3
    (4, TType.MAP, 'configuration', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.LIST, 'getInfos', (TType.STRUCT, [TGetInfoValue, None], False), None, ),  # 1281
    None,  # 1282
    None,  # 1283
    (1284, TType.STRUCT, 'initialNamespace', [TNamespace, None], None, ),  # 1284
    (1285, TType.BOOL, 'canUseMultipleCatalogs', None, None, ),  # 1285
)
all_structs.append(TCloseSessionReq)
TCloseSessionReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
)
all_structs.append(TCloseSessionResp)
TCloseSessionResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TGetInfoValue)
TGetInfoValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.I16, 'smallIntValue', None, None, ),  # 2
    (3, TType.I32, 'integerBitmask', None, None, ),  # 3
    (4, TType.I32, 'integerFlag', None, None, ),  # 4
    (5, TType.I32, 'binaryValue', None, None, ),  # 5
    (6, TType.I64, 'lenValue', None, None, ),  # 6
)
all_structs.append(TGetInfoReq)
TGetInfoReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.I32, 'infoType', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3329
)
all_structs.append(TGetInfoResp)
TGetInfoResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'infoValue', [TGetInfoValue, None], None, ),  # 2
)
all_structs.append(TSparkGetDirectResults)
TSparkGetDirectResults.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'maxRows', None, None, ),  # 1
    (2, TType.I64, 'maxBytes', None, None, ),  # 2
)
all_structs.append(TSparkDirectResults)
TSparkDirectResults.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationStatus', [TGetOperationStatusResp, None], None, ),  # 1
    (2, TType.STRUCT, 'resultSetMetadata', [TGetResultSetMetadataResp, None], None, ),  # 2
    (3, TType.STRUCT, 'resultSet', [TFetchResultsResp, None], None, ),  # 3
    (4, TType.STRUCT, 'closeOperation', [TCloseOperationResp, None], None, ),  # 4
)
all_structs.append(TSparkArrowTypes)
TSparkArrowTypes.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'timestampAsArrow', None, None, ),  # 1
    (2, TType.BOOL, 'decimalAsArrow', None, None, ),  # 2
    (3, TType.BOOL, 'complexTypesAsArrow', None, None, ),  # 3
    (4, TType.BOOL, 'intervalTypesAsArrow', None, None, ),  # 4
)
all_structs.append(TExecuteStatementReq)
TExecuteStatementReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'statement', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'confOverlay', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.BOOL, 'runAsync', None, False, ),  # 4
    (5, TType.I64, 'queryTimeout', None, 0, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'canReadArrowResult', None, None, ),  # 1282
    (1283, TType.BOOL, 'canDownloadResult', None, None, ),  # 1283
    (1284, TType.BOOL, 'canDecompressLZ4Result', None, None, ),  # 1284
    (1285, TType.I64, 'maxBytesPerFile', None, None, ),  # 1285
    (1286, TType.STRUCT, 'useArrowNativeTypes', [TSparkArrowTypes, None], None, ),  # 1286
    (1287, TType.I64, 'resultRowLimit', None, None, ),  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
    (3331, TType.BOOL, 'rejectHighCostQueries', None, None, ),  # 3331
    (3332, TType.DOUBLE, 'estimatedCost', None, None, ),  # 3332
    (3333, TType.I16, 'executionVersion', None, None, ),  # 3333
    (3334, TType.STRING, 'requestValidation', 'BINARY', None, ),  # 3334
    (3335, TType.I32, 'resultPersistenceMode', None, None, ),  # 3335
    (3336, TType.BOOL, 'trimArrowBatchesToLimit', None, None, ),  # 3336
)
all_structs.append(TExecuteStatementResp)
TExecuteStatementResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.BOOL, 'executionRejected', None, None, ),  # 3329
    (3330, TType.DOUBLE, 'maxClusterCapacity', None, None, ),  # 3330
    (3331, TType.DOUBLE, 'queryCost', None, None, ),  # 3331
    (3332, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3332
    (3333, TType.DOUBLE, 'currentClusterLoad', None, None, ),  # 3333
    (3334, TType.I32, 'idempotencyType', None, None, ),  # 3334
)
all_structs.append(TGetTypeInfoReq)
TGetTypeInfoReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetTypeInfoResp)
TGetTypeInfoResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetCatalogsReq)
TGetCatalogsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetCatalogsResp)
TGetCatalogsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetSchemasReq)
TGetSchemasReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetSchemasResp)
TGetSchemasResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetTablesReq)
TGetTablesReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'tableTypes', (TType.STRING, 'UTF8', False), None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetTablesResp)
TGetTablesResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetTableTypesReq)
TGetTableTypesReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetTableTypesResp)
TGetTableTypesResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetColumnsReq)
TGetColumnsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'columnName', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetColumnsResp)
TGetColumnsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetFunctionsReq)
TGetFunctionsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'functionName', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetFunctionsResp)
TGetFunctionsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetPrimaryKeysReq)
TGetPrimaryKeysReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'catalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tableName', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetPrimaryKeysResp)
TGetPrimaryKeysResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetCrossReferenceReq)
TGetCrossReferenceReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'parentCatalogName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentSchemaName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'parentTableName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'foreignCatalogName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'foreignSchemaName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'foreignTableName', 'UTF8', None, ),  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'getDirectResults', [TSparkGetDirectResults, None], None, ),  # 1281
    (1282, TType.BOOL, 'runAsync', None, False, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'operationId', [THandleIdentifier, None], None, ),  # 3329
    (3330, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3330
)
all_structs.append(TGetCrossReferenceResp)
TGetCrossReferenceResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'directResults', [TSparkDirectResults, None], None, ),  # 1281
)
all_structs.append(TGetOperationStatusReq)
TGetOperationStatusReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
    (2, TType.BOOL, 'getProgressUpdate', None, None, ),  # 2
)
all_structs.append(TGetOperationStatusResp)
TGetOperationStatusResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.I32, 'operationState', None, None, ),  # 2
    (3, TType.STRING, 'sqlState', 'UTF8', None, ),  # 3
    (4, TType.I32, 'errorCode', None, None, ),  # 4
    (5, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'taskStatus', 'UTF8', None, ),  # 6
    (7, TType.I64, 'operationStarted', None, None, ),  # 7
    (8, TType.I64, 'operationCompleted', None, None, ),  # 8
    (9, TType.BOOL, 'hasResultSet', None, None, ),  # 9
    (10, TType.STRUCT, 'progressUpdateResponse', [TProgressUpdateResp, None], None, ),  # 10
    (11, TType.I64, 'numModifiedRows', None, None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRING, 'displayMessage', 'UTF8', None, ),  # 1281
    (1282, TType.STRING, 'diagnosticInfo', 'UTF8', None, ),  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRING, 'responseValidation', 'BINARY', None, ),  # 3329
    (3330, TType.I32, 'idempotencyType', None, None, ),  # 3330
    (3331, TType.I64, 'statementTimeout', None, None, ),  # 3331
    (3332, TType.I32, 'statementTimeoutLevel', None, None, ),  # 3332
)
all_structs.append(TCancelOperationReq)
TCancelOperationReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.I16, 'executionVersion', None, None, ),  # 3329
    (3330, TType.BOOL, 'replacedByNextAttempt', None, None, ),  # 3330
)
all_structs.append(TCancelOperationResp)
TCancelOperationResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TCloseOperationReq)
TCloseOperationReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
)
all_structs.append(TCloseOperationResp)
TCloseOperationResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TGetResultSetMetadataReq)
TGetResultSetMetadataReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.BOOL, 'includeCloudResultFiles', None, None, ),  # 3329
)
all_structs.append(TGetResultSetMetadataResp)
TGetResultSetMetadataResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'schema', [TTableSchema, None], None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.I32, 'resultFormat', None, None, ),  # 1281
    (1282, TType.BOOL, 'lz4Compressed', None, None, ),  # 1282
    (1283, TType.STRING, 'arrowSchema', 'BINARY', None, ),  # 1283
    (1284, TType.I32, 'cacheLookupResult', None, None, ),  # 1284
    (1285, TType.I64, 'uncompressedBytes', None, None, ),  # 1285
    (1286, TType.I64, 'compressedBytes', None, None, ),  # 1286
    (1287, TType.BOOL, 'isStagingOperation', None, None, ),  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.I32, 'reasonForNoCloudFetch', None, None, ),  # 3329
    (3330, TType.LIST, 'resultFiles', (TType.STRUCT, [TDBSqlCloudResultFile, None], False), None, ),  # 3330
    (3331, TType.STRING, 'manifestFile', 'UTF8', None, ),  # 3331
    (3332, TType.STRING, 'manifestFileFormat', 'UTF8', None, ),  # 3332
)
all_structs.append(TFetchResultsReq)
TFetchResultsReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 1
    (2, TType.I32, 'orientation', None,     0, ),  # 2
    (3, TType.I64, 'maxRows', None, None, ),  # 3
    (4, TType.I16, 'fetchType', None, 0, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.I64, 'maxBytes', None, None, ),  # 1281
    (1282, TType.I64, 'startRowOffset', None, None, ),  # 1282
    (1283, TType.BOOL, 'includeResultSetMetadata', None, None, ),  # 1283
)
all_structs.append(TFetchResultsResp)
TFetchResultsResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.BOOL, 'hasMoreRows', None, None, ),  # 2
    (3, TType.STRUCT, 'results', [TRowSet, None], None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    (1281, TType.STRUCT, 'resultSetMetadata', [TGetResultSetMetadataResp, None], None, ),  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRING, 'responseValidation', 'BINARY', None, ),  # 3329
)
all_structs.append(TGetDelegationTokenReq)
TGetDelegationTokenReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'owner', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'renewer', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3329
)
all_structs.append(TGetDelegationTokenResp)
TGetDelegationTokenResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRING, 'delegationToken', 'UTF8', None, ),  # 2
)
all_structs.append(TCancelDelegationTokenReq)
TCancelDelegationTokenReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'delegationToken', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3329
)
all_structs.append(TCancelDelegationTokenResp)
TCancelDelegationTokenResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TRenewDelegationTokenReq)
TRenewDelegationTokenReq.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 1
    (2, TType.STRING, 'delegationToken', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    None,  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    None,  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    None,  # 1010
    None,  # 1011
    None,  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    None,  # 1020
    None,  # 1021
    None,  # 1022
    None,  # 1023
    None,  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    None,  # 1030
    None,  # 1031
    None,  # 1032
    None,  # 1033
    None,  # 1034
    None,  # 1035
    None,  # 1036
    None,  # 1037
    None,  # 1038
    None,  # 1039
    None,  # 1040
    None,  # 1041
    None,  # 1042
    None,  # 1043
    None,  # 1044
    None,  # 1045
    None,  # 1046
    None,  # 1047
    None,  # 1048
    None,  # 1049
    None,  # 1050
    None,  # 1051
    None,  # 1052
    None,  # 1053
    None,  # 1054
    None,  # 1055
    None,  # 1056
    None,  # 1057
    None,  # 1058
    None,  # 1059
    None,  # 1060
    None,  # 1061
    None,  # 1062
    None,  # 1063
    None,  # 1064
    None,  # 1065
    None,  # 1066
    None,  # 1067
    None,  # 1068
    None,  # 1069
    None,  # 1070
    None,  # 1071
    None,  # 1072
    None,  # 1073
    None,  # 1074
    None,  # 1075
    None,  # 1076
    None,  # 1077
    None,  # 1078
    None,  # 1079
    None,  # 1080
    None,  # 1081
    None,  # 1082
    None,  # 1083
    None,  # 1084
    None,  # 1085
    None,  # 1086
    None,  # 1087
    None,  # 1088
    None,  # 1089
    None,  # 1090
    None,  # 1091
    None,  # 1092
    None,  # 1093
    None,  # 1094
    None,  # 1095
    None,  # 1096
    None,  # 1097
    None,  # 1098
    None,  # 1099
    None,  # 1100
    None,  # 1101
    None,  # 1102
    None,  # 1103
    None,  # 1104
    None,  # 1105
    None,  # 1106
    None,  # 1107
    None,  # 1108
    None,  # 1109
    None,  # 1110
    None,  # 1111
    None,  # 1112
    None,  # 1113
    None,  # 1114
    None,  # 1115
    None,  # 1116
    None,  # 1117
    None,  # 1118
    None,  # 1119
    None,  # 1120
    None,  # 1121
    None,  # 1122
    None,  # 1123
    None,  # 1124
    None,  # 1125
    None,  # 1126
    None,  # 1127
    None,  # 1128
    None,  # 1129
    None,  # 1130
    None,  # 1131
    None,  # 1132
    None,  # 1133
    None,  # 1134
    None,  # 1135
    None,  # 1136
    None,  # 1137
    None,  # 1138
    None,  # 1139
    None,  # 1140
    None,  # 1141
    None,  # 1142
    None,  # 1143
    None,  # 1144
    None,  # 1145
    None,  # 1146
    None,  # 1147
    None,  # 1148
    None,  # 1149
    None,  # 1150
    None,  # 1151
    None,  # 1152
    None,  # 1153
    None,  # 1154
    None,  # 1155
    None,  # 1156
    None,  # 1157
    None,  # 1158
    None,  # 1159
    None,  # 1160
    None,  # 1161
    None,  # 1162
    None,  # 1163
    None,  # 1164
    None,  # 1165
    None,  # 1166
    None,  # 1167
    None,  # 1168
    None,  # 1169
    None,  # 1170
    None,  # 1171
    None,  # 1172
    None,  # 1173
    None,  # 1174
    None,  # 1175
    None,  # 1176
    None,  # 1177
    None,  # 1178
    None,  # 1179
    None,  # 1180
    None,  # 1181
    None,  # 1182
    None,  # 1183
    None,  # 1184
    None,  # 1185
    None,  # 1186
    None,  # 1187
    None,  # 1188
    None,  # 1189
    None,  # 1190
    None,  # 1191
    None,  # 1192
    None,  # 1193
    None,  # 1194
    None,  # 1195
    None,  # 1196
    None,  # 1197
    None,  # 1198
    None,  # 1199
    None,  # 1200
    None,  # 1201
    None,  # 1202
    None,  # 1203
    None,  # 1204
    None,  # 1205
    None,  # 1206
    None,  # 1207
    None,  # 1208
    None,  # 1209
    None,  # 1210
    None,  # 1211
    None,  # 1212
    None,  # 1213
    None,  # 1214
    None,  # 1215
    None,  # 1216
    None,  # 1217
    None,  # 1218
    None,  # 1219
    None,  # 1220
    None,  # 1221
    None,  # 1222
    None,  # 1223
    None,  # 1224
    None,  # 1225
    None,  # 1226
    None,  # 1227
    None,  # 1228
    None,  # 1229
    None,  # 1230
    None,  # 1231
    None,  # 1232
    None,  # 1233
    None,  # 1234
    None,  # 1235
    None,  # 1236
    None,  # 1237
    None,  # 1238
    None,  # 1239
    None,  # 1240
    None,  # 1241
    None,  # 1242
    None,  # 1243
    None,  # 1244
    None,  # 1245
    None,  # 1246
    None,  # 1247
    None,  # 1248
    None,  # 1249
    None,  # 1250
    None,  # 1251
    None,  # 1252
    None,  # 1253
    None,  # 1254
    None,  # 1255
    None,  # 1256
    None,  # 1257
    None,  # 1258
    None,  # 1259
    None,  # 1260
    None,  # 1261
    None,  # 1262
    None,  # 1263
    None,  # 1264
    None,  # 1265
    None,  # 1266
    None,  # 1267
    None,  # 1268
    None,  # 1269
    None,  # 1270
    None,  # 1271
    None,  # 1272
    None,  # 1273
    None,  # 1274
    None,  # 1275
    None,  # 1276
    None,  # 1277
    None,  # 1278
    None,  # 1279
    None,  # 1280
    None,  # 1281
    None,  # 1282
    None,  # 1283
    None,  # 1284
    None,  # 1285
    None,  # 1286
    None,  # 1287
    None,  # 1288
    None,  # 1289
    None,  # 1290
    None,  # 1291
    None,  # 1292
    None,  # 1293
    None,  # 1294
    None,  # 1295
    None,  # 1296
    None,  # 1297
    None,  # 1298
    None,  # 1299
    None,  # 1300
    None,  # 1301
    None,  # 1302
    None,  # 1303
    None,  # 1304
    None,  # 1305
    None,  # 1306
    None,  # 1307
    None,  # 1308
    None,  # 1309
    None,  # 1310
    None,  # 1311
    None,  # 1312
    None,  # 1313
    None,  # 1314
    None,  # 1315
    None,  # 1316
    None,  # 1317
    None,  # 1318
    None,  # 1319
    None,  # 1320
    None,  # 1321
    None,  # 1322
    None,  # 1323
    None,  # 1324
    None,  # 1325
    None,  # 1326
    None,  # 1327
    None,  # 1328
    None,  # 1329
    None,  # 1330
    None,  # 1331
    None,  # 1332
    None,  # 1333
    None,  # 1334
    None,  # 1335
    None,  # 1336
    None,  # 1337
    None,  # 1338
    None,  # 1339
    None,  # 1340
    None,  # 1341
    None,  # 1342
    None,  # 1343
    None,  # 1344
    None,  # 1345
    None,  # 1346
    None,  # 1347
    None,  # 1348
    None,  # 1349
    None,  # 1350
    None,  # 1351
    None,  # 1352
    None,  # 1353
    None,  # 1354
    None,  # 1355
    None,  # 1356
    None,  # 1357
    None,  # 1358
    None,  # 1359
    None,  # 1360
    None,  # 1361
    None,  # 1362
    None,  # 1363
    None,  # 1364
    None,  # 1365
    None,  # 1366
    None,  # 1367
    None,  # 1368
    None,  # 1369
    None,  # 1370
    None,  # 1371
    None,  # 1372
    None,  # 1373
    None,  # 1374
    None,  # 1375
    None,  # 1376
    None,  # 1377
    None,  # 1378
    None,  # 1379
    None,  # 1380
    None,  # 1381
    None,  # 1382
    None,  # 1383
    None,  # 1384
    None,  # 1385
    None,  # 1386
    None,  # 1387
    None,  # 1388
    None,  # 1389
    None,  # 1390
    None,  # 1391
    None,  # 1392
    None,  # 1393
    None,  # 1394
    None,  # 1395
    None,  # 1396
    None,  # 1397
    None,  # 1398
    None,  # 1399
    None,  # 1400
    None,  # 1401
    None,  # 1402
    None,  # 1403
    None,  # 1404
    None,  # 1405
    None,  # 1406
    None,  # 1407
    None,  # 1408
    None,  # 1409
    None,  # 1410
    None,  # 1411
    None,  # 1412
    None,  # 1413
    None,  # 1414
    None,  # 1415
    None,  # 1416
    None,  # 1417
    None,  # 1418
    None,  # 1419
    None,  # 1420
    None,  # 1421
    None,  # 1422
    None,  # 1423
    None,  # 1424
    None,  # 1425
    None,  # 1426
    None,  # 1427
    None,  # 1428
    None,  # 1429
    None,  # 1430
    None,  # 1431
    None,  # 1432
    None,  # 1433
    None,  # 1434
    None,  # 1435
    None,  # 1436
    None,  # 1437
    None,  # 1438
    None,  # 1439
    None,  # 1440
    None,  # 1441
    None,  # 1442
    None,  # 1443
    None,  # 1444
    None,  # 1445
    None,  # 1446
    None,  # 1447
    None,  # 1448
    None,  # 1449
    None,  # 1450
    None,  # 1451
    None,  # 1452
    None,  # 1453
    None,  # 1454
    None,  # 1455
    None,  # 1456
    None,  # 1457
    None,  # 1458
    None,  # 1459
    None,  # 1460
    None,  # 1461
    None,  # 1462
    None,  # 1463
    None,  # 1464
    None,  # 1465
    None,  # 1466
    None,  # 1467
    None,  # 1468
    None,  # 1469
    None,  # 1470
    None,  # 1471
    None,  # 1472
    None,  # 1473
    None,  # 1474
    None,  # 1475
    None,  # 1476
    None,  # 1477
    None,  # 1478
    None,  # 1479
    None,  # 1480
    None,  # 1481
    None,  # 1482
    None,  # 1483
    None,  # 1484
    None,  # 1485
    None,  # 1486
    None,  # 1487
    None,  # 1488
    None,  # 1489
    None,  # 1490
    None,  # 1491
    None,  # 1492
    None,  # 1493
    None,  # 1494
    None,  # 1495
    None,  # 1496
    None,  # 1497
    None,  # 1498
    None,  # 1499
    None,  # 1500
    None,  # 1501
    None,  # 1502
    None,  # 1503
    None,  # 1504
    None,  # 1505
    None,  # 1506
    None,  # 1507
    None,  # 1508
    None,  # 1509
    None,  # 1510
    None,  # 1511
    None,  # 1512
    None,  # 1513
    None,  # 1514
    None,  # 1515
    None,  # 1516
    None,  # 1517
    None,  # 1518
    None,  # 1519
    None,  # 1520
    None,  # 1521
    None,  # 1522
    None,  # 1523
    None,  # 1524
    None,  # 1525
    None,  # 1526
    None,  # 1527
    None,  # 1528
    None,  # 1529
    None,  # 1530
    None,  # 1531
    None,  # 1532
    None,  # 1533
    None,  # 1534
    None,  # 1535
    None,  # 1536
    None,  # 1537
    None,  # 1538
    None,  # 1539
    None,  # 1540
    None,  # 1541
    None,  # 1542
    None,  # 1543
    None,  # 1544
    None,  # 1545
    None,  # 1546
    None,  # 1547
    None,  # 1548
    None,  # 1549
    None,  # 1550
    None,  # 1551
    None,  # 1552
    None,  # 1553
    None,  # 1554
    None,  # 1555
    None,  # 1556
    None,  # 1557
    None,  # 1558
    None,  # 1559
    None,  # 1560
    None,  # 1561
    None,  # 1562
    None,  # 1563
    None,  # 1564
    None,  # 1565
    None,  # 1566
    None,  # 1567
    None,  # 1568
    None,  # 1569
    None,  # 1570
    None,  # 1571
    None,  # 1572
    None,  # 1573
    None,  # 1574
    None,  # 1575
    None,  # 1576
    None,  # 1577
    None,  # 1578
    None,  # 1579
    None,  # 1580
    None,  # 1581
    None,  # 1582
    None,  # 1583
    None,  # 1584
    None,  # 1585
    None,  # 1586
    None,  # 1587
    None,  # 1588
    None,  # 1589
    None,  # 1590
    None,  # 1591
    None,  # 1592
    None,  # 1593
    None,  # 1594
    None,  # 1595
    None,  # 1596
    None,  # 1597
    None,  # 1598
    None,  # 1599
    None,  # 1600
    None,  # 1601
    None,  # 1602
    None,  # 1603
    None,  # 1604
    None,  # 1605
    None,  # 1606
    None,  # 1607
    None,  # 1608
    None,  # 1609
    None,  # 1610
    None,  # 1611
    None,  # 1612
    None,  # 1613
    None,  # 1614
    None,  # 1615
    None,  # 1616
    None,  # 1617
    None,  # 1618
    None,  # 1619
    None,  # 1620
    None,  # 1621
    None,  # 1622
    None,  # 1623
    None,  # 1624
    None,  # 1625
    None,  # 1626
    None,  # 1627
    None,  # 1628
    None,  # 1629
    None,  # 1630
    None,  # 1631
    None,  # 1632
    None,  # 1633
    None,  # 1634
    None,  # 1635
    None,  # 1636
    None,  # 1637
    None,  # 1638
    None,  # 1639
    None,  # 1640
    None,  # 1641
    None,  # 1642
    None,  # 1643
    None,  # 1644
    None,  # 1645
    None,  # 1646
    None,  # 1647
    None,  # 1648
    None,  # 1649
    None,  # 1650
    None,  # 1651
    None,  # 1652
    None,  # 1653
    None,  # 1654
    None,  # 1655
    None,  # 1656
    None,  # 1657
    None,  # 1658
    None,  # 1659
    None,  # 1660
    None,  # 1661
    None,  # 1662
    None,  # 1663
    None,  # 1664
    None,  # 1665
    None,  # 1666
    None,  # 1667
    None,  # 1668
    None,  # 1669
    None,  # 1670
    None,  # 1671
    None,  # 1672
    None,  # 1673
    None,  # 1674
    None,  # 1675
    None,  # 1676
    None,  # 1677
    None,  # 1678
    None,  # 1679
    None,  # 1680
    None,  # 1681
    None,  # 1682
    None,  # 1683
    None,  # 1684
    None,  # 1685
    None,  # 1686
    None,  # 1687
    None,  # 1688
    None,  # 1689
    None,  # 1690
    None,  # 1691
    None,  # 1692
    None,  # 1693
    None,  # 1694
    None,  # 1695
    None,  # 1696
    None,  # 1697
    None,  # 1698
    None,  # 1699
    None,  # 1700
    None,  # 1701
    None,  # 1702
    None,  # 1703
    None,  # 1704
    None,  # 1705
    None,  # 1706
    None,  # 1707
    None,  # 1708
    None,  # 1709
    None,  # 1710
    None,  # 1711
    None,  # 1712
    None,  # 1713
    None,  # 1714
    None,  # 1715
    None,  # 1716
    None,  # 1717
    None,  # 1718
    None,  # 1719
    None,  # 1720
    None,  # 1721
    None,  # 1722
    None,  # 1723
    None,  # 1724
    None,  # 1725
    None,  # 1726
    None,  # 1727
    None,  # 1728
    None,  # 1729
    None,  # 1730
    None,  # 1731
    None,  # 1732
    None,  # 1733
    None,  # 1734
    None,  # 1735
    None,  # 1736
    None,  # 1737
    None,  # 1738
    None,  # 1739
    None,  # 1740
    None,  # 1741
    None,  # 1742
    None,  # 1743
    None,  # 1744
    None,  # 1745
    None,  # 1746
    None,  # 1747
    None,  # 1748
    None,  # 1749
    None,  # 1750
    None,  # 1751
    None,  # 1752
    None,  # 1753
    None,  # 1754
    None,  # 1755
    None,  # 1756
    None,  # 1757
    None,  # 1758
    None,  # 1759
    None,  # 1760
    None,  # 1761
    None,  # 1762
    None,  # 1763
    None,  # 1764
    None,  # 1765
    None,  # 1766
    None,  # 1767
    None,  # 1768
    None,  # 1769
    None,  # 1770
    None,  # 1771
    None,  # 1772
    None,  # 1773
    None,  # 1774
    None,  # 1775
    None,  # 1776
    None,  # 1777
    None,  # 1778
    None,  # 1779
    None,  # 1780
    None,  # 1781
    None,  # 1782
    None,  # 1783
    None,  # 1784
    None,  # 1785
    None,  # 1786
    None,  # 1787
    None,  # 1788
    None,  # 1789
    None,  # 1790
    None,  # 1791
    None,  # 1792
    None,  # 1793
    None,  # 1794
    None,  # 1795
    None,  # 1796
    None,  # 1797
    None,  # 1798
    None,  # 1799
    None,  # 1800
    None,  # 1801
    None,  # 1802
    None,  # 1803
    None,  # 1804
    None,  # 1805
    None,  # 1806
    None,  # 1807
    None,  # 1808
    None,  # 1809
    None,  # 1810
    None,  # 1811
    None,  # 1812
    None,  # 1813
    None,  # 1814
    None,  # 1815
    None,  # 1816
    None,  # 1817
    None,  # 1818
    None,  # 1819
    None,  # 1820
    None,  # 1821
    None,  # 1822
    None,  # 1823
    None,  # 1824
    None,  # 1825
    None,  # 1826
    None,  # 1827
    None,  # 1828
    None,  # 1829
    None,  # 1830
    None,  # 1831
    None,  # 1832
    None,  # 1833
    None,  # 1834
    None,  # 1835
    None,  # 1836
    None,  # 1837
    None,  # 1838
    None,  # 1839
    None,  # 1840
    None,  # 1841
    None,  # 1842
    None,  # 1843
    None,  # 1844
    None,  # 1845
    None,  # 1846
    None,  # 1847
    None,  # 1848
    None,  # 1849
    None,  # 1850
    None,  # 1851
    None,  # 1852
    None,  # 1853
    None,  # 1854
    None,  # 1855
    None,  # 1856
    None,  # 1857
    None,  # 1858
    None,  # 1859
    None,  # 1860
    None,  # 1861
    None,  # 1862
    None,  # 1863
    None,  # 1864
    None,  # 1865
    None,  # 1866
    None,  # 1867
    None,  # 1868
    None,  # 1869
    None,  # 1870
    None,  # 1871
    None,  # 1872
    None,  # 1873
    None,  # 1874
    None,  # 1875
    None,  # 1876
    None,  # 1877
    None,  # 1878
    None,  # 1879
    None,  # 1880
    None,  # 1881
    None,  # 1882
    None,  # 1883
    None,  # 1884
    None,  # 1885
    None,  # 1886
    None,  # 1887
    None,  # 1888
    None,  # 1889
    None,  # 1890
    None,  # 1891
    None,  # 1892
    None,  # 1893
    None,  # 1894
    None,  # 1895
    None,  # 1896
    None,  # 1897
    None,  # 1898
    None,  # 1899
    None,  # 1900
    None,  # 1901
    None,  # 1902
    None,  # 1903
    None,  # 1904
    None,  # 1905
    None,  # 1906
    None,  # 1907
    None,  # 1908
    None,  # 1909
    None,  # 1910
    None,  # 1911
    None,  # 1912
    None,  # 1913
    None,  # 1914
    None,  # 1915
    None,  # 1916
    None,  # 1917
    None,  # 1918
    None,  # 1919
    None,  # 1920
    None,  # 1921
    None,  # 1922
    None,  # 1923
    None,  # 1924
    None,  # 1925
    None,  # 1926
    None,  # 1927
    None,  # 1928
    None,  # 1929
    None,  # 1930
    None,  # 1931
    None,  # 1932
    None,  # 1933
    None,  # 1934
    None,  # 1935
    None,  # 1936
    None,  # 1937
    None,  # 1938
    None,  # 1939
    None,  # 1940
    None,  # 1941
    None,  # 1942
    None,  # 1943
    None,  # 1944
    None,  # 1945
    None,  # 1946
    None,  # 1947
    None,  # 1948
    None,  # 1949
    None,  # 1950
    None,  # 1951
    None,  # 1952
    None,  # 1953
    None,  # 1954
    None,  # 1955
    None,  # 1956
    None,  # 1957
    None,  # 1958
    None,  # 1959
    None,  # 1960
    None,  # 1961
    None,  # 1962
    None,  # 1963
    None,  # 1964
    None,  # 1965
    None,  # 1966
    None,  # 1967
    None,  # 1968
    None,  # 1969
    None,  # 1970
    None,  # 1971
    None,  # 1972
    None,  # 1973
    None,  # 1974
    None,  # 1975
    None,  # 1976
    None,  # 1977
    None,  # 1978
    None,  # 1979
    None,  # 1980
    None,  # 1981
    None,  # 1982
    None,  # 1983
    None,  # 1984
    None,  # 1985
    None,  # 1986
    None,  # 1987
    None,  # 1988
    None,  # 1989
    None,  # 1990
    None,  # 1991
    None,  # 1992
    None,  # 1993
    None,  # 1994
    None,  # 1995
    None,  # 1996
    None,  # 1997
    None,  # 1998
    None,  # 1999
    None,  # 2000
    None,  # 2001
    None,  # 2002
    None,  # 2003
    None,  # 2004
    None,  # 2005
    None,  # 2006
    None,  # 2007
    None,  # 2008
    None,  # 2009
    None,  # 2010
    None,  # 2011
    None,  # 2012
    None,  # 2013
    None,  # 2014
    None,  # 2015
    None,  # 2016
    None,  # 2017
    None,  # 2018
    None,  # 2019
    None,  # 2020
    None,  # 2021
    None,  # 2022
    None,  # 2023
    None,  # 2024
    None,  # 2025
    None,  # 2026
    None,  # 2027
    None,  # 2028
    None,  # 2029
    None,  # 2030
    None,  # 2031
    None,  # 2032
    None,  # 2033
    None,  # 2034
    None,  # 2035
    None,  # 2036
    None,  # 2037
    None,  # 2038
    None,  # 2039
    None,  # 2040
    None,  # 2041
    None,  # 2042
    None,  # 2043
    None,  # 2044
    None,  # 2045
    None,  # 2046
    None,  # 2047
    None,  # 2048
    None,  # 2049
    None,  # 2050
    None,  # 2051
    None,  # 2052
    None,  # 2053
    None,  # 2054
    None,  # 2055
    None,  # 2056
    None,  # 2057
    None,  # 2058
    None,  # 2059
    None,  # 2060
    None,  # 2061
    None,  # 2062
    None,  # 2063
    None,  # 2064
    None,  # 2065
    None,  # 2066
    None,  # 2067
    None,  # 2068
    None,  # 2069
    None,  # 2070
    None,  # 2071
    None,  # 2072
    None,  # 2073
    None,  # 2074
    None,  # 2075
    None,  # 2076
    None,  # 2077
    None,  # 2078
    None,  # 2079
    None,  # 2080
    None,  # 2081
    None,  # 2082
    None,  # 2083
    None,  # 2084
    None,  # 2085
    None,  # 2086
    None,  # 2087
    None,  # 2088
    None,  # 2089
    None,  # 2090
    None,  # 2091
    None,  # 2092
    None,  # 2093
    None,  # 2094
    None,  # 2095
    None,  # 2096
    None,  # 2097
    None,  # 2098
    None,  # 2099
    None,  # 2100
    None,  # 2101
    None,  # 2102
    None,  # 2103
    None,  # 2104
    None,  # 2105
    None,  # 2106
    None,  # 2107
    None,  # 2108
    None,  # 2109
    None,  # 2110
    None,  # 2111
    None,  # 2112
    None,  # 2113
    None,  # 2114
    None,  # 2115
    None,  # 2116
    None,  # 2117
    None,  # 2118
    None,  # 2119
    None,  # 2120
    None,  # 2121
    None,  # 2122
    None,  # 2123
    None,  # 2124
    None,  # 2125
    None,  # 2126
    None,  # 2127
    None,  # 2128
    None,  # 2129
    None,  # 2130
    None,  # 2131
    None,  # 2132
    None,  # 2133
    None,  # 2134
    None,  # 2135
    None,  # 2136
    None,  # 2137
    None,  # 2138
    None,  # 2139
    None,  # 2140
    None,  # 2141
    None,  # 2142
    None,  # 2143
    None,  # 2144
    None,  # 2145
    None,  # 2146
    None,  # 2147
    None,  # 2148
    None,  # 2149
    None,  # 2150
    None,  # 2151
    None,  # 2152
    None,  # 2153
    None,  # 2154
    None,  # 2155
    None,  # 2156
    None,  # 2157
    None,  # 2158
    None,  # 2159
    None,  # 2160
    None,  # 2161
    None,  # 2162
    None,  # 2163
    None,  # 2164
    None,  # 2165
    None,  # 2166
    None,  # 2167
    None,  # 2168
    None,  # 2169
    None,  # 2170
    None,  # 2171
    None,  # 2172
    None,  # 2173
    None,  # 2174
    None,  # 2175
    None,  # 2176
    None,  # 2177
    None,  # 2178
    None,  # 2179
    None,  # 2180
    None,  # 2181
    None,  # 2182
    None,  # 2183
    None,  # 2184
    None,  # 2185
    None,  # 2186
    None,  # 2187
    None,  # 2188
    None,  # 2189
    None,  # 2190
    None,  # 2191
    None,  # 2192
    None,  # 2193
    None,  # 2194
    None,  # 2195
    None,  # 2196
    None,  # 2197
    None,  # 2198
    None,  # 2199
    None,  # 2200
    None,  # 2201
    None,  # 2202
    None,  # 2203
    None,  # 2204
    None,  # 2205
    None,  # 2206
    None,  # 2207
    None,  # 2208
    None,  # 2209
    None,  # 2210
    None,  # 2211
    None,  # 2212
    None,  # 2213
    None,  # 2214
    None,  # 2215
    None,  # 2216
    None,  # 2217
    None,  # 2218
    None,  # 2219
    None,  # 2220
    None,  # 2221
    None,  # 2222
    None,  # 2223
    None,  # 2224
    None,  # 2225
    None,  # 2226
    None,  # 2227
    None,  # 2228
    None,  # 2229
    None,  # 2230
    None,  # 2231
    None,  # 2232
    None,  # 2233
    None,  # 2234
    None,  # 2235
    None,  # 2236
    None,  # 2237
    None,  # 2238
    None,  # 2239
    None,  # 2240
    None,  # 2241
    None,  # 2242
    None,  # 2243
    None,  # 2244
    None,  # 2245
    None,  # 2246
    None,  # 2247
    None,  # 2248
    None,  # 2249
    None,  # 2250
    None,  # 2251
    None,  # 2252
    None,  # 2253
    None,  # 2254
    None,  # 2255
    None,  # 2256
    None,  # 2257
    None,  # 2258
    None,  # 2259
    None,  # 2260
    None,  # 2261
    None,  # 2262
    None,  # 2263
    None,  # 2264
    None,  # 2265
    None,  # 2266
    None,  # 2267
    None,  # 2268
    None,  # 2269
    None,  # 2270
    None,  # 2271
    None,  # 2272
    None,  # 2273
    None,  # 2274
    None,  # 2275
    None,  # 2276
    None,  # 2277
    None,  # 2278
    None,  # 2279
    None,  # 2280
    None,  # 2281
    None,  # 2282
    None,  # 2283
    None,  # 2284
    None,  # 2285
    None,  # 2286
    None,  # 2287
    None,  # 2288
    None,  # 2289
    None,  # 2290
    None,  # 2291
    None,  # 2292
    None,  # 2293
    None,  # 2294
    None,  # 2295
    None,  # 2296
    None,  # 2297
    None,  # 2298
    None,  # 2299
    None,  # 2300
    None,  # 2301
    None,  # 2302
    None,  # 2303
    None,  # 2304
    None,  # 2305
    None,  # 2306
    None,  # 2307
    None,  # 2308
    None,  # 2309
    None,  # 2310
    None,  # 2311
    None,  # 2312
    None,  # 2313
    None,  # 2314
    None,  # 2315
    None,  # 2316
    None,  # 2317
    None,  # 2318
    None,  # 2319
    None,  # 2320
    None,  # 2321
    None,  # 2322
    None,  # 2323
    None,  # 2324
    None,  # 2325
    None,  # 2326
    None,  # 2327
    None,  # 2328
    None,  # 2329
    None,  # 2330
    None,  # 2331
    None,  # 2332
    None,  # 2333
    None,  # 2334
    None,  # 2335
    None,  # 2336
    None,  # 2337
    None,  # 2338
    None,  # 2339
    None,  # 2340
    None,  # 2341
    None,  # 2342
    None,  # 2343
    None,  # 2344
    None,  # 2345
    None,  # 2346
    None,  # 2347
    None,  # 2348
    None,  # 2349
    None,  # 2350
    None,  # 2351
    None,  # 2352
    None,  # 2353
    None,  # 2354
    None,  # 2355
    None,  # 2356
    None,  # 2357
    None,  # 2358
    None,  # 2359
    None,  # 2360
    None,  # 2361
    None,  # 2362
    None,  # 2363
    None,  # 2364
    None,  # 2365
    None,  # 2366
    None,  # 2367
    None,  # 2368
    None,  # 2369
    None,  # 2370
    None,  # 2371
    None,  # 2372
    None,  # 2373
    None,  # 2374
    None,  # 2375
    None,  # 2376
    None,  # 2377
    None,  # 2378
    None,  # 2379
    None,  # 2380
    None,  # 2381
    None,  # 2382
    None,  # 2383
    None,  # 2384
    None,  # 2385
    None,  # 2386
    None,  # 2387
    None,  # 2388
    None,  # 2389
    None,  # 2390
    None,  # 2391
    None,  # 2392
    None,  # 2393
    None,  # 2394
    None,  # 2395
    None,  # 2396
    None,  # 2397
    None,  # 2398
    None,  # 2399
    None,  # 2400
    None,  # 2401
    None,  # 2402
    None,  # 2403
    None,  # 2404
    None,  # 2405
    None,  # 2406
    None,  # 2407
    None,  # 2408
    None,  # 2409
    None,  # 2410
    None,  # 2411
    None,  # 2412
    None,  # 2413
    None,  # 2414
    None,  # 2415
    None,  # 2416
    None,  # 2417
    None,  # 2418
    None,  # 2419
    None,  # 2420
    None,  # 2421
    None,  # 2422
    None,  # 2423
    None,  # 2424
    None,  # 2425
    None,  # 2426
    None,  # 2427
    None,  # 2428
    None,  # 2429
    None,  # 2430
    None,  # 2431
    None,  # 2432
    None,  # 2433
    None,  # 2434
    None,  # 2435
    None,  # 2436
    None,  # 2437
    None,  # 2438
    None,  # 2439
    None,  # 2440
    None,  # 2441
    None,  # 2442
    None,  # 2443
    None,  # 2444
    None,  # 2445
    None,  # 2446
    None,  # 2447
    None,  # 2448
    None,  # 2449
    None,  # 2450
    None,  # 2451
    None,  # 2452
    None,  # 2453
    None,  # 2454
    None,  # 2455
    None,  # 2456
    None,  # 2457
    None,  # 2458
    None,  # 2459
    None,  # 2460
    None,  # 2461
    None,  # 2462
    None,  # 2463
    None,  # 2464
    None,  # 2465
    None,  # 2466
    None,  # 2467
    None,  # 2468
    None,  # 2469
    None,  # 2470
    None,  # 2471
    None,  # 2472
    None,  # 2473
    None,  # 2474
    None,  # 2475
    None,  # 2476
    None,  # 2477
    None,  # 2478
    None,  # 2479
    None,  # 2480
    None,  # 2481
    None,  # 2482
    None,  # 2483
    None,  # 2484
    None,  # 2485
    None,  # 2486
    None,  # 2487
    None,  # 2488
    None,  # 2489
    None,  # 2490
    None,  # 2491
    None,  # 2492
    None,  # 2493
    None,  # 2494
    None,  # 2495
    None,  # 2496
    None,  # 2497
    None,  # 2498
    None,  # 2499
    None,  # 2500
    None,  # 2501
    None,  # 2502
    None,  # 2503
    None,  # 2504
    None,  # 2505
    None,  # 2506
    None,  # 2507
    None,  # 2508
    None,  # 2509
    None,  # 2510
    None,  # 2511
    None,  # 2512
    None,  # 2513
    None,  # 2514
    None,  # 2515
    None,  # 2516
    None,  # 2517
    None,  # 2518
    None,  # 2519
    None,  # 2520
    None,  # 2521
    None,  # 2522
    None,  # 2523
    None,  # 2524
    None,  # 2525
    None,  # 2526
    None,  # 2527
    None,  # 2528
    None,  # 2529
    None,  # 2530
    None,  # 2531
    None,  # 2532
    None,  # 2533
    None,  # 2534
    None,  # 2535
    None,  # 2536
    None,  # 2537
    None,  # 2538
    None,  # 2539
    None,  # 2540
    None,  # 2541
    None,  # 2542
    None,  # 2543
    None,  # 2544
    None,  # 2545
    None,  # 2546
    None,  # 2547
    None,  # 2548
    None,  # 2549
    None,  # 2550
    None,  # 2551
    None,  # 2552
    None,  # 2553
    None,  # 2554
    None,  # 2555
    None,  # 2556
    None,  # 2557
    None,  # 2558
    None,  # 2559
    None,  # 2560
    None,  # 2561
    None,  # 2562
    None,  # 2563
    None,  # 2564
    None,  # 2565
    None,  # 2566
    None,  # 2567
    None,  # 2568
    None,  # 2569
    None,  # 2570
    None,  # 2571
    None,  # 2572
    None,  # 2573
    None,  # 2574
    None,  # 2575
    None,  # 2576
    None,  # 2577
    None,  # 2578
    None,  # 2579
    None,  # 2580
    None,  # 2581
    None,  # 2582
    None,  # 2583
    None,  # 2584
    None,  # 2585
    None,  # 2586
    None,  # 2587
    None,  # 2588
    None,  # 2589
    None,  # 2590
    None,  # 2591
    None,  # 2592
    None,  # 2593
    None,  # 2594
    None,  # 2595
    None,  # 2596
    None,  # 2597
    None,  # 2598
    None,  # 2599
    None,  # 2600
    None,  # 2601
    None,  # 2602
    None,  # 2603
    None,  # 2604
    None,  # 2605
    None,  # 2606
    None,  # 2607
    None,  # 2608
    None,  # 2609
    None,  # 2610
    None,  # 2611
    None,  # 2612
    None,  # 2613
    None,  # 2614
    None,  # 2615
    None,  # 2616
    None,  # 2617
    None,  # 2618
    None,  # 2619
    None,  # 2620
    None,  # 2621
    None,  # 2622
    None,  # 2623
    None,  # 2624
    None,  # 2625
    None,  # 2626
    None,  # 2627
    None,  # 2628
    None,  # 2629
    None,  # 2630
    None,  # 2631
    None,  # 2632
    None,  # 2633
    None,  # 2634
    None,  # 2635
    None,  # 2636
    None,  # 2637
    None,  # 2638
    None,  # 2639
    None,  # 2640
    None,  # 2641
    None,  # 2642
    None,  # 2643
    None,  # 2644
    None,  # 2645
    None,  # 2646
    None,  # 2647
    None,  # 2648
    None,  # 2649
    None,  # 2650
    None,  # 2651
    None,  # 2652
    None,  # 2653
    None,  # 2654
    None,  # 2655
    None,  # 2656
    None,  # 2657
    None,  # 2658
    None,  # 2659
    None,  # 2660
    None,  # 2661
    None,  # 2662
    None,  # 2663
    None,  # 2664
    None,  # 2665
    None,  # 2666
    None,  # 2667
    None,  # 2668
    None,  # 2669
    None,  # 2670
    None,  # 2671
    None,  # 2672
    None,  # 2673
    None,  # 2674
    None,  # 2675
    None,  # 2676
    None,  # 2677
    None,  # 2678
    None,  # 2679
    None,  # 2680
    None,  # 2681
    None,  # 2682
    None,  # 2683
    None,  # 2684
    None,  # 2685
    None,  # 2686
    None,  # 2687
    None,  # 2688
    None,  # 2689
    None,  # 2690
    None,  # 2691
    None,  # 2692
    None,  # 2693
    None,  # 2694
    None,  # 2695
    None,  # 2696
    None,  # 2697
    None,  # 2698
    None,  # 2699
    None,  # 2700
    None,  # 2701
    None,  # 2702
    None,  # 2703
    None,  # 2704
    None,  # 2705
    None,  # 2706
    None,  # 2707
    None,  # 2708
    None,  # 2709
    None,  # 2710
    None,  # 2711
    None,  # 2712
    None,  # 2713
    None,  # 2714
    None,  # 2715
    None,  # 2716
    None,  # 2717
    None,  # 2718
    None,  # 2719
    None,  # 2720
    None,  # 2721
    None,  # 2722
    None,  # 2723
    None,  # 2724
    None,  # 2725
    None,  # 2726
    None,  # 2727
    None,  # 2728
    None,  # 2729
    None,  # 2730
    None,  # 2731
    None,  # 2732
    None,  # 2733
    None,  # 2734
    None,  # 2735
    None,  # 2736
    None,  # 2737
    None,  # 2738
    None,  # 2739
    None,  # 2740
    None,  # 2741
    None,  # 2742
    None,  # 2743
    None,  # 2744
    None,  # 2745
    None,  # 2746
    None,  # 2747
    None,  # 2748
    None,  # 2749
    None,  # 2750
    None,  # 2751
    None,  # 2752
    None,  # 2753
    None,  # 2754
    None,  # 2755
    None,  # 2756
    None,  # 2757
    None,  # 2758
    None,  # 2759
    None,  # 2760
    None,  # 2761
    None,  # 2762
    None,  # 2763
    None,  # 2764
    None,  # 2765
    None,  # 2766
    None,  # 2767
    None,  # 2768
    None,  # 2769
    None,  # 2770
    None,  # 2771
    None,  # 2772
    None,  # 2773
    None,  # 2774
    None,  # 2775
    None,  # 2776
    None,  # 2777
    None,  # 2778
    None,  # 2779
    None,  # 2780
    None,  # 2781
    None,  # 2782
    None,  # 2783
    None,  # 2784
    None,  # 2785
    None,  # 2786
    None,  # 2787
    None,  # 2788
    None,  # 2789
    None,  # 2790
    None,  # 2791
    None,  # 2792
    None,  # 2793
    None,  # 2794
    None,  # 2795
    None,  # 2796
    None,  # 2797
    None,  # 2798
    None,  # 2799
    None,  # 2800
    None,  # 2801
    None,  # 2802
    None,  # 2803
    None,  # 2804
    None,  # 2805
    None,  # 2806
    None,  # 2807
    None,  # 2808
    None,  # 2809
    None,  # 2810
    None,  # 2811
    None,  # 2812
    None,  # 2813
    None,  # 2814
    None,  # 2815
    None,  # 2816
    None,  # 2817
    None,  # 2818
    None,  # 2819
    None,  # 2820
    None,  # 2821
    None,  # 2822
    None,  # 2823
    None,  # 2824
    None,  # 2825
    None,  # 2826
    None,  # 2827
    None,  # 2828
    None,  # 2829
    None,  # 2830
    None,  # 2831
    None,  # 2832
    None,  # 2833
    None,  # 2834
    None,  # 2835
    None,  # 2836
    None,  # 2837
    None,  # 2838
    None,  # 2839
    None,  # 2840
    None,  # 2841
    None,  # 2842
    None,  # 2843
    None,  # 2844
    None,  # 2845
    None,  # 2846
    None,  # 2847
    None,  # 2848
    None,  # 2849
    None,  # 2850
    None,  # 2851
    None,  # 2852
    None,  # 2853
    None,  # 2854
    None,  # 2855
    None,  # 2856
    None,  # 2857
    None,  # 2858
    None,  # 2859
    None,  # 2860
    None,  # 2861
    None,  # 2862
    None,  # 2863
    None,  # 2864
    None,  # 2865
    None,  # 2866
    None,  # 2867
    None,  # 2868
    None,  # 2869
    None,  # 2870
    None,  # 2871
    None,  # 2872
    None,  # 2873
    None,  # 2874
    None,  # 2875
    None,  # 2876
    None,  # 2877
    None,  # 2878
    None,  # 2879
    None,  # 2880
    None,  # 2881
    None,  # 2882
    None,  # 2883
    None,  # 2884
    None,  # 2885
    None,  # 2886
    None,  # 2887
    None,  # 2888
    None,  # 2889
    None,  # 2890
    None,  # 2891
    None,  # 2892
    None,  # 2893
    None,  # 2894
    None,  # 2895
    None,  # 2896
    None,  # 2897
    None,  # 2898
    None,  # 2899
    None,  # 2900
    None,  # 2901
    None,  # 2902
    None,  # 2903
    None,  # 2904
    None,  # 2905
    None,  # 2906
    None,  # 2907
    None,  # 2908
    None,  # 2909
    None,  # 2910
    None,  # 2911
    None,  # 2912
    None,  # 2913
    None,  # 2914
    None,  # 2915
    None,  # 2916
    None,  # 2917
    None,  # 2918
    None,  # 2919
    None,  # 2920
    None,  # 2921
    None,  # 2922
    None,  # 2923
    None,  # 2924
    None,  # 2925
    None,  # 2926
    None,  # 2927
    None,  # 2928
    None,  # 2929
    None,  # 2930
    None,  # 2931
    None,  # 2932
    None,  # 2933
    None,  # 2934
    None,  # 2935
    None,  # 2936
    None,  # 2937
    None,  # 2938
    None,  # 2939
    None,  # 2940
    None,  # 2941
    None,  # 2942
    None,  # 2943
    None,  # 2944
    None,  # 2945
    None,  # 2946
    None,  # 2947
    None,  # 2948
    None,  # 2949
    None,  # 2950
    None,  # 2951
    None,  # 2952
    None,  # 2953
    None,  # 2954
    None,  # 2955
    None,  # 2956
    None,  # 2957
    None,  # 2958
    None,  # 2959
    None,  # 2960
    None,  # 2961
    None,  # 2962
    None,  # 2963
    None,  # 2964
    None,  # 2965
    None,  # 2966
    None,  # 2967
    None,  # 2968
    None,  # 2969
    None,  # 2970
    None,  # 2971
    None,  # 2972
    None,  # 2973
    None,  # 2974
    None,  # 2975
    None,  # 2976
    None,  # 2977
    None,  # 2978
    None,  # 2979
    None,  # 2980
    None,  # 2981
    None,  # 2982
    None,  # 2983
    None,  # 2984
    None,  # 2985
    None,  # 2986
    None,  # 2987
    None,  # 2988
    None,  # 2989
    None,  # 2990
    None,  # 2991
    None,  # 2992
    None,  # 2993
    None,  # 2994
    None,  # 2995
    None,  # 2996
    None,  # 2997
    None,  # 2998
    None,  # 2999
    None,  # 3000
    None,  # 3001
    None,  # 3002
    None,  # 3003
    None,  # 3004
    None,  # 3005
    None,  # 3006
    None,  # 3007
    None,  # 3008
    None,  # 3009
    None,  # 3010
    None,  # 3011
    None,  # 3012
    None,  # 3013
    None,  # 3014
    None,  # 3015
    None,  # 3016
    None,  # 3017
    None,  # 3018
    None,  # 3019
    None,  # 3020
    None,  # 3021
    None,  # 3022
    None,  # 3023
    None,  # 3024
    None,  # 3025
    None,  # 3026
    None,  # 3027
    None,  # 3028
    None,  # 3029
    None,  # 3030
    None,  # 3031
    None,  # 3032
    None,  # 3033
    None,  # 3034
    None,  # 3035
    None,  # 3036
    None,  # 3037
    None,  # 3038
    None,  # 3039
    None,  # 3040
    None,  # 3041
    None,  # 3042
    None,  # 3043
    None,  # 3044
    None,  # 3045
    None,  # 3046
    None,  # 3047
    None,  # 3048
    None,  # 3049
    None,  # 3050
    None,  # 3051
    None,  # 3052
    None,  # 3053
    None,  # 3054
    None,  # 3055
    None,  # 3056
    None,  # 3057
    None,  # 3058
    None,  # 3059
    None,  # 3060
    None,  # 3061
    None,  # 3062
    None,  # 3063
    None,  # 3064
    None,  # 3065
    None,  # 3066
    None,  # 3067
    None,  # 3068
    None,  # 3069
    None,  # 3070
    None,  # 3071
    None,  # 3072
    None,  # 3073
    None,  # 3074
    None,  # 3075
    None,  # 3076
    None,  # 3077
    None,  # 3078
    None,  # 3079
    None,  # 3080
    None,  # 3081
    None,  # 3082
    None,  # 3083
    None,  # 3084
    None,  # 3085
    None,  # 3086
    None,  # 3087
    None,  # 3088
    None,  # 3089
    None,  # 3090
    None,  # 3091
    None,  # 3092
    None,  # 3093
    None,  # 3094
    None,  # 3095
    None,  # 3096
    None,  # 3097
    None,  # 3098
    None,  # 3099
    None,  # 3100
    None,  # 3101
    None,  # 3102
    None,  # 3103
    None,  # 3104
    None,  # 3105
    None,  # 3106
    None,  # 3107
    None,  # 3108
    None,  # 3109
    None,  # 3110
    None,  # 3111
    None,  # 3112
    None,  # 3113
    None,  # 3114
    None,  # 3115
    None,  # 3116
    None,  # 3117
    None,  # 3118
    None,  # 3119
    None,  # 3120
    None,  # 3121
    None,  # 3122
    None,  # 3123
    None,  # 3124
    None,  # 3125
    None,  # 3126
    None,  # 3127
    None,  # 3128
    None,  # 3129
    None,  # 3130
    None,  # 3131
    None,  # 3132
    None,  # 3133
    None,  # 3134
    None,  # 3135
    None,  # 3136
    None,  # 3137
    None,  # 3138
    None,  # 3139
    None,  # 3140
    None,  # 3141
    None,  # 3142
    None,  # 3143
    None,  # 3144
    None,  # 3145
    None,  # 3146
    None,  # 3147
    None,  # 3148
    None,  # 3149
    None,  # 3150
    None,  # 3151
    None,  # 3152
    None,  # 3153
    None,  # 3154
    None,  # 3155
    None,  # 3156
    None,  # 3157
    None,  # 3158
    None,  # 3159
    None,  # 3160
    None,  # 3161
    None,  # 3162
    None,  # 3163
    None,  # 3164
    None,  # 3165
    None,  # 3166
    None,  # 3167
    None,  # 3168
    None,  # 3169
    None,  # 3170
    None,  # 3171
    None,  # 3172
    None,  # 3173
    None,  # 3174
    None,  # 3175
    None,  # 3176
    None,  # 3177
    None,  # 3178
    None,  # 3179
    None,  # 3180
    None,  # 3181
    None,  # 3182
    None,  # 3183
    None,  # 3184
    None,  # 3185
    None,  # 3186
    None,  # 3187
    None,  # 3188
    None,  # 3189
    None,  # 3190
    None,  # 3191
    None,  # 3192
    None,  # 3193
    None,  # 3194
    None,  # 3195
    None,  # 3196
    None,  # 3197
    None,  # 3198
    None,  # 3199
    None,  # 3200
    None,  # 3201
    None,  # 3202
    None,  # 3203
    None,  # 3204
    None,  # 3205
    None,  # 3206
    None,  # 3207
    None,  # 3208
    None,  # 3209
    None,  # 3210
    None,  # 3211
    None,  # 3212
    None,  # 3213
    None,  # 3214
    None,  # 3215
    None,  # 3216
    None,  # 3217
    None,  # 3218
    None,  # 3219
    None,  # 3220
    None,  # 3221
    None,  # 3222
    None,  # 3223
    None,  # 3224
    None,  # 3225
    None,  # 3226
    None,  # 3227
    None,  # 3228
    None,  # 3229
    None,  # 3230
    None,  # 3231
    None,  # 3232
    None,  # 3233
    None,  # 3234
    None,  # 3235
    None,  # 3236
    None,  # 3237
    None,  # 3238
    None,  # 3239
    None,  # 3240
    None,  # 3241
    None,  # 3242
    None,  # 3243
    None,  # 3244
    None,  # 3245
    None,  # 3246
    None,  # 3247
    None,  # 3248
    None,  # 3249
    None,  # 3250
    None,  # 3251
    None,  # 3252
    None,  # 3253
    None,  # 3254
    None,  # 3255
    None,  # 3256
    None,  # 3257
    None,  # 3258
    None,  # 3259
    None,  # 3260
    None,  # 3261
    None,  # 3262
    None,  # 3263
    None,  # 3264
    None,  # 3265
    None,  # 3266
    None,  # 3267
    None,  # 3268
    None,  # 3269
    None,  # 3270
    None,  # 3271
    None,  # 3272
    None,  # 3273
    None,  # 3274
    None,  # 3275
    None,  # 3276
    None,  # 3277
    None,  # 3278
    None,  # 3279
    None,  # 3280
    None,  # 3281
    None,  # 3282
    None,  # 3283
    None,  # 3284
    None,  # 3285
    None,  # 3286
    None,  # 3287
    None,  # 3288
    None,  # 3289
    None,  # 3290
    None,  # 3291
    None,  # 3292
    None,  # 3293
    None,  # 3294
    None,  # 3295
    None,  # 3296
    None,  # 3297
    None,  # 3298
    None,  # 3299
    None,  # 3300
    None,  # 3301
    None,  # 3302
    None,  # 3303
    None,  # 3304
    None,  # 3305
    None,  # 3306
    None,  # 3307
    None,  # 3308
    None,  # 3309
    None,  # 3310
    None,  # 3311
    None,  # 3312
    None,  # 3313
    None,  # 3314
    None,  # 3315
    None,  # 3316
    None,  # 3317
    None,  # 3318
    None,  # 3319
    None,  # 3320
    None,  # 3321
    None,  # 3322
    None,  # 3323
    None,  # 3324
    None,  # 3325
    None,  # 3326
    None,  # 3327
    None,  # 3328
    (3329, TType.STRUCT, 'sessionConf', [TDBSqlSessionConf, None], None, ),  # 3329
)
all_structs.append(TRenewDelegationTokenResp)
TRenewDelegationTokenResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
)
all_structs.append(TProgressUpdateResp)
TProgressUpdateResp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'headerNames', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'rows', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.DOUBLE, 'progressedPercentage', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'footerSummary', 'UTF8', None, ),  # 5
    (6, TType.I64, 'startTime', None, None, ),  # 6
)
all_structs.append(TDBSqlClusterMetrics)
TDBSqlClusterMetrics.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'clusterCapacity', None, None, ),  # 1
    (2, TType.I32, 'numRunningTasks', None, None, ),  # 2
    (3, TType.I32, 'numPendingTasks', None, None, ),  # 3
    (4, TType.DOUBLE, 'rejectionThreshold', None, None, ),  # 4
    (5, TType.DOUBLE, 'tasksCompletedPerMinute', None, None, ),  # 5
)
all_structs.append(TDBSqlQueryLaneMetrics)
TDBSqlQueryLaneMetrics.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'fastLaneReservation', None, None, ),  # 1
    (2, TType.I32, 'numFastLaneRunningTasks', None, None, ),  # 2
    (3, TType.I32, 'numFastLanePendingTasks', None, None, ),  # 3
    (4, TType.I32, 'slowLaneReservation', None, None, ),  # 4
    (5, TType.I32, 'numSlowLaneRunningTasks', None, None, ),  # 5
    (6, TType.I32, 'numSlowLanePendingTasks', None, None, ),  # 6
)
all_structs.append(TDBSqlQueryMetrics)
TDBSqlQueryMetrics.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'operationHandle', [TOperationHandle, None], None, ),  # 2
    (3, TType.I32, 'idempotencyType', None, None, ),  # 3
    (4, TType.STRUCT, 'sessionHandle', [TSessionHandle, None], None, ),  # 4
    (5, TType.I64, 'operationStarted', None, None, ),  # 5
    (6, TType.DOUBLE, 'queryCost', None, None, ),  # 6
    (7, TType.I32, 'numRunningTasks', None, None, ),  # 7
    (8, TType.I32, 'numPendingTasks', None, None, ),  # 8
    (9, TType.I32, 'numCompletedTasks', None, None, ),  # 9
)
all_structs.append(TDBSqlGetLoadInformationReq)
TDBSqlGetLoadInformationReq.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'includeQueryMetrics', None, False, ),  # 1
)
all_structs.append(TDBSqlGetLoadInformationResp)
TDBSqlGetLoadInformationResp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [TStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'clusterMetrics', [TDBSqlClusterMetrics, None], None, ),  # 2
    (3, TType.STRUCT, 'queryLaneMetrics', [TDBSqlQueryLaneMetrics, None], None, ),  # 3
    (4, TType.LIST, 'queryMetrics', (TType.STRUCT, [TDBSqlQueryMetrics, None], False), None, ),  # 4
)
fix_spec(all_structs)
del all_structs
from decimal import Decimal
import errno
import logging
import math
import time
import threading
import lz4.frame
from ssl import CERT_NONE, CERT_REQUIRED, create_default_context
from typing import List, Union

import pyarrow
import thrift.transport.THttpClient
import thrift.protocol.TBinaryProtocol
import thrift.transport.TSocket
import thrift.transport.TTransport

import databricks.sql.auth.thrift_http_client
from databricks.sql.auth.authenticators import AuthProvider
from databricks.sql.thrift_api.TCLIService import TCLIService, ttypes
from databricks.sql import *
from databricks.sql.thrift_api.TCLIService.TCLIService import (
    Client as TCLIServiceClient,
)

from databricks.sql.utils import (
    ArrowQueue,
    ExecuteResponse,
    _bound,
    RequestErrorInfo,
    NoRetryReason,
)

logger = logging.getLogger(__name__)

THRIFT_ERROR_MESSAGE_HEADER = "x-thriftserver-error-message"
DATABRICKS_ERROR_OR_REDIRECT_HEADER = "x-databricks-error-or-redirect-message"
DATABRICKS_REASON_HEADER = "x-databricks-reason-phrase"

TIMESTAMP_AS_STRING_CONFIG = "spark.thriftserver.arrowBasedRowSet.timestampAsString"

# see Connection.__init__ for parameter descriptions.
# - Min/Max avoids unsustainable configs (sane values are far more constrained)
# - 900s attempts-duration lines up w ODBC/JDBC drivers (for cluster startup > 10 mins)
_retry_policy = {  # (type, default, min, max)
    "_retry_delay_min": (float, 1, 0.1, 60),
    "_retry_delay_max": (float, 60, 5, 3600),
    "_retry_stop_after_attempts_count": (int, 30, 1, 60),
    "_retry_stop_after_attempts_duration": (float, 900, 1, 86400),
    "_retry_delay_default": (float, 5, 1, 60),
}


class ThriftBackend:
    CLOSED_OP_STATE = ttypes.TOperationState.CLOSED_STATE
    ERROR_OP_STATE = ttypes.TOperationState.ERROR_STATE
    BIT_MASKS = [1, 2, 4, 8, 16, 32, 64, 128]

    def __init__(
        self,
        server_hostname: str,
        port,
        http_path: str,
        http_headers,
        auth_provider: AuthProvider,
        staging_allowed_local_path: Union[None, str, List[str]] = None,
        **kwargs,
    ):
        # Internal arguments in **kwargs:
        # _user_agent_entry
        #   Tag to add to User-Agent header. For use by partners.
        # _username, _password
        #   Username and password Basic authentication (no official support)
        # _tls_no_verify
        #   Set to True (Boolean) to completely disable SSL verification.
        # _tls_verify_hostname
        #   Set to False (Boolean) to disable SSL hostname verification, but check certificate.
        # _tls_trusted_ca_file
        #   Set to the path of the file containing trusted CA certificates for server certificate
        #   verification. If not provide, uses system truststore.
        # _tls_client_cert_file, _tls_client_cert_key_file, _tls_client_cert_key_password
        #   Set client SSL certificate.
        #   See https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain
        # _connection_uri
        #   Overrides server_hostname and http_path.
        # RETRY/ATTEMPT POLICY
        # _retry_delay_min                      (default: 1)
        # _retry_delay_max                      (default: 60)
        #   {min,max} pre-retry delay bounds
        # _retry_delay_default                   (default: 5)
        #   Only used when GetOperationStatus fails due to a TCP/OS Error.
        # _retry_stop_after_attempts_count      (default: 30)
        #   total max attempts during retry sequence
        # _retry_stop_after_attempts_duration   (default: 900)
        #   total max wait duration during retry sequence
        #   (Note this will stop _before_ intentionally exceeding; thus if the
        #   next calculated pre-retry delay would go past
        #   _retry_stop_after_attempts_duration, stop now.)
        #
        # _retry_stop_after_attempts_count
        #  The maximum number of times we should retry retryable requests (defaults to 24)
        # _socket_timeout
        #  The timeout in seconds for socket send, recv and connect operations. Defaults to None for
        #  no timeout. Should be a positive float or integer.

        port = port or 443
        if kwargs.get("_connection_uri"):
            uri = kwargs.get("_connection_uri")
        elif server_hostname and http_path:
            uri = "https://{host}:{port}/{path}".format(
                host=server_hostname, port=port, path=http_path.lstrip("/")
            )
        else:
            raise ValueError("No valid connection settings.")

        self.staging_allowed_local_path = staging_allowed_local_path
        self._initialize_retry_args(kwargs)
        self._use_arrow_native_complex_types = kwargs.get(
            "_use_arrow_native_complex_types", True
        )
        self._use_arrow_native_decimals = kwargs.get("_use_arrow_native_decimals", True)
        self._use_arrow_native_timestamps = kwargs.get(
            "_use_arrow_native_timestamps", True
        )

        # Configure tls context
        ssl_context = create_default_context(cafile=kwargs.get("_tls_trusted_ca_file"))
        if kwargs.get("_tls_no_verify") is True:
            ssl_context.check_hostname = False
            ssl_context.verify_mode = CERT_NONE
        elif kwargs.get("_tls_verify_hostname") is False:
            ssl_context.check_hostname = False
            ssl_context.verify_mode = CERT_REQUIRED
        else:
            ssl_context.check_hostname = True
            ssl_context.verify_mode = CERT_REQUIRED

        tls_client_cert_file = kwargs.get("_tls_client_cert_file")
        tls_client_cert_key_file = kwargs.get("_tls_client_cert_key_file")
        tls_client_cert_key_password = kwargs.get("_tls_client_cert_key_password")
        if tls_client_cert_file:
            ssl_context.load_cert_chain(
                certfile=tls_client_cert_file,
                keyfile=tls_client_cert_key_file,
                password=tls_client_cert_key_password,
            )

        self._auth_provider = auth_provider

        self._transport = databricks.sql.auth.thrift_http_client.THttpClient(
            auth_provider=self._auth_provider,
            uri_or_host=uri,
            ssl_context=ssl_context,
        )

        timeout = kwargs.get("_socket_timeout")
        # setTimeout defaults to None (i.e. no timeout), and is expected in ms
        self._transport.setTimeout(timeout and (float(timeout) * 1000.0))

        self._transport.setCustomHeaders(dict(http_headers))
        protocol = thrift.protocol.TBinaryProtocol.TBinaryProtocol(self._transport)
        self._client = TCLIService.Client(protocol)

        try:
            self._transport.open()
        except:
            self._transport.close()
            raise

        self._request_lock = threading.RLock()

    def _initialize_retry_args(self, kwargs):
        # Configure retries & timing: use user-settings or defaults, and bound
        # by policy. Log.warn when given param gets restricted.
        for (key, (type_, default, min, max)) in _retry_policy.items():
            given_or_default = type_(kwargs.get(key, default))
            bound = _bound(min, max, given_or_default)
            setattr(self, key, bound)
            logger.debug(
                "retry parameter: {} given_or_default {}".format(key, given_or_default)
            )
            if bound != given_or_default:
                logger.warning(
                    "Override out of policy retry parameter: "
                    + "{} given {}, restricted to {}".format(
                        key, given_or_default, bound
                    )
                )

        # Fail on retry delay min > max; consider later adding fail on min > duration?
        if (
            self._retry_stop_after_attempts_count > 1
            and self._retry_delay_min > self._retry_delay_max
        ):
            raise ValueError(
                "Invalid configuration enables retries with retry delay min(={}) > max(={})".format(
                    self._retry_delay_min, self._retry_delay_max
                )
            )

    @staticmethod
    def _check_response_for_error(response):
        if response.status and response.status.statusCode in [
            ttypes.TStatusCode.ERROR_STATUS,
            ttypes.TStatusCode.INVALID_HANDLE_STATUS,
        ]:
            raise DatabaseError(response.status.errorMessage)

    @staticmethod
    def _extract_error_message_from_headers(headers):
        err_msg = ""
        if THRIFT_ERROR_MESSAGE_HEADER in headers:
            err_msg = headers[THRIFT_ERROR_MESSAGE_HEADER]
        if DATABRICKS_ERROR_OR_REDIRECT_HEADER in headers:
            if (
                err_msg
            ):  # We don't expect both to be set, but log both here just in case
                err_msg = "Thriftserver error: {}, Databricks error: {}".format(
                    err_msg, headers[DATABRICKS_ERROR_OR_REDIRECT_HEADER]
                )
            else:
                err_msg = headers[DATABRICKS_ERROR_OR_REDIRECT_HEADER]
            if DATABRICKS_REASON_HEADER in headers:
                err_msg += ": " + headers[DATABRICKS_REASON_HEADER]

        if not err_msg:
            # if authentication token is invalid we need this branch
            if DATABRICKS_REASON_HEADER in headers:
                err_msg += ": " + headers[DATABRICKS_REASON_HEADER]

        return err_msg

    def _handle_request_error(self, error_info, attempt, elapsed):
        max_attempts = self._retry_stop_after_attempts_count
        max_duration_s = self._retry_stop_after_attempts_duration

        if (
            error_info.retry_delay is not None
            and elapsed + error_info.retry_delay > max_duration_s
        ):
            no_retry_reason = NoRetryReason.OUT_OF_TIME
        elif error_info.retry_delay is not None and attempt >= max_attempts:
            no_retry_reason = NoRetryReason.OUT_OF_ATTEMPTS
        elif error_info.retry_delay is None:
            no_retry_reason = NoRetryReason.NOT_RETRYABLE
        else:
            no_retry_reason = None

        full_error_info_context = error_info.full_info_logging_context(
            no_retry_reason, attempt, max_attempts, elapsed, max_duration_s
        )

        if no_retry_reason is not None:
            user_friendly_error_message = error_info.user_friendly_error_message(
                no_retry_reason, attempt, elapsed
            )
            network_request_error = RequestError(
                user_friendly_error_message, full_error_info_context, error_info.error
            )
            logger.info(network_request_error.message_with_context())

            raise network_request_error

        logger.info(
            "Retrying request after error in {} seconds: {}".format(
                error_info.retry_delay, full_error_info_context
            )
        )
        time.sleep(error_info.retry_delay)

    # FUTURE: Consider moving to https://github.com/litl/backoff or
    # https://github.com/jd/tenacity for retry logic.
    def make_request(self, method, request):
        """Execute given request, attempting retries when
            1. Receiving HTTP 429/503 from server
            2. OSError is raised during a GetOperationStatus

        For delay between attempts, honor the given Retry-After header, but with bounds.
        Use lower bound of expontial-backoff based on _retry_delay_min,
        and upper bound of _retry_delay_max.
        Will stop retry attempts if total elapsed time + next retry delay would exceed
        _retry_stop_after_attempts_duration.
        """
        # basic strategy: build range iterator rep'ing number of available
        # retries. bounds can be computed from there. iterate over it with
        # retries until success or final failure achieved.

        t0 = time.time()

        def get_elapsed():
            return time.time() - t0

        def bound_retry_delay(attempt, proposed_delay):
            """bound delay (seconds) by [min_delay*1.5^(attempt-1), max_delay]"""
            delay = int(proposed_delay)
            delay = max(delay, self._retry_delay_min * math.pow(1.5, attempt - 1))
            delay = min(delay, self._retry_delay_max)
            return delay

        def extract_retry_delay(attempt):
            # encapsulate retry checks, returns None || delay-in-secs
            # Retry IFF 429/503 code + Retry-After header set
            http_code = getattr(self._transport, "code", None)
            retry_after = getattr(self._transport, "headers", {}).get("Retry-After")
            if http_code in [429, 503] and retry_after:
                # bound delay (seconds) by [min_delay*1.5^(attempt-1), max_delay]
                return bound_retry_delay(attempt, int(retry_after))
            return None

        def attempt_request(attempt):
            # splits out lockable attempt, from delay & retry loop
            # returns tuple: (method_return, delay_fn(), error, error_message)
            # - non-None method_return -> success, return and be done
            # - non-None retry_delay -> sleep delay before retry
            # - error, error_message always set when available

            error, error_message, retry_delay = None, None, None
            try:
                logger.debug("Sending request: {}".format(request))
                response = method(request)
                logger.debug("Received response: {}".format(response))
                return response
            except OSError as err:
                error = err
                error_message = str(err)

                gos_name = TCLIServiceClient.GetOperationStatus.__name__
                if method.__name__ == gos_name:
                    retry_delay = bound_retry_delay(attempt, self._retry_delay_default)

                    # fmt: off
                    # The built-in errno package encapsulates OSError codes, which are OS-specific.
                    # log.info for errors we believe are not unusual or unexpected. log.warn for
                    # for others like EEXIST, EBADF, ERANGE which are not expected in this context.
                    #
                    # I manually tested this retry behaviour using mitmweb and confirmed that 
                    # GetOperationStatus requests are retried when I forced network connection
                    # interruptions / timeouts / reconnects. See #24 for more info.
                                            # | Debian | Darwin |
                    info_errs = [           # |--------|--------|         
                        errno.ESHUTDOWN,    # |   32   |   32   |
                        errno.EAFNOSUPPORT, # |   97   |   47   |
                        errno.ECONNRESET,   # |   104  |   54   |
                        errno.ETIMEDOUT,    # |   110  |   60   |
                    ]

                    # fmt: on
                    log_string = f"{gos_name} failed with code {err.errno} and will attempt to retry"
                    if err.errno in info_errs:
                        logger.info(log_string)
                    else:
                        logger.warning(log_string)
            except Exception as err:
                error = err
                retry_delay = extract_retry_delay(attempt)
                error_message = ThriftBackend._extract_error_message_from_headers(
                    getattr(self._transport, "headers", {})
                )
            return RequestErrorInfo(
                error=error,
                error_message=error_message,
                retry_delay=retry_delay,
                http_code=getattr(self._transport, "code", None),
                method=method.__name__,
                request=request,
            )

        # The real work:
        # - for each available attempt:
        #       lock-and-attempt
        #       return on success
        #       if available: bounded delay and retry
        #       if not: raise error
        max_attempts = self._retry_stop_after_attempts_count

        # use index-1 counting for logging/human consistency
        for attempt in range(1, max_attempts + 1):
            # We have a lock here because .cancel can be called from a separate thread.
            # We do not want threads to be simultaneously sharing the Thrift Transport
            # because we use its state to determine retries
            with self._request_lock:
                response_or_error_info = attempt_request(attempt)
            elapsed = get_elapsed()

            # conditions: success, non-retry-able, no-attempts-left, no-time-left, delay+retry
            if not isinstance(response_or_error_info, RequestErrorInfo):
                # log nothing here, presume that main request logging covers
                response = response_or_error_info
                ThriftBackend._check_response_for_error(response)
                return response

            error_info = response_or_error_info
            # The error handler will either sleep or throw an exception
            self._handle_request_error(error_info, attempt, elapsed)

    def _check_protocol_version(self, t_open_session_resp):
        protocol_version = t_open_session_resp.serverProtocolVersion

        if protocol_version < ttypes.TProtocolVersion.SPARK_CLI_SERVICE_PROTOCOL_V2:
            raise OperationalError(
                "Error: expected server to use a protocol version >= "
                "SPARK_CLI_SERVICE_PROTOCOL_V2, "
                "instead got: {}".format(protocol_version)
            )

    def _check_initial_namespace(self, catalog, schema, response):
        if not (catalog or schema):
            return

        if (
            response.serverProtocolVersion
            < ttypes.TProtocolVersion.SPARK_CLI_SERVICE_PROTOCOL_V4
        ):
            raise InvalidServerResponseError(
                "Setting initial namespace not supported by the DBR version, "
                "Please use a Databricks SQL endpoint or a cluster with DBR >= 9.0."
            )

        if catalog:
            if not response.canUseMultipleCatalogs:
                raise InvalidServerResponseError(
                    "Unexpected response from server: Trying to set initial catalog to {}, "
                    + "but server does not support multiple catalogs.".format(catalog)  # type: ignore
                )

    def _check_session_configuration(self, session_configuration):
        # This client expects timetampsAsString to be false, so we do not allow users to modify that
        if (
            session_configuration.get(TIMESTAMP_AS_STRING_CONFIG, "false").lower()
            != "false"
        ):
            raise Error(
                "Invalid session configuration: {} cannot be changed "
                "while using the Databricks SQL connector, it must be false not {}".format(
                    TIMESTAMP_AS_STRING_CONFIG,
                    session_configuration[TIMESTAMP_AS_STRING_CONFIG],
                )
            )

    def open_session(self, session_configuration, catalog, schema):
        try:
            self._transport.open()
            session_configuration = {
                k: str(v) for (k, v) in (session_configuration or {}).items()
            }
            self._check_session_configuration(session_configuration)
            # We want to receive proper Timestamp arrow types.
            # We set it also in confOverlay in TExecuteStatementReq on a per query basic,
            # but it doesn't hurt to also set for the whole session.
            session_configuration[TIMESTAMP_AS_STRING_CONFIG] = "false"
            if catalog or schema:
                initial_namespace = ttypes.TNamespace(
                    catalogName=catalog, schemaName=schema
                )
            else:
                initial_namespace = None

            open_session_req = ttypes.TOpenSessionReq(
                client_protocol_i64=ttypes.TProtocolVersion.SPARK_CLI_SERVICE_PROTOCOL_V7,
                client_protocol=None,
                initialNamespace=initial_namespace,
                canUseMultipleCatalogs=True,
                configuration=session_configuration,
            )
            response = self.make_request(self._client.OpenSession, open_session_req)
            self._check_initial_namespace(catalog, schema, response)
            self._check_protocol_version(response)
            return response.sessionHandle
        except:
            self._transport.close()
            raise

    def close_session(self, session_handle) -> None:
        req = ttypes.TCloseSessionReq(sessionHandle=session_handle)
        try:
            self.make_request(self._client.CloseSession, req)
        finally:
            self._transport.close()

    def _check_command_not_in_error_or_closed_state(
        self, op_handle, get_operations_resp
    ):
        if get_operations_resp.operationState == ttypes.TOperationState.ERROR_STATE:
            if get_operations_resp.displayMessage:
                raise ServerOperationError(
                    get_operations_resp.displayMessage,
                    {
                        "operation-id": op_handle and op_handle.operationId.guid,
                        "diagnostic-info": get_operations_resp.diagnosticInfo,
                    },
                )
            else:
                raise ServerOperationError(
                    get_operations_resp.errorMessage,
                    {
                        "operation-id": op_handle and op_handle.operationId.guid,
                        "diagnostic-info": None,
                    },
                )
        elif get_operations_resp.operationState == ttypes.TOperationState.CLOSED_STATE:
            raise DatabaseError(
                "Command {} unexpectedly closed server side".format(
                    op_handle and op_handle.operationId.guid
                ),
                {"operation-id": op_handle and op_handle.operationId.guid},
            )

    def _poll_for_status(self, op_handle):
        req = ttypes.TGetOperationStatusReq(
            operationHandle=op_handle,
            getProgressUpdate=False,
        )
        return self.make_request(self._client.GetOperationStatus, req)

    def _create_arrow_table(self, t_row_set, lz4_compressed, schema_bytes, description):
        if t_row_set.columns is not None:
            (
                arrow_table,
                num_rows,
            ) = ThriftBackend._convert_column_based_set_to_arrow_table(
                t_row_set.columns, description
            )
        elif t_row_set.arrowBatches is not None:
            (
                arrow_table,
                num_rows,
            ) = ThriftBackend._convert_arrow_based_set_to_arrow_table(
                t_row_set.arrowBatches, lz4_compressed, schema_bytes
            )
        else:
            raise OperationalError("Unsupported TRowSet instance {}".format(t_row_set))
        return self._convert_decimals_in_arrow_table(arrow_table, description), num_rows

    @staticmethod
    def _convert_decimals_in_arrow_table(table, description):
        for (i, col) in enumerate(table.itercolumns()):
            if description[i][1] == "decimal":
                decimal_col = col.to_pandas().apply(
                    lambda v: v if v is None else Decimal(v)
                )
                precision, scale = description[i][4], description[i][5]
                assert scale is not None
                assert precision is not None
                # Spark limits decimal to a maximum scale of 38,
                # so 128 is guaranteed to be big enough
                dtype = pyarrow.decimal128(precision, scale)
                col_data = pyarrow.array(decimal_col, type=dtype)
                field = table.field(i).with_type(dtype)
                table = table.set_column(i, field, col_data)
        return table

    @staticmethod
    def _convert_arrow_based_set_to_arrow_table(
        arrow_batches, lz4_compressed, schema_bytes
    ):
        ba = bytearray()
        ba += schema_bytes
        n_rows = 0
        if lz4_compressed:
            for arrow_batch in arrow_batches:
                n_rows += arrow_batch.rowCount
                ba += lz4.frame.decompress(arrow_batch.batch)
        else:
            for arrow_batch in arrow_batches:
                n_rows += arrow_batch.rowCount
                ba += arrow_batch.batch
        arrow_table = pyarrow.ipc.open_stream(ba).read_all()
        return arrow_table, n_rows

    @staticmethod
    def _convert_column_based_set_to_arrow_table(columns, description):
        arrow_table = pyarrow.Table.from_arrays(
            [ThriftBackend._convert_column_to_arrow_array(c) for c in columns],
            # Only use the column names from the schema, the types are determined by the
            # physical types used in column based set, as they can differ from the
            # mapping used in _hive_schema_to_arrow_schema.
            names=[c[0] for c in description],
        )
        return arrow_table, arrow_table.num_rows

    @staticmethod
    def _convert_column_to_arrow_array(t_col):
        """
        Return a pyarrow array from the values in a TColumn instance.
        Note that ColumnBasedSet has no native support for complex types, so they will be converted
        to strings server-side.
        """
        field_name_to_arrow_type = {
            "boolVal": pyarrow.bool_(),
            "byteVal": pyarrow.int8(),
            "i16Val": pyarrow.int16(),
            "i32Val": pyarrow.int32(),
            "i64Val": pyarrow.int64(),
            "doubleVal": pyarrow.float64(),
            "stringVal": pyarrow.string(),
            "binaryVal": pyarrow.binary(),
        }
        for field in field_name_to_arrow_type.keys():
            wrapper = getattr(t_col, field)
            if wrapper:
                return ThriftBackend._create_arrow_array(
                    wrapper, field_name_to_arrow_type[field]
                )

        raise OperationalError("Empty TColumn instance {}".format(t_col))

    @staticmethod
    def _create_arrow_array(t_col_value_wrapper, arrow_type):
        result = t_col_value_wrapper.values
        nulls = t_col_value_wrapper.nulls  # bitfield describing which values are null
        assert isinstance(nulls, bytes)

        # The number of bits in nulls can be both larger or smaller than the number of
        # elements in result, so take the minimum of both to iterate over.
        length = min(len(result), len(nulls) * 8)

        for i in range(length):
            if nulls[i >> 3] & ThriftBackend.BIT_MASKS[i & 0x7]:
                result[i] = None

        return pyarrow.array(result, type=arrow_type)

    def _get_metadata_resp(self, op_handle):
        req = ttypes.TGetResultSetMetadataReq(operationHandle=op_handle)
        return self.make_request(self._client.GetResultSetMetadata, req)

    @staticmethod
    def _hive_schema_to_arrow_schema(t_table_schema):
        def map_type(t_type_entry):
            if t_type_entry.primitiveEntry:
                return {
                    ttypes.TTypeId.BOOLEAN_TYPE: pyarrow.bool_(),
                    ttypes.TTypeId.TINYINT_TYPE: pyarrow.int8(),
                    ttypes.TTypeId.SMALLINT_TYPE: pyarrow.int16(),
                    ttypes.TTypeId.INT_TYPE: pyarrow.int32(),
                    ttypes.TTypeId.BIGINT_TYPE: pyarrow.int64(),
                    ttypes.TTypeId.FLOAT_TYPE: pyarrow.float32(),
                    ttypes.TTypeId.DOUBLE_TYPE: pyarrow.float64(),
                    ttypes.TTypeId.STRING_TYPE: pyarrow.string(),
                    ttypes.TTypeId.TIMESTAMP_TYPE: pyarrow.timestamp("us", None),
                    ttypes.TTypeId.BINARY_TYPE: pyarrow.binary(),
                    ttypes.TTypeId.ARRAY_TYPE: pyarrow.string(),
                    ttypes.TTypeId.MAP_TYPE: pyarrow.string(),
                    ttypes.TTypeId.STRUCT_TYPE: pyarrow.string(),
                    ttypes.TTypeId.UNION_TYPE: pyarrow.string(),
                    ttypes.TTypeId.USER_DEFINED_TYPE: pyarrow.string(),
                    ttypes.TTypeId.DECIMAL_TYPE: pyarrow.string(),
                    ttypes.TTypeId.NULL_TYPE: pyarrow.null(),
                    ttypes.TTypeId.DATE_TYPE: pyarrow.date32(),
                    ttypes.TTypeId.VARCHAR_TYPE: pyarrow.string(),
                    ttypes.TTypeId.CHAR_TYPE: pyarrow.string(),
                    ttypes.TTypeId.INTERVAL_YEAR_MONTH_TYPE: pyarrow.string(),
                    ttypes.TTypeId.INTERVAL_DAY_TIME_TYPE: pyarrow.string(),
                }[t_type_entry.primitiveEntry.type]
            else:
                # Current thriftserver implementation should always return a primitiveEntry,
                # even for complex types
                raise OperationalError(
                    "Thrift protocol error: t_type_entry not a primitiveEntry"
                )

        def convert_col(t_column_desc):
            return pyarrow.field(
                t_column_desc.columnName, map_type(t_column_desc.typeDesc.types[0])
            )

        return pyarrow.schema([convert_col(col) for col in t_table_schema.columns])

    @staticmethod
    def _col_to_description(col):
        type_entry = col.typeDesc.types[0]

        if type_entry.primitiveEntry:
            name = ttypes.TTypeId._VALUES_TO_NAMES[type_entry.primitiveEntry.type]
            # Drop _TYPE suffix
            cleaned_type = (name[:-5] if name.endswith("_TYPE") else name).lower()
        else:
            raise OperationalError(
                "Thrift protocol error: t_type_entry not a primitiveEntry"
            )

        if type_entry.primitiveEntry.type == ttypes.TTypeId.DECIMAL_TYPE:
            qualifiers = type_entry.primitiveEntry.typeQualifiers.qualifiers
            if qualifiers and "precision" in qualifiers and "scale" in qualifiers:
                precision, scale = (
                    qualifiers["precision"].i32Value,
                    qualifiers["scale"].i32Value,
                )
            else:
                raise OperationalError(
                    "Decimal type did not provide typeQualifier precision, scale in "
                    "primitiveEntry {}".format(type_entry.primitiveEntry)
                )
        else:
            precision, scale = None, None

        return col.columnName, cleaned_type, None, None, precision, scale, None

    @staticmethod
    def _hive_schema_to_description(t_table_schema):
        return [
            ThriftBackend._col_to_description(col) for col in t_table_schema.columns
        ]

    def _results_message_to_execute_response(self, resp, operation_state):
        if resp.directResults and resp.directResults.resultSetMetadata:
            t_result_set_metadata_resp = resp.directResults.resultSetMetadata
        else:
            t_result_set_metadata_resp = self._get_metadata_resp(resp.operationHandle)

        if t_result_set_metadata_resp.resultFormat not in [
            ttypes.TSparkRowSetType.ARROW_BASED_SET,
            ttypes.TSparkRowSetType.COLUMN_BASED_SET,
        ]:
            raise OperationalError(
                "Expected results to be in Arrow or column based format, "
                "instead they are: {}".format(
                    ttypes.TSparkRowSetType._VALUES_TO_NAMES[
                        t_result_set_metadata_resp.resultFormat
                    ]
                )
            )
        direct_results = resp.directResults
        has_been_closed_server_side = direct_results and direct_results.closeOperation
        has_more_rows = (
            (not direct_results)
            or (not direct_results.resultSet)
            or direct_results.resultSet.hasMoreRows
        )
        description = self._hive_schema_to_description(
            t_result_set_metadata_resp.schema
        )
        schema_bytes = (
            t_result_set_metadata_resp.arrowSchema
            or self._hive_schema_to_arrow_schema(t_result_set_metadata_resp.schema)
            .serialize()
            .to_pybytes()
        )
        lz4_compressed = t_result_set_metadata_resp.lz4Compressed
        is_staging_operation = t_result_set_metadata_resp.isStagingOperation
        if direct_results and direct_results.resultSet:
            assert direct_results.resultSet.results.startRowOffset == 0
            assert direct_results.resultSetMetadata

            arrow_results, n_rows = self._create_arrow_table(
                direct_results.resultSet.results,
                lz4_compressed,
                schema_bytes,
                description,
            )
            arrow_queue_opt = ArrowQueue(arrow_results, n_rows, 0)
        else:
            arrow_queue_opt = None
        return ExecuteResponse(
            arrow_queue=arrow_queue_opt,
            status=operation_state,
            has_been_closed_server_side=has_been_closed_server_side,
            has_more_rows=has_more_rows,
            lz4_compressed=lz4_compressed,
            is_staging_operation=is_staging_operation,
            command_handle=resp.operationHandle,
            description=description,
            arrow_schema_bytes=schema_bytes,
        )

    def _wait_until_command_done(self, op_handle, initial_operation_status_resp):
        if initial_operation_status_resp:
            self._check_command_not_in_error_or_closed_state(
                op_handle, initial_operation_status_resp
            )
        operation_state = (
            initial_operation_status_resp
            and initial_operation_status_resp.operationState
        )
        while not operation_state or operation_state in [
            ttypes.TOperationState.RUNNING_STATE,
            ttypes.TOperationState.PENDING_STATE,
        ]:
            poll_resp = self._poll_for_status(op_handle)
            operation_state = poll_resp.operationState
            self._check_command_not_in_error_or_closed_state(op_handle, poll_resp)
        return operation_state

    @staticmethod
    def _check_direct_results_for_error(t_spark_direct_results):
        if t_spark_direct_results:
            if t_spark_direct_results.operationStatus:
                ThriftBackend._check_response_for_error(
                    t_spark_direct_results.operationStatus
                )
            if t_spark_direct_results.resultSetMetadata:
                ThriftBackend._check_response_for_error(
                    t_spark_direct_results.resultSetMetadata
                )
            if t_spark_direct_results.resultSet:
                ThriftBackend._check_response_for_error(
                    t_spark_direct_results.resultSet
                )
            if t_spark_direct_results.closeOperation:
                ThriftBackend._check_response_for_error(
                    t_spark_direct_results.closeOperation
                )

    def execute_command(
        self, operation, session_handle, max_rows, max_bytes, lz4_compression, cursor
    ):
        assert session_handle is not None

        spark_arrow_types = ttypes.TSparkArrowTypes(
            timestampAsArrow=self._use_arrow_native_timestamps,
            decimalAsArrow=self._use_arrow_native_decimals,
            complexTypesAsArrow=self._use_arrow_native_complex_types,
            # TODO: The current Arrow type used for intervals can not be deserialised in PyArrow
            # DBR should be changed to use month_day_nano_interval
            intervalTypesAsArrow=False,
        )
        req = ttypes.TExecuteStatementReq(
            sessionHandle=session_handle,
            statement=operation,
            runAsync=True,
            getDirectResults=ttypes.TSparkGetDirectResults(
                maxRows=max_rows, maxBytes=max_bytes
            ),
            canReadArrowResult=True,
            canDecompressLZ4Result=lz4_compression,
            canDownloadResult=False,
            confOverlay={
                # We want to receive proper Timestamp arrow types.
                "spark.thriftserver.arrowBasedRowSet.timestampAsString": "false"
            },
            useArrowNativeTypes=spark_arrow_types,
        )
        resp = self.make_request(self._client.ExecuteStatement, req)
        return self._handle_execute_response(resp, cursor)

    def get_catalogs(self, session_handle, max_rows, max_bytes, cursor):
        assert session_handle is not None

        req = ttypes.TGetCatalogsReq(
            sessionHandle=session_handle,
            getDirectResults=ttypes.TSparkGetDirectResults(
                maxRows=max_rows, maxBytes=max_bytes
            ),
        )
        resp = self.make_request(self._client.GetCatalogs, req)
        return self._handle_execute_response(resp, cursor)

    def get_schemas(
        self,
        session_handle,
        max_rows,
        max_bytes,
        cursor,
        catalog_name=None,
        schema_name=None,
    ):
        assert session_handle is not None

        req = ttypes.TGetSchemasReq(
            sessionHandle=session_handle,
            getDirectResults=ttypes.TSparkGetDirectResults(
                maxRows=max_rows, maxBytes=max_bytes
            ),
            catalogName=catalog_name,
            schemaName=schema_name,
        )
        resp = self.make_request(self._client.GetSchemas, req)
        return self._handle_execute_response(resp, cursor)

    def get_tables(
        self,
        session_handle,
        max_rows,
        max_bytes,
        cursor,
        catalog_name=None,
        schema_name=None,
        table_name=None,
        table_types=None,
    ):
        assert session_handle is not None

        req = ttypes.TGetTablesReq(
            sessionHandle=session_handle,
            getDirectResults=ttypes.TSparkGetDirectResults(
                maxRows=max_rows, maxBytes=max_bytes
            ),
            catalogName=catalog_name,
            schemaName=schema_name,
            tableName=table_name,
            tableTypes=table_types,
        )
        resp = self.make_request(self._client.GetTables, req)
        return self._handle_execute_response(resp, cursor)

    def get_columns(
        self,
        session_handle,
        max_rows,
        max_bytes,
        cursor,
        catalog_name=None,
        schema_name=None,
        table_name=None,
        column_name=None,
    ):
        assert session_handle is not None

        req = ttypes.TGetColumnsReq(
            sessionHandle=session_handle,
            getDirectResults=ttypes.TSparkGetDirectResults(
                maxRows=max_rows, maxBytes=max_bytes
            ),
            catalogName=catalog_name,
            schemaName=schema_name,
            tableName=table_name,
            columnName=column_name,
        )
        resp = self.make_request(self._client.GetColumns, req)
        return self._handle_execute_response(resp, cursor)

    def _handle_execute_response(self, resp, cursor):
        cursor.active_op_handle = resp.operationHandle
        self._check_direct_results_for_error(resp.directResults)

        final_operation_state = self._wait_until_command_done(
            resp.operationHandle,
            resp.directResults and resp.directResults.operationStatus,
        )

        return self._results_message_to_execute_response(resp, final_operation_state)

    def fetch_results(
        self,
        op_handle,
        max_rows,
        max_bytes,
        expected_row_start_offset,
        lz4_compressed,
        arrow_schema_bytes,
        description,
    ):
        assert op_handle is not None

        req = ttypes.TFetchResultsReq(
            operationHandle=ttypes.TOperationHandle(
                op_handle.operationId,
                op_handle.operationType,
                False,
                op_handle.modifiedRowCount,
            ),
            maxRows=max_rows,
            maxBytes=max_bytes,
            orientation=ttypes.TFetchOrientation.FETCH_NEXT,
        )

        resp = self.make_request(self._client.FetchResults, req)
        if resp.results.startRowOffset > expected_row_start_offset:
            logger.warning(
                "Expected results to start from {} but they instead start at {}".format(
                    expected_row_start_offset, resp.results.startRowOffset
                )
            )
        arrow_results, n_rows = self._create_arrow_table(
            resp.results, lz4_compressed, arrow_schema_bytes, description
        )
        arrow_queue = ArrowQueue(arrow_results, n_rows)

        return arrow_queue, resp.hasMoreRows

    def close_command(self, op_handle):
        req = ttypes.TCloseOperationReq(operationHandle=op_handle)
        resp = self.make_request(self._client.CloseOperation, req)
        return resp.status

    def cancel_command(self, active_op_handle):
        logger.debug("Cancelling command {}".format(active_op_handle.operationId.guid))
        req = ttypes.TCancelOperationReq(active_op_handle)
        self.make_request(self._client.CancelOperation, req)

    @staticmethod
    def handle_to_id(session_handle):
        return session_handle.sessionId.guid
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Row class was taken from Apache Spark pyspark.

from typing import Any, Dict, List, Optional, Tuple, Union


class Row(tuple):
    """
    A row in a query result.
    The fields in it can be accessed:

    * like attributes (``row.key``)
    * like dictionary values (``row[key]``)

    ``key in row`` will search through row keys.

    Row can be used to create a row object by using named arguments.
    It is not allowed to omit a named argument to represent that the value is
    None or missing. This should be explicitly set to None in this case.

    Examples
    --------
    >>> row = Row(name="Alice", age=11)
    >>> row
    Row(name='Alice', age=11)
    >>> row['name'], row['age']
    ('Alice', 11)
    >>> row.name, row.age
    ('Alice', 11)
    >>> 'name' in row
    True
    >>> 'wrong_key' in row
    False

    Row also can be used to create another Row like class, then it
    could be used to create Row objects, such as

    >>> Person = Row("name", "age")
    >>> Person
    <Row('name', 'age')>
    >>> 'name' in Person
    True
    >>> 'wrong_key' in Person
    False
    >>> Person("Alice", 11)
    Row(name='Alice', age=11)

    This form can also be used to create rows as tuple values, i.e. with unnamed
    fields.

    >>> row1 = Row("Alice", 11)
    >>> row2 = Row(name="Alice", age=11)
    >>> row1 == row2
    True
    """

    def __new__(cls, *args: Optional[str], **kwargs: Optional[Any]) -> "Row":
        if args and kwargs:
            raise ValueError("Can not use both args " "and kwargs to create Row")
        if kwargs:
            # create row objects
            row = tuple.__new__(cls, list(kwargs.values()))
            row.__fields__ = list(kwargs.keys())
            return row
        else:
            # create row class or objects
            return tuple.__new__(cls, args)

    def asDict(self, recursive: bool = False) -> Dict[str, Any]:
        """
        Return as a dict

        Parameters
        ----------
        recursive : bool, optional
            turns the nested Rows to dict (default: False).

        Notes
        -----
        If a row contains duplicate field names, e.g., the rows of a join
        between two dataframes that both have the fields of same names,
        one of the duplicate fields will be selected by ``asDict``. ``__getitem__``
        will also return one of the duplicate fields, however returned value might
        be different to ``asDict``.

        Examples
        --------
        >>> Row(name="Alice", age=11).asDict() == {'name': 'Alice', 'age': 11}
        True
        >>> row = Row(key=1, value=Row(name='a', age=2))
        >>> row.asDict() == {'key': 1, 'value': Row(name='a', age=2)}
        True
        >>> row.asDict(True) == {'key': 1, 'value': {'name': 'a', 'age': 2}}
        True
        """
        if not hasattr(self, "__fields__"):
            raise TypeError("Cannot convert a Row class into dict")

        if recursive:

            def conv(obj: Any) -> Any:
                if isinstance(obj, Row):
                    return obj.asDict(True)
                elif isinstance(obj, list):
                    return [conv(o) for o in obj]
                elif isinstance(obj, dict):
                    return dict((k, conv(v)) for k, v in obj.items())
                else:
                    return obj

            return dict(zip(self.__fields__, (conv(o) for o in self)))
        else:
            return dict(zip(self.__fields__, self))

    def __contains__(self, item: Any) -> bool:
        if hasattr(self, "__fields__"):
            return item in self.__fields__
        else:
            return super(Row, self).__contains__(item)

    # let object acts like class
    def __call__(self, *args: Any) -> "Row":
        """create new Row object"""
        if len(args) > len(self):
            raise ValueError(
                "Can not create Row with fields %s, expected %d values "
                "but got %s" % (self, len(self), args)
            )
        return _create_row(self, args)

    def __getitem__(self, item: Any) -> Any:
        if isinstance(item, (int, slice)):
            return super(Row, self).__getitem__(item)
        try:
            # it will be slow when it has many fields,
            # but this will not be used in normal cases
            idx = self.__fields__.index(item)
            return super(Row, self).__getitem__(idx)
        except IndexError:
            raise KeyError(item)
        except ValueError:
            raise ValueError(item)

    def __getattr__(self, item: str) -> Any:
        if item.startswith("__"):
            raise AttributeError(item)
        try:
            # it will be slow when it has many fields,
            # but this will not be used in normal cases
            idx = self.__fields__.index(item)
            return self[idx]
        except IndexError:
            raise AttributeError(item)
        except ValueError:
            raise AttributeError(item)

    def __setattr__(self, key: Any, value: Any) -> None:
        if key != "__fields__":
            raise RuntimeError("Row is read-only")
        self.__dict__[key] = value

    def __reduce__(
        self,
    ) -> Union[str, Tuple[Any, ...]]:
        """Returns a tuple so Python knows how to pickle Row."""
        if hasattr(self, "__fields__"):
            return (_create_row, (self.__fields__, tuple(self)))
        else:
            return tuple.__reduce__(self)

    def __repr__(self) -> str:
        """Printable representation of Row used in Python REPL."""
        if hasattr(self, "__fields__"):
            return "Row(%s)" % ", ".join(
                "%s=%r" % (k, v) for k, v in zip(self.__fields__, tuple(self))
            )
        else:
            return "<Row(%s)>" % ", ".join("%r" % field for field in self)


def _create_row(
    fields: Union["Row", List[str]], values: Union[Tuple[Any, ...], List[Any]]
) -> "Row":
    row = Row(*values)
    row.__fields__ = fields
    return row
from collections import namedtuple, OrderedDict
from collections.abc import Iterable
import datetime
from enum import Enum
from typing import Dict
import pyarrow


class ArrowQueue:
    def __init__(
        self, arrow_table: pyarrow.Table, n_valid_rows: int, start_row_index: int = 0
    ):
        """
        A queue-like wrapper over an Arrow table

        :param arrow_table: The Arrow table from which we want to take rows
        :param n_valid_rows: The index of the last valid row in the table
        :param start_row_index: The first row in the table we should start fetching from
        """
        self.cur_row_index = start_row_index
        self.arrow_table = arrow_table
        self.n_valid_rows = n_valid_rows

    def next_n_rows(self, num_rows: int) -> pyarrow.Table:
        """Get upto the next n rows of the Arrow dataframe"""
        length = min(num_rows, self.n_valid_rows - self.cur_row_index)
        # Note that the table.slice API is not the same as Python's slice
        # The second argument should be length, not end index
        slice = self.arrow_table.slice(self.cur_row_index, length)
        self.cur_row_index += slice.num_rows
        return slice

    def remaining_rows(self) -> pyarrow.Table:
        slice = self.arrow_table.slice(
            self.cur_row_index, self.n_valid_rows - self.cur_row_index
        )
        self.cur_row_index += slice.num_rows
        return slice


ExecuteResponse = namedtuple(
    "ExecuteResponse",
    "status has_been_closed_server_side has_more_rows description lz4_compressed is_staging_operation "
    "command_handle arrow_queue arrow_schema_bytes",
)


def _bound(min_x, max_x, x):
    """Bound x by [min_x, max_x]

    min_x or max_x being None means unbounded in that respective side.
    """
    if min_x is None and max_x is None:
        return x
    if min_x is None:
        return min(max_x, x)
    if max_x is None:
        return max(min_x, x)
    return min(max_x, max(min_x, x))


class NoRetryReason(Enum):
    OUT_OF_TIME = "out of time"
    OUT_OF_ATTEMPTS = "out of attempts"
    NOT_RETRYABLE = "non-retryable error"


class RequestErrorInfo(
    namedtuple(
        "RequestErrorInfo_", "error error_message retry_delay http_code method request"
    )
):
    @property
    def request_session_id(self):
        if hasattr(self.request, "sessionHandle"):
            return self.request.sessionHandle.sessionId.guid
        else:
            return None

    @property
    def request_query_id(self):
        if hasattr(self.request, "operationHandle"):
            return self.request.operationHandle.operationId.guid
        else:
            return None

    def full_info_logging_context(
        self, no_retry_reason, attempt, max_attempts, elapsed, max_duration
    ):
        log_base_data_dict = OrderedDict(
            [
                ("method", self.method),
                ("session-id", self.request_session_id),
                ("query-id", self.request_query_id),
                ("http-code", self.http_code),
                ("error-message", self.error_message),
                ("original-exception", str(self.error)),
            ]
        )

        log_base_data_dict["no-retry-reason"] = (
            no_retry_reason and no_retry_reason.value
        )
        log_base_data_dict["bounded-retry-delay"] = self.retry_delay
        log_base_data_dict["attempt"] = "{}/{}".format(attempt, max_attempts)
        log_base_data_dict["elapsed-seconds"] = "{}/{}".format(elapsed, max_duration)

        return log_base_data_dict

    def user_friendly_error_message(self, no_retry_reason, attempt, elapsed):
        # This should be kept at the level that is appropriate to return to a Redash user
        user_friendly_error_message = "Error during request to server"
        if self.error_message:
            user_friendly_error_message = "{}: {}".format(
                user_friendly_error_message, self.error_message
            )
        return user_friendly_error_message


# Taken from PyHive
class ParamEscaper:
    _DATE_FORMAT = "%Y-%m-%d"
    _TIME_FORMAT = "%H:%M:%S.%f"
    _DATETIME_FORMAT = "{} {}".format(_DATE_FORMAT, _TIME_FORMAT)

    def escape_args(self, parameters):
        if isinstance(parameters, dict):
            return {k: self.escape_item(v) for k, v in parameters.items()}
        elif isinstance(parameters, (list, tuple)):
            return tuple(self.escape_item(x) for x in parameters)
        else:
            raise exc.ProgrammingError(
                "Unsupported param format: {}".format(parameters)
            )

    def escape_number(self, item):
        return item

    def escape_string(self, item):
        # Need to decode UTF-8 because of old sqlalchemy.
        # Newer SQLAlchemy checks dialect.supports_unicode_binds before encoding Unicode strings
        # as byte strings. The old version always encodes Unicode as byte strings, which breaks
        # string formatting here.
        if isinstance(item, bytes):
            item = item.decode("utf-8")
        # This is good enough when backslashes are literal, newlines are just followed, and the way
        # to escape a single quote is to put two single quotes.
        # (i.e. only special character is single quote)
        return "'{}'".format(item.replace("\\", "\\\\").replace("'", "\\'"))

    def escape_sequence(self, item):
        l = map(str, map(self.escape_item, item))
        return "(" + ",".join(l) + ")"

    def escape_datetime(self, item, format, cutoff=0):
        dt_str = item.strftime(format)
        formatted = dt_str[:-cutoff] if cutoff and format.endswith(".%f") else dt_str
        return "'{}'".format(formatted)

    def escape_item(self, item):
        if item is None:
            return "NULL"
        elif isinstance(item, (int, float)):
            return self.escape_number(item)
        elif isinstance(item, str):
            return self.escape_string(item)
        elif isinstance(item, Iterable):
            return self.escape_sequence(item)
        elif isinstance(item, datetime.datetime):
            return self.escape_datetime(item, self._DATETIME_FORMAT)
        elif isinstance(item, datetime.date):
            return self.escape_datetime(item, self._DATE_FORMAT)
        else:
            raise exc.ProgrammingError("Unsupported object {}".format(item))


def inject_parameters(operation: str, parameters: Dict[str, str]):
    return operation % parameters
Metadata-Version: 2.1
Name: databricks-sql-connector
Version: 2.3.0
Summary: Databricks SQL Connector for Python
License: Apache-2.0
Author: Databricks
Author-email: databricks-sql-connector-maintainers@databricks.com
Requires-Python: >=3.7.1,<4.0.0
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: lz4 (>=4.0.2,<5.0.0)
Requires-Dist: numpy (==1.21.1) ; python_version >= "3.7" and python_version < "3.8"
Requires-Dist: numpy (==1.23.4) ; python_version >= "3.8"
Requires-Dist: oauthlib (>=3.1.0,<4.0.0)
Requires-Dist: pandas (>=1.3.0,<2.0.0)
Requires-Dist: pyarrow (>=10.0.1) ; python_version >= "3.11"
Requires-Dist: pyarrow (>=9.0.0) ; python_version >= "3.7" and python_version < "3.11"
Requires-Dist: requests (>=2.18.1,<3.0.0)
Requires-Dist: thrift (>=0.16.0,<0.17.0)
Project-URL: Bug Tracker, https://github.com/databricks/databricks-sql-python/issues
Project-URL: Homepage, https://github.com/databricks/databricks-sql-python
Description-Content-Type: text/markdown

# Databricks SQL Connector for Python

[![PyPI](https://img.shields.io/pypi/v/databricks-sql-connector?style=flat-square)](https://pypi.org/project/databricks-sql-connector/)
[![Downloads](https://pepy.tech/badge/databricks-sql-connector)](https://pepy.tech/project/databricks-sql-connector)

The Databricks SQL Connector for Python allows you to develop Python applications that connect to Databricks clusters and SQL warehouses. It is a Thrift-based client with no dependencies on ODBC or JDBC. It conforms to the [Python DB API 2.0 specification](https://www.python.org/dev/peps/pep-0249/).

This connector uses Arrow as the data-exchange format, and supports APIs to directly fetch Arrow tables. Arrow tables are wrapped in the `ArrowQueue` class to provide a natural API to get several rows at a time.

You are welcome to file an issue here for general use cases. You can also contact Databricks Support [here](help.databricks.com).

## Requirements

Python 3.7 or above is required.

## Documentation

For the latest documentation, see

- [Databricks](https://docs.databricks.com/dev-tools/python-sql-connector.html)
- [Azure Databricks](https://docs.microsoft.com/en-us/azure/databricks/dev-tools/python-sql-connector)

## Quickstart

Install the library with `pip install databricks-sql-connector`

Example usage:

```python
from databricks import sql

connection = sql.connect(
  server_hostname='********.databricks.com',
  http_path='/sql/1.0/endpoints/****************',
  access_token='dapi********************************')


cursor = connection.cursor()

cursor.execute('SELECT * FROM RANGE(10)')
result = cursor.fetchall()
for row in result:
  print(row)

cursor.close()
connection.close()
```

In the above example:
- `server-hostname` is the Databricks instance host name.
- `http-path` is the HTTP Path either to a Databricks SQL endpoint (e.g. /sql/1.0/endpoints/1234567890abcdef),
or to a Databricks Runtime interactive cluster (e.g. /sql/protocolv1/o/1234567890123456/1234-123456-slid123)
- `personal-access-token` is the Databricks Personal Access Token for the account that will execute commands and queries


## Contributing

See [CONTRIBUTING.md](CONTRIBUTING.md)

## License

[Apache License 2.0](LICENSE)

