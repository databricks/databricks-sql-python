name: SQLAlchemy dialect test
on: 
  push:
    paths:
      - Makefile
      - src/databricks/sqlalchemy
      - tests/sqlalchemy
      - .github/workflows/sqlalchemy-dialect.yml
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      #----------------------------------------------
      #  -----  install databricks-sql-cli  -----
      #----------------------------------------------
      - name: Install databricks-sql-cli & initalize dbsqlclirc
        run: |
          python -m pip install databricks-sql-cli
          dbsqlcli && true

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.event.repository.name }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        #----------------------------------------------
        #       import secrets from the Github env
        #----------------------------------------------
        env:
          DATABRICKS_SERVER_HOSTNAME: ${{ secrets.REPOSEC_DATABRICKS_SERVER_HOSTNAME }}
          DATABRICKS_HTTP_PATH: ${{ secrets.REPOSEC_DATABRICKS_HTTP_PATH }}
          DATABRICKS_TOKEN: ${{ secrets.REPOSEC_DATABRICKS_TOKEN }}
          DATABRICKS_SCHEMA: ${{ secrets.REPOSEC_DATABRICKS_SCHEMA }}

        run: |
          echo y | dbsqlcli --hostname $DATABRICKS_SERVER_HOSTNAME --http-path $DATABRICKS_HTTP_PATH --access-token $DATABRICKS_TOKEN -e "USE $DATABRICKS_SCHEMA; DROP TABLE IF EXISTS t; DROP TABLE IF EXISTS tabletest; DROP TABLE IF EXISTS integer_test;"
          poetry run pytest tests/sqlalchemy/test_full_sa.py::IntegerTest --dburi "databricks+thrift://token:$DATABRICKS_TOKEN@$DATABRICKS_SERVER_HOSTNAME/$DATABRICKS_SCHEMA?http_path=$DATABRICKS_HTTP_PATH"
          echo y | dbsqlcli --hostname $DATABRICKS_SERVER_HOSTNAME --http-path $DATABRICKS_HTTP_PATH --access-token $DATABRICKS_TOKEN -e "USE $DATABRICKS_SCHEMA; DROP TABLE IF EXISTS t; DROP TABLE IF EXISTS tabletest; DROP TABLE IF EXISTS integer_test;"

  # check-linting:
  #   runs-on: ubuntu-latest
  #   steps:
  #     #----------------------------------------------
  #     #       check-out repo and set-up python
  #     #----------------------------------------------
  #     - name: Check out repository
  #       uses: actions/checkout@v2
  #     - name: Set up python
  #       id: setup-python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
  #     #----------------------------------------------
  #     #  -----  install & configure poetry  -----
  #     #----------------------------------------------
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true
  #         installer-parallel: true

  #     #----------------------------------------------
  #     #       load cached venv if cache exists
  #     #----------------------------------------------
  #     - name: Load cached venv
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.event.repository.name }}-${{ hashFiles('**/poetry.lock') }}
  #     #----------------------------------------------
  #     # install dependencies if cache does not exist
  #     #----------------------------------------------
  #     - name: Install dependencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry install --no-interaction --no-root
  #     #----------------------------------------------
  #     # install your root project, if required
  #     #----------------------------------------------
  #     - name: Install library
  #       run: poetry install --no-interaction
  #     #----------------------------------------------
  #     #              black the code
  #     #----------------------------------------------
  #     - name: Black
  #       run: poetry run black --check src

  # check-types:
  #   runs-on: ubuntu-latest
  #   steps:
  #     #----------------------------------------------
  #     #       check-out repo and set-up python
  #     #----------------------------------------------
  #     - name: Check out repository
  #       uses: actions/checkout@v2
  #     - name: Set up python
  #       id: setup-python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
  #     #----------------------------------------------
  #     #  -----  install & configure poetry  -----
  #     #----------------------------------------------
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true
  #         installer-parallel: true

  #     #----------------------------------------------
  #     #       load cached venv if cache exists
  #     #----------------------------------------------
  #     - name: Load cached venv
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.event.repository.name }}-${{ hashFiles('**/poetry.lock') }}
  #     #----------------------------------------------
  #     # install dependencies if cache does not exist
  #     #----------------------------------------------
  #     - name: Install dependencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry install --no-interaction --no-root
  #     #----------------------------------------------
  #     # install your root project, if required
  #     #----------------------------------------------
  #     - name: Install library
  #       run: poetry install --no-interaction
  #     #----------------------------------------------
  #     #              black the code
  #     #----------------------------------------------
  #     - name: Mypy
  #       run: poetry run mypy src