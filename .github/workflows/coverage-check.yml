name: Code Coverage

permissions:
  contents: read

on: [pull_request, workflow_dispatch]

jobs:
  coverage:
    runs-on: ubuntu-latest
    environment: azure-prod
    env:
      DATABRICKS_SERVER_HOSTNAME: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_HTTP_PATH: ${{ secrets.TEST_PECO_WAREHOUSE_HTTP_PATH }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      DATABRICKS_CATALOG: peco
      DATABRICKS_USER: ${{ secrets.TEST_PECO_SP_ID }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for coverage comparison
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
          repository: ${{ github.event.pull_request.head.repo.full_name ||  github.repository }}
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.event.repository.name }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction --all-extras
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests with coverage
        continue-on-error: true
        run: |
          poetry run python -m pytest \
            tests/e2e/test_driver.py::TestPySQLCoreSuite::test_escape_single_quotes \
            --cov=src --cov-report=xml --cov-report=term -v
      #----------------------------------------------
      #         check for coverage override
      #----------------------------------------------
      - name: Check for coverage override
        id: override
        run: |
          OVERRIDE_COMMENT=$(echo "${{ github.event.pull_request.body }}" | grep -E "SKIP_COVERAGE_CHECK\s*=" || echo "")
          if [ -n "$OVERRIDE_COMMENT" ]; then
            echo "override=true" >> $GITHUB_OUTPUT
            REASON=$(echo "$OVERRIDE_COMMENT" | sed -E 's/.*SKIP_COVERAGE_CHECK\s*=\s*(.+)/\1/')
            echo "reason=$REASON" >> $GITHUB_OUTPUT
            echo "Coverage override found in PR description: $REASON"
          else
            echo "override=false" >> $GITHUB_OUTPUT
            echo "No coverage override found"
          fi
      #----------------------------------------------
      #         check coverage percentage
      #----------------------------------------------
      - name: Report coverage percentage
        run: |
          COVERAGE_FILE="coverage.xml"
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "ERROR: Coverage file not found at $COVERAGE_FILE"
            exit 1
          fi

          # Install xmllint if not available
          if ! command -v xmllint &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y libxml2-utils
          fi

          COVERED=$(xmllint --xpath "string(//coverage/@lines-covered)" "$COVERAGE_FILE")
          TOTAL=$(xmllint --xpath "string(//coverage/@lines-valid)" "$COVERAGE_FILE")

          # Calculate percentage using Python for precision
          PERCENTAGE=$(python3 -c "covered=${COVERED}; total=${TOTAL}; print(round((covered/total)*100, 2))")

          echo "ðŸ“Š Branch Coverage: ${PERCENTAGE}%"
